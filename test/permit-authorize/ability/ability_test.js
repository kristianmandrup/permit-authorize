// Generated by LiveScript 1.2.0
(function(){
  var requires, ability, User, Book, createRequest, createUser, createPermit, Allower, Ability, Permit, permitFor, PermitMatcher;
  requires = require('../../../requires');
  requires.test('test_setup');
  ability = requires.test('ability/abilities');
  User = requires.fix('user');
  Book = requires.fix('book');
  createRequest = requires.fac('create-request');
  createUser = requires.fac('create-user');
  createPermit = requires.fac('create-permit');
  Allower = requires.lib('allower').Allower;
  Ability = requires.lib('ability').Ability;
  Permit = requires.lib('permit').Permit;
  permitFor = requires.permit('factory').permitFor;
  PermitMatcher = requires.permit('matcher').PermitMatcher;
  describe('Ability', function(){
    var book, createBook, abilities, requests, users, permits;
    createBook = function(title){
      return new Book({
        title: title
      });
    };
    abilities = {};
    requests = {};
    users = {};
    permits = {};
    before(function(){
      book = createBook('hello');
      permits.user = permitFor('User', {
        match: function(access){
          return this.matching(access).user();
        },
        rules: function(){
          return this.ucan('view', 'book');
        }
      });
      permits.guest = permitFor('Guest', {
        match: function(access){
          return this.matching(access).role('guest');
        },
        rules: function(){
          this.ucan('read', 'book');
          return this.ucannot('write', 'book');
        }
      });
      permits.editor = permitFor('Editor', {
        match: function(access){
          return this.matching(access).role('editor');
        },
        rules: function(){
          return this.ucan(['read', 'write'], 'book');
        }
      });
      requests.user = createRequest.userAccess();
      requests.empty = createRequest.empty();
      return users.kris = createUser.kris();
    });
    describe('create', function(){
      return context('Ability for kris', function(){
        specify('is an Ability', function(){
          return ability.kris.constructor.should.eql(Ability);
        });
        return describe('user', function(){
          return specify('has user kris', function(){
            return ability.kris.user.should.eql(users.kris);
          });
        });
      });
    });
    describe('can', function(){
      before(function(){});
      context('guest ability', function(){
        specify('read a book access should be allowed for guest user', function(){
          return ability.guest.can({
            action: 'read',
            subject: book
          }).should.be['true'];
        });
        return specify('write a book access should NOT be allowed for guest user', function(){
          return ability.guest.can({
            action: 'write',
            subject: book
          }).should.be['false'];
        });
      });
      return context('admin ability', function(){
        return specify('write a book access should NOT be allowed for admin user', function(){
          return ability.admin.can({
            action: 'write',
            subject: book
          }).should.be['false'];
        });
      });
    });
    return describe('cannot', function(){
      before(function(){});
      context('guest ability', function(){
        specify('read a book access should be allowed for admin user', function(){
          return ability.guest.cannot({
            action: 'read',
            subject: book
          }).should.be['false'];
        });
        return specify('write a book access should NOT be allowed for guest user', function(){
          return ability.guest.cannot({
            action: 'write',
            subject: book
          }).should.be['true'];
        });
      });
      return context('admin ability', function(){
        specify('write a book access should NOT be allowed for admin user', function(){
          return ability.admin.cannot('write', book).should.be['true'];
        });
        specify('write a book access should NOT be allowed for admin user', function(){
          return ability.admin.cannot(['write', book]).should.be['true'];
        });
        return describe('allower', function(){
          specify('return Allower instance', function(){
            return ability.admin.allower().constructor.should.eql(Allower);
          });
          return specify('Ability transfers access-request to Allower', function(){
            return ability.admin.allower().accessRequest.should.eql(ability.admin.accessRequest());
          });
        });
      });
    });
  });
}).call(this);
