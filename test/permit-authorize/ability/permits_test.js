// Generated by LiveScript 1.2.0
(function(){
  var requires, ability, User, Book, createRequest, createUser, createPermit, Ability, Permit, PermitRegistry, PermitFilter;
  requires = require('../../../requires');
  ability = require('./abilities');
  requires.test('test_setup');
  User = requires.fix('user');
  Book = requires.fix('book');
  createRequest = requires.fac('create-request');
  createUser = requires.fac('create-user');
  createPermit = requires.fac('create-permit');
  createRequest = requires.fac('create-request');
  Ability = requires.lib('ability');
  Permit = requires.lib('permit');
  PermitRegistry = requires.permit('permit_registry');
  PermitFilter = requires.permit('permit-filter');
  describe('Ability', function(){
    var abook, permits, requests;
    permits = {};
    requests = {};
    return describe('permits', function(){
      before(function(){
        abook = new Book({
          title: 'book'
        });
        PermitRegistry.clearAll();
        permits.user = createPermit.matching.user();
        permits.guest = createPermit.matching.role.guest();
        permits.admin = createPermit.matching.role.admin();
        requests.empty = createRequest.empty();
        requests.admin = createRequest.roleAccess('admin');
        requests.guest = createRequest.roleAccess('guest');
        return requests.readBook = {
          action: 'read',
          subject: abook
        };
      });
      describe('permit-filter', function(){
        specify('all permits filtered out on empty request', function(){
          return PermitFilter.filter(requests.empty).should.eql([]);
        });
        return specify('only user and guest permit if guest request', function(){
          return PermitFilter.filter(requests.guest).should.eql([permits.user, permits.guest]);
        });
      });
      context('kris-ability', function(){
        specify('empty request matches no permits', function(){
          return ability.kris.permits(requests.empty).should.eql([]);
        });
        specify('admin user request matchies user and admin permits', function(){
          return ability.kris.permits(requests.admin).should.eql([permits.user, permits.admin]);
        });
        return specify('guest user request matchies user and guest permits', function(){
          return ability.kris.permits(requests.guest).should.eql([permits.user, permits.guest]);
        });
      });
      return context('guest-ability', function(){
        return specify('no permits allow read book', function(){
          return ability.guest.permits(requests.readBook).should.eql([]);
        });
      });
    });
  });
}).call(this);
