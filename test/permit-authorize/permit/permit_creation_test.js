// Generated by LiveScript 1.2.0
(function(){
  var requires, Permit, RuleRepo, RuleApplier, PermitMatcher, permitFor, PermitRegistry, Book, permitClazz, createPermit, AdminPermit, GuestPermit;
  requires = require('../../../requires');
  requires.test('test_setup');
  Permit = requires.lib('permit').Permit;
  RuleRepo = requires.rule('repo').RuleRepo;
  RuleApplier = requires.permit('rule').PermitRuleApplier;
  PermitMatcher = requires.permit('matcher').PermitMatcher;
  permitFor = requires.permit('factory').permitFor;
  PermitRegistry = requires.permit('registry'.PermitRegistry);
  PermitMatcher = requires.permit('matcher').PermitMatcher;
  RuleApplier = requires.rule('apply').RulesApplier;
  Book = requires.fix('book');
  permitClazz = requires.fix('permit-class');
  createPermit = requires.fac('create-permit');
  AdminPermit = permitClazz.AdminPermit;
  GuestPermit = permitClazz.GuestPermit;
  describe('Permit', function(){
    var requests, permits;
    requests = {};
    permits = {};
    before(function(){
      return permits.empty = new Permit;
    });
    after(function(){
      return Permit.registry.clean();
    });
    describe('init creates a permit ', function(){
      specify('first unnamed permit is named Permit-0', function(){
        return permits.empty.name.should.eql('Permit-0');
      });
      specify('with no description', function(){
        return permits.empty.description.should.eql('');
      });
      return context('extra Guest permit', function(){
        before(function(){
          return permits.guest = new GuestPermit;
        });
        return specify('second unnamed is named Permit-1', function(){
          return permits.guest.name.should.eql('Permit-1');
        });
      });
    });
    return xcontext('a single permit named hello', function(){
      before(function(){
        return permits.hello = new Permit('hello');
      });
      after(function(){
        return PermitRegistry.clearAll();
      });
      specify('first unnamed permit is named Permit-0', function(){
        return permits.hello.name.should.eql('hello');
      });
      describe('rules', function(){
        specify('has an empty canRules list', function(){
          return permits.hello.canRules().should.be.empty;
        });
        return specify('has an empty cannotRules list', function(){
          return permits.hello.cannotRules().should.be.empty;
        });
      });
      describe('rule-applier-class', function(){
        return specify('by default has rule-applier-class = RuleApplier', function(){
          return permits.hello.ruleApplierClass.should.eql(RuleApplier);
        });
      });
      describe('permit-allower', function(){
        return specify('has an allower', function(){
          return permits.hello.permitAllower().constructor.should.eql(PermitAllower);
        });
      });
      return describe('permit-matcher-class', function(){
        return specify('permit by default has permit-matcher-class = PermitMatcher', function(){
          return permits.hello.permitMatcherClass.should.eql(PermitMatcher);
        });
      });
    });
  });
}).call(this);
