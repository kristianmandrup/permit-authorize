// Generated by LiveScript 1.2.0
(function(){
  var requires, Book, User, Permit, permitFor, PermitMatcher, PermitRegistry, setup, createUser, createRequest, createPermit;
  requires = require('../../../requires');
  requires.test('test_setup');
  Book = requires.fix('book');
  User = requires.fix('user');
  Permit = requires.lib('permit');
  permitFor = requires.permit('permit-for');
  PermitMatcher = requires.permit('permit_matcher');
  PermitRegistry = requires.permit('permit-registry');
  setup = require('./../permits').setup;
  createUser = requires.fac('create-user');
  createRequest = requires.fac('create-request');
  createPermit = requires.fac('create-permit');
  describe('PermitMatcher', function(){
    var permitMatcher, book, users, permits, requests, matching, noneMatching;
    users = {};
    permits = {};
    requests = {};
    matching = {};
    noneMatching = {};
    before(function(){
      users.kris = createUser.kris();
      users.emily = createUser.emily();
      requests.user = {
        user: users.kris
      };
      permits.user = setup.userPermit();
      return permitMatcher = new PermitMatcher(permits.user, requests.user);
    });
    return describe('exclude', function(){
      describe('excludes user.name: kris', function(){
        before(function(){
          return permits.user.excludes = {
            user: users.kris
          };
        });
        return specify('matches access-request on excludes intersect', function(){
          return permitMatcher.exclude().should.be['true'];
        });
      });
      describe('excludes empty {}', function(){
        before(function(){
          return permits.user.excludes = {};
        });
        return specify('matches access-request since empty excludes always intersect', function(){
          return permitMatcher.exclude().should.be['true'];
        });
      });
      return describe('excludes other user', function(){
        before(function(){
          return permits.user.excludes = {
            user: users.emily
          };
        });
        return specify('does NOT match access-request since NO excludes intersect', function(){
          return permitMatcher.exclude().should.be['false'];
        });
      });
    });
  });
}).call(this);
