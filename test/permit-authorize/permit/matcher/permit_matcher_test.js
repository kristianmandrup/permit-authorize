// Generated by LiveScript 1.2.0
(function(){
  var requires, Book, User, Permit, permitFor, PermitMatcher, PermitRegistry, setup, createUser, createRequest, createPermit, createMatcher;
  requires = require('../../../../requires');
  requires.test('test_setup');
  Book = requires.fix('book');
  User = requires.fix('user');
  Permit = requires.lib('permit').Permit;
  permitFor = requires.permit('factory').permitFor;
  PermitMatcher = requires.permit('matcher').PermitMatcher;
  PermitRegistry = requires.permit('registry').PermitRegistry;
  setup = requires.fix('permits').setup;
  createUser = requires.fac('create-user');
  createRequest = requires.fac('create-request');
  createPermit = requires.fac('create-permit');
  createMatcher = function(ctx, ar, debug){
    debug == null && (debug = true);
    return new PermitMatcher(ctx, ar, debug);
  };
  describe('PermitMatcher', function(){
    var permitMatcher, book, users, permits, requests, matching, noneMatching;
    users = {};
    permits = {};
    requests = {};
    matching = {};
    noneMatching = {};
    before(function(){
      users.kris = createUser.kris;
      users.emily = createUser.name('emily');
      requests.user = createRequest;
      permits.user = setup.userPermit();
      return permitMatcher = createMatcher(permits.user, requests.user);
    });
    describe('match access', function(){
      var matching, noneMatching;
      matching = {};
      noneMatching = {};
      before(function(){
        requests.user = {
          user: {}
        };
        requests.ctx = {
          ctx: ''
        };
        matching.permitMatcher = createMatcher(permits.user, requests.user);
        return noneMatching.permitMatcher = createMatcher(permits.user, requests.ctx);
      });
      specify('does not match access without user', function(){
        return noneMatching.permitMatcher.match().should.be['false'];
      });
      return specify('matches access with user', function(){
        return matching.permitMatcher.match().should.be['true'];
      });
    });
    describe('match access - complex', function(){
      before(function(){
        book = new Book({
          title: 'hello'
        });
        requests.valid = {
          user: {
            type: 'person',
            role: 'admin'
          },
          subject: book
        };
        requests.invalid = {
          user: {
            type: 'person',
            role: 'admin'
          },
          subject: 'blip'
        };
        requests.alt = {};
        Permit.registry.cleanAll();
        permits.user = setup.complexUser();
        matching.permitMatcher = createMatcher(permits.user, requests.valid);
        return noneMatching.permitMatcher = createMatcher(permits.user, requests.invalid);
      });
      specify('does not match access without user', function(){
        return noneMatching.permitMatcher.match().should.be['false'];
      });
      return specify('matches access with user', function(){
        return matching.permitMatcher.match().should.be['true'];
      });
    });
    return describe('match access - complex invalid', function(){
      return before(function(){
        requests.valid = {
          user: {
            type: 'person',
            role: 'admin'
          },
          subject: book
        };
        permits.user = setup.complexUserReturnsMatcher();
        permitMatcher = createMatcher(permits.user, requests.valid);
        return specify('AccessMatcher chaining in .match which returns AccessMatcher should call result!', function(){
          return permitMatcher.match().should.be['true'];
        });
      });
    });
  });
}).call(this);
