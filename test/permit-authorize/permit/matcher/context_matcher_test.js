// Generated by LiveScript 1.2.0
(function(){
  var requires, ContextMatcher, createUser;
  requires = require('../../../../requires');
  requires.test('test_setup');
  ContextMatcher = requires.permit('matcher').ContextMatcher;
  createUser = requires.fac('create-user');
  describe('ContextMatcher', function(){
    var permitMatcher, ctx, matcher, users, permits, requests, matching, noneMatching;
    users = {};
    permits = {};
    requests = {};
    matching = {};
    noneMatching = {};
    before(function(){
      var createMatcher;
      users.kris = createUser.kris;
      users.emily = createUser.emily;
      requests.ctx = {
        ctx: {
          area: 'guest'
        }
      };
      requests.user = {
        user: users.kris,
        name: 'hello'
      };
      requests.userAndMore = {
        user: users.kris,
        name: 'hello',
        area: 'admin'
      };
      requests.userAndLess = {
        user: users.kris
      };
      createMatcher = function(ctx){
        return new ContextMatcher(ctx);
      };
      return matcher = createMatcher(requests.user);
    });
    describe('init', function(){
      return specify('has context', function(){
        return matcher.context.should.eql(requests.user);
      });
    });
    describe('match', function(){
      return specify('by default always returns false', function(){
        return matcher.match().should.be['false'];
      });
    });
    return describe('intersect-on partial, access-request', function(){
      specify('intersects when same object', function(){
        return matcher.intersectOn(requests.user).should.be['true'];
      });
      specify('intersects when more than context (covers)', function(){
        return matcher.intersectOn(requests.userAndMore).should.be['true'];
      });
      specify('does not intersects when less than context', function(){
        return matcher.intersectOn(requests.userAndLess).should.be['false'];
      });
      return specify('does not intersects when other object', function(){
        return matcher.intersectOn(requests.ctx).should.be['false'];
      });
    });
  });
}).call(this);
