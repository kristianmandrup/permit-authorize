// Generated by LiveScript 1.2.0
(function(){
  var requires, expect, MatchingContext, mc;
  requires = require('../../../../requires');
  requires.test('test_setup');
  expect = require('chai').expect;
  MatchingContext = requires.permit('matcher').MatchingContext;
  mc = function(ctx, ar){
    return new MatchingContext(ctx, ar);
  };
  describe('MatchingContext', function(){
    before(function(){});
    describe('create', function(){
      describe('invalid ar', function(){
        return specify('throws', function(){
          return expect(function(){
            return mc({}, void 8);
          }).to['throw'];
        });
      });
      return describe('valid', function(){
        return specify('is ok', function(){
          return expect(function(){
            return mc({}, void 8);
          }).to.not['throw'];
        });
      });
    });
    return context('valid MC', function(){
      var ctx, ar, arf, matchCtx;
      before(function(){
        ctx = {
          subject: {
            title: 'Hey ho!',
            _clazz: 'Article'
          }
        };
        ar = {
          subject: 'Article'
        };
        arf = {
          subject: 'Article',
          fingerprint: function(){
            return 'my ass xx';
          }
        };
        return matchCtx = mc(ctx, ar);
      });
      context("they're matching", function(){
        describe('matching', function(){
          return specify('should match', function(){
            return matchCtx.matching().matchResult.should.eql(true);
          });
        });
        describe('_access-matcher', function(){
          var amc;
          before(function(){
            return amc = matchCtx._accessMatcher(ar);
          });
          specify('is an AccessMatcher', function(){
            return expect(amc.constructor.displayName).to.eql('AccessMatcher');
          });
          specify('AccessMatcher with A.R', function(){
            return expect(amc.accessRequest).to.eql(ar);
          });
          return specify('has a match-result', function(){
            return expect(amc.matchResult).to.not.eql(void 8);
          });
        });
        return describe('_cached-matchers', function(){
          return specify('has no entries', function(){
            var cache;
            cache = matchCtx._cachedMatchers;
            return expect(cache).to.eql({});
          });
        });
      });
      return context("A.R with fingerprint", function(){
        return describe('_cached-matching', function(){
          specify('should match', function(){
            var res;
            res = matchCtx._cachedMatching(arf);
            return expect(res).to.not.eql(void 8);
          });
          return specify('should cache in cached-matchers', function(){
            var cache, cached;
            cache = matchCtx._cachedMatchers;
            cached = cache[arf.fingerprint()];
            return expect(cached).to.not.eql(void 8);
          });
        });
      });
    });
  });
}).call(this);
