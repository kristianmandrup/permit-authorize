// Generated by LiveScript 1.2.0
(function(){
  var requires, ContextMatcher, createUser;
  requires = require('../../../../requires');
  requires.test('test_setup');
  ContextMatcher = requires.permit('matcher').ContextMatcher;
  createUser = requires.fac('create-user');
  describe('ContextMatcher (intersect - default include)', function(){
    var permitMatcher, ctx, key, matcher, users, permits, requests, matching, noneMatching, intersect;
    users = {};
    permits = {};
    requests = {};
    ctx = {};
    matching = {};
    noneMatching = {};
    intersect = function(obj){
      return {
        intersect: obj
      };
    };
    before(function(){
      var createMatcher;
      users.kris = createUser.kris;
      users.emily = createUser.emily;
      ctx.base = {
        ctx: {
          area: 'guest',
          secret: '123'
        }
      };
      ctx.andMore = {
        ctx: {
          area: 'guest',
          secret: '123',
          more: 'So much more...'
        }
      };
      ctx.andLess = {
        ctx: {
          area: 'guest'
        }
      };
      requests.user = {
        user: users.kris
      };
      requests.userAndMore = {
        user: users.kris,
        area: 'admin'
      };
      requests.userAndLess = {
        user: users.kris
      };
      createMatcher = function(ctx, key, access, debug){
        debug == null && (debug = false);
        return new ContextMatcher(ctx, key, access, debug);
      };
      key = 'includes';
      return matcher = createMatcher(intersect(ctx.base), key, requests.user);
    });
    describe('init', function(){
      specify('has context', function(){
        return matcher.context.should.eql(intersect(ctx.base));
      });
      specify('has key', function(){
        return matcher.key.should.eql(key);
      });
      return specify('has access-request', function(){
        return matcher.accessRequest.should.eql(requests.user);
      });
    });
    describe('match', function(){
      return specify('by default always returns false', function(){
        return matcher.match().should.be['false'];
      });
    });
    return describe('intersect-on partial, access-request', function(){
      specify('intersects when same object', function(){
        return matcher.intersectOn(ctx.base).should.be['true'];
      });
      specify('intersects when more than context (covers)', function(){
        return matcher.intersectOn(ctx.andMore).should.be['true'];
      });
      specify('does not intersects when less than context', function(){
        return matcher.intersectOn(ctx.andLess).should.be['false'];
      });
      return specify('does not intersects when other object', function(){
        return matcher.intersectOn(requests.user).should.be['false'];
      });
    });
  });
}).call(this);
