// Generated by LiveScript 1.2.0
(function(){
  var requires, Matcher, PermitRegistry, setup, Book, User, createUser, createMatcher, intersect, excludes, users, permits, requests, ctx, context, matching, noneMatching, books;
  requires = require('../../../../../requires');
  requires.test('test_setup');
  Matcher = requires.permit('matcher').ContextMatcher;
  PermitRegistry = requires.permit('registry').PermitRegistry;
  setup = requires.fix('permits').setup;
  Book = requires.fix('book');
  User = requires.fix('user');
  createUser = requires.fac('create-user');
  createMatcher = function(ctx, ar, debug){
    debug == null && (debug = false);
    return new Matcher(ctx, 'excludes', ar, debug);
  };
  intersect = function(obj){
    obj == null && (obj = {});
    return {
      intersect: obj
    };
  };
  excludes = function(obj){
    obj == null && (obj = {});
    return intersect({
      excludes: obj
    });
  };
  users = {};
  permits = {};
  requests = {};
  ctx = {};
  context = {};
  matching = {};
  noneMatching = {};
  users.kris = createUser.kris();
  requests.user = {
    user: users.kris
  };
  users.emily = createUser.emily;
  ctx.base = {
    ctx: {
      area: 'guest',
      secret: '123'
    }
  };
  ctx.andMore = {
    ctx: {
      area: 'guest',
      secret: '123',
      more: 'So much more...'
    }
  };
  ctx.andLess = {
    ctx: {
      area: 'guest'
    }
  };
  permits.user = setup.userPermit();
  books = {};
  describe('ContextMatcher (exclude)', function(){
    var matcher;
    before(function(){});
    return describe('exclude - intersect', function(){
      describe('excludes user.name: kris', function(){
        beforeEach(function(){
          return matcher = createMatcher(excludes(ctx.base), ctx.base);
        });
        return specify('matches access-request on excludes intersect', function(){
          return matcher.match().should.be['true'];
        });
      });
      describe('excludes empty {}', function(){
        beforeEach(function(){
          return matcher = createMatcher(excludes(), requests.user);
        });
        return specify('matches access-request since empty excludes always intersect', function(){
          return matcher.match().should.be['true'];
        });
      });
      return describe('excludes is nil', function(){
        beforeEach(function(){
          permits.user.includes = void 8;
          return matcher = createMatcher(permits.user, requests.user);
        });
        return specify('does NOT match access-request since NO excludes intersect', function(){
          return matcher.match().should.be['false'];
        });
      });
    });
  });
}).call(this);
