// Generated by LiveScript 1.2.0
(function(){
  var requires, chai, expect, Permit, PermitRegistry, RuleRepo, PermitRulesLoader;
  requires = require('../../../requires');
  requires.test('test_setup');
  chai = require('chai');
  expect = chai.expect;
  Permit = requires.lib('permit');
  PermitRegistry = requires.permit('permit-registry');
  RuleRepo = requires.rule('rule_repo');
  PermitRulesLoader = requires.permit('permit_rules_loader');
  describe('Permit', function(){
    var rulesLoader, loadedRules, filePath, basicRulesFilePath, permits;
    permits = {};
    return describe('rules loader', function(){
      beforeEach(function(){
        rulesLoader = new PermitRulesLoader;
        return basicRulesFilePath = './test/rules/basic-rules.json';
      });
      afterEach(function(){
        return PermitRegistry.clearAll();
      });
      context('bad file path', function(){
        return specify('file load error', function(){
          expect(function(){
            return rulesLoader.loadRules('rules.json', false);
          }).to['throw'](new Error);
          return specify('sets file path', function(){
            rulesLoader.loadRules('rules.json', false);
            return expect(rulesLoader.filePath).to.eq(void 8);
          });
        });
      });
      return context('good file path', function(){
        specify('loads rules', function(){
          return expect(function(){
            return rulesLoader.loadRules(basicRulesFilePath);
          }).to.not['throw'](Error);
        });
        return context('loaded', function(){
          beforeEach(function(){
            return rulesLoader.loadRules(basicRulesFilePath, false);
          });
          specify('sets file path', function(){
            return expect(rulesLoader.filePath).to.equal(basicRulesFilePath);
          });
          specify('has loaded rules', function(){
            return expect(rulesLoader.loadedRules).to.not.be.empty;
          });
          specify('has loaded editor rules', function(){
            return expect(rulesLoader.loadedRules).to.eql({
              editor: {
                can: {
                  edit: 'book',
                  publish: 'paper'
                }
              }
            });
          });
          specify('has processed rules', function(){
            return expect(rulesLoader.processedRules).to.not.be.empty;
          });
          return specify('has processed rules editor - Function', function(){
            expect(rulesLoader.processedRules.editor[0]).to.be.a('function');
            return expect(rulesLoader.processedRules.editor[1]).to.be.a('function');
          });
        });
      });
    });
  });
}).call(this);
