// Generated by LiveScript 1.2.0
(function(){
  var requires, chai, expect, Permit, PermitRegistry, RuleRepo, PermitRulesLoader;
  requires = require('../../../requires');
  requires.test('test_setup');
  chai = require('chai');
  expect = chai.expect;
  Permit = requires.lib('permit');
  PermitRegistry = requires.permit('permit-registry');
  RuleRepo = requires.rule('rule_repo');
  PermitRulesLoader = requires.permit('permit_rules_loader');
  describe('Permit', function(){
    var rulesLoader, loadedRules, filePath, basicRulesFilePath, permits;
    permits = {};
    return describe('rules loader', function(){
      beforeEach(function(){
        rulesLoader = new PermitRulesLoader;
        return basicRulesFilePath = './test/rules/basic-rules.json';
      });
      afterEach(function(){
        return PermitRegistry.clearAll();
      });
      context('bad file path', function(){
        return specify('file load error', function(){
          return expect(function(){
            return rulesLoader.loadRules('rules.json', false);
          }).to['throw'](new Error);
        });
      });
      return context('good file path', function(){
        specify('loads rules', function(){
          return expect(function(){
            return rulesLoader.loadRules(basicRulesFilePath);
          }).to.not['throw'](Error);
        });
        return context('loaded', function(){
          beforeEach(function(){
            return rulesLoader.loadRules(basicRulesFilePath, false);
          });
          return specify('has loaded rules', function(){
            return expect(rulesLoader.loadedRules).to.not.be.empty;
          });
        });
      });
    });
  });
}).call(this);
