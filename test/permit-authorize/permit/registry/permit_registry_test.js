// Generated by LiveScript 1.2.0
(function(){
  var requires, RuleRepo, PermitRegistry, Permit, createPermit;
  requires = require('../../../../requires');
  requires.test('test_setup');
  RuleRepo = requires.rule('repo').RuleRepo;
  PermitRegistry = requires.permit('registry').PermitRegistry;
  Permit = requires.permit('permit');
  createPermit = requires.fac('create-permit');
  describe('PermitRegistry', function(){
    var permits, registry;
    permits = {};
    describe('create instance', function(){
      return specify('should not throw error', function(){
        return function(){
          return new PermitRegistry;
        }.should.not['throw'];
      });
    });
    registry = function(){
      return new PermitRegistry;
    };
    return context('an instance', function(){
      var reg;
      before(function(){
        return reg = registry();
      });
      describe('initial state', function(){
        describe('permits', function(){
          return specify('should be empty', function(){
            return reg.permits.should.eql({});
          });
        });
        return describe('permit-count', function(){
          return specify('should be 0', function(){
            return reg.permitCount().should.eql(0);
          });
        });
      });
      describe('create a permit', function(){
        before(function(){
          permits.guest = createPermit.guest();
          return reg = Permit.registry;
        });
        describe('permits', function(){
          return specify('should have guest permit', function(){
            return reg.permits['guest books'].should.eql(permits.guest);
          });
        });
        return describe('permit-count', function(){
          return specify('should be 1', function(){
            return reg.permitCount().should.eql(1);
          });
        });
      });
      return context('guest permit', function(){
        before(function(){
          reg = Permit.registry;
          reg.clean();
          return permits.guest = createPermit.guest();
        });
        return describe('clean-all', function(){
          return context('cleaned permits', function(){
            var counters, repos;
            counters = {};
            repos = {};
            before(function(){
              reg.clean();
              permits.guest = createPermit.guest();
              counters.old = reg.permitCount();
              permits.old = reg.permits;
              repos.old = permits.guest.ruleRepo;
              permits.guest.debugOn();
              return reg.clean();
            });
            specify('old repo is a RuleRepo', function(){
              return repos.old.constructor.should.eql(RuleRepo);
            });
            describe('permit-counter', function(){
              return specify('should not change', function(){
                return reg.permitCount().should.eql(counters.old);
              });
            });
            describe('permits', function(){
              return specify('should not change', function(){
                return reg.permits.should.eql(permits.old);
              });
            });
            return describe('repo', function(){
              return describe('should be cleaned', function(){
                var cleanedPermit;
                before(function(){
                  return cleanedPermit = reg.permits['guest books'];
                });
                specify('repo is same instance', function(){
                  return cleanedPermit.ruleRepo.should.eql(repos.old);
                });
                specify('repo can-rules are empty', function(){
                  return cleanedPermit.ruleRepo.canRules.should.eql({});
                });
                specify('repo cannot-rules are empty', function(){
                  return cleanedPermit.ruleRepo.cannotRules.should.eql({});
                });
                specify('can-rules are empty', function(){
                  return cleanedPermit.canRules().should.eql({});
                });
                return specify('cannot-rules are empty', function(){
                  return cleanedPermit.cannotRules().should.eql({});
                });
              });
            });
          });
        });
      });
    });
  });
}).call(this);
