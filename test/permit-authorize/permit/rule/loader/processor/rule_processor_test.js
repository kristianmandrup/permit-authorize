// Generated by LiveScript 1.2.0
(function(){
  var requires, expect, RuleProcessor, processor;
  requires = require('../../../../../../requires');
  requires.test('test_setup');
  expect = require('chai').expect;
  RuleProcessor = requires.permit('rule').loader.processor.RuleProcessor;
  processor = function(key, rule, debug){
    debug == null && (debug = true);
    return new RuleProcessor(key, rule, debug);
  };
  describe('ActRuleProcessor', function(){
    var pr, key, rule;
    before(function(){
      key = 'editor';
      return rule = {
        can: {
          read: 'Article'
        }
      };
    });
    return describe('create', function(){
      context('invalid', function(){
        return specify('throws', function(){
          return expect(function(){
            return processor(key, void 8);
          }).to['throw'];
        });
      });
      return context('valid', function(){
        before(function(){
          return pr = processor(key, rule);
        });
        specify('ok', function(){});
        specify('rules list set empty', function(){
          return pr.processedRules.should.eql({});
        });
        describe('process', function(){
          var res;
          before(function(){
            res = pr.process();
            return console.log('res', res);
          });
          return specify('yeah', function(){
            return res.should.eql({});
          });
        });
        describe('processed-rule', function(){});
        return describe('processed-act-rule', function(){});
      });
    });
  });
}).call(this);
