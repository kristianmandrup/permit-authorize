// Generated by LiveScript 1.2.0
(function(){
  var requires, Permit, PermitRegistry, Book, permitClazz, createPermit, createUser, AdminPermit, GuestPermit;
  requires = require('../../../requires');
  requires.test('test_setup');
  Permit = requires.lib('permit');
  PermitRegistry = requires.permit('permit-registry');
  Book = requires.fix('book');
  permitClazz = requires.fix('permit-class');
  createPermit = requires.fac('create-permit');
  createUser = requires.fac('create-user');
  AdminPermit = permitClazz.AdminPermit;
  GuestPermit = permitClazz.GuestPermit;
  describe('Permit', function(){
    var book, requests, permits, users;
    requests = {
      admin: {},
      kris: {}
    };
    permits = {};
    users = {};
    before(function(){
      book = new Book('a book');
      requests.admin.readBook = {
        user: {
          role: 'admin'
        },
        action: 'read',
        subject: book,
        ctx: {
          area: 'visitor'
        }
      };
      users.kris = createUser.kris();
      return requests.kris.readPaper = {
        user: users.kris,
        action: 'read',
        subject: 'paper',
        ctx: {
          area: 'visitor'
        }
      };
    });
    return describe('Rules application', function(){
      describe('static rules application', function(){
        before(function(){
          PermitRegistry.clearAll();
          return permits.guest = createPermit.guest();
        });
        after(function(){
          return PermitRegistry.clearAll();
        });
        return specify('registers a read-any rule (using default)', function(){
          return permits.guest.canRules()['read'].should.eql(['*']);
        });
      });
      describe('dynamic rules application - user rules', function(){
        before(function(){
          var ruleApplier;
          PermitRegistry.clearAll();
          permits.guest = createPermit.admin();
          ruleApplier = permits.guest.ruleApplier(requests.kris.readPaper);
          return ruleApplier.applyUserRules(users.kris);
        });
        after(function(){
          return PermitRegistry.clearAll();
        });
        return specify('registers a manage User rule', function(){
          return permits.guest.canRules()['manage'].should.include('User');
        });
      });
      describe('dynamic rules application - action rules', function(){
        before(function(){
          var ruleApplier;
          PermitRegistry.clearAll();
          permits.guest = createPermit.guest();
          ruleApplier = permits.guest.ruleApplier(requests.admin.readBook);
          return ruleApplier.applyActionRules('read');
        });
        after(function(){
          return PermitRegistry.clearAll();
        });
        return specify('registers a read Book rule', function(){
          return permits.guest.canRules()['read'].should.include('Book');
        });
      });
      describe('dynamic rules application - ctx rules', function(){
        before(function(){
          var ruleApplier;
          PermitRegistry.clearAll();
          permits.guest = createPermit.guest();
          ruleApplier = permits.guest.ruleApplier(requests.admin.readBook);
          return ruleApplier.applyContextRules({
            area: 'visitor'
          });
        });
        after(function(){
          return PermitRegistry.clearAll();
        });
        return specify('registers a publish Paper rule', function(){
          return permits.guest.canRules()['publish'].should.include('Paper');
        });
      });
      describe('dynamic rules application - subject rules - class', function(){
        before(function(){
          var ruleApplier;
          permits = {};
          PermitRegistry.clearAll();
          permits.admin = createPermit.admin();
          ruleApplier = permits.admin.ruleApplier(requests.kris.readPaper);
          return ruleApplier.applySubjectRules('Paper');
        });
        after(function(){
          return PermitRegistry.clearAll();
        });
        return specify('registers an approve Paper rule', function(){
          return permits.admin.canRules()['approve'].should.include('Paper');
        });
      });
      describe('dynamic rules application - subject rules - instance to class', function(){
        before(function(){
          var Paper, paper, ruleApplier;
          Paper = (function(){
            Paper.displayName = 'Paper';
            var prototype = Paper.prototype, constructor = Paper;
            function Paper(name){
              this.name = name;
            }
            return Paper;
          }());
          paper = new Paper({
            title: 'a paper'
          });
          permits = {};
          PermitRegistry.clearAll();
          permits.admin = createPermit.admin();
          ruleApplier = permits.admin.ruleApplier(requests.kris.readPaper);
          return ruleApplier.applySubjectRules(paper);
        });
        after(function(){
          return PermitRegistry.clearAll();
        });
        return specify('registers an approve Paper rule', function(){
          return permits.admin.canRules()['approve'].should.include('Paper');
        });
      });
      return describe('dynamic rules application', function(){
        before(function(){
          PermitRegistry.clearAll();
          permits.guest = createPermit.guest();
          return permits.guest.applyRules(requests.admin.readBook, 'force');
        });
        after(function(){
          return PermitRegistry.clearAll();
        });
        specify('registers a read-book rule', function(){
          return permits.guest.canRules()['read'].should.include('Book');
        });
        specify('does NOT register a write-book rule', function(){
          return function(){
            return permits.guest.canRules()['write'].should;
          }.should['throw'];
        });
        return context('dynamic rules applied twice', function(){
          before(function(){
            permits.guest = createPermit.guest();
            return permits.guest.applyRules(requests.admin.readBook);
          });
          return after(function(){
            PermitRegistry.clearAll();
            permits.guest.applyRules(requests.admin.readBook);
            permits.guest.applyRules(requests.admin.readBook);
            return specify('still registers only a SINGLE read-book rule', function(){
              return permits.guest.canRules()['read'].should.eql(['Book']);
            });
          });
        });
      });
    });
  });
}).call(this);
