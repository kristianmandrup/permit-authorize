// Generated by LiveScript 1.2.0
(function(){
  var requires, _, User, Book, RuleApplier, RuleRepo;
  requires = require('../../../requires');
  requires.test('test_setup');
  _ = require('prelude-ls');
  User = requires.fix('user');
  Book = requires.fix('book');
  RuleApplier = requires.rule('rule_applier');
  RuleRepo = requires.rule('rule_repo');
  describe('Rule Applier (RuleApplier)', function(){
    var book, debugRepo;
    debugRepo = function(txt, repo){
      console.log(txt, repo);
      console.log(repo.canRules);
      return console.log(repo.cannotRules);
    };
    before(function(){
      return book = new Book('Far and away');
    });
    return describe('apply-all', function(){
      var readAccessRequest, ruleRepo, ruleApplier, rules;
      before(function(){
        readAccessRequest = {
          action: 'read',
          subject: book
        };
        rules = {
          edit: function(){
            return this.ucan('edit', 'Book');
          },
          read: function(){
            return this.ucan('read', 'Project');
          },
          'default': function(){
            return this.ucannot('write', 'Book');
          }
        };
        ruleRepo = new RuleRepo('action repo').clear();
        ruleApplier = new RuleApplier(ruleRepo, rules, readAccessRequest);
        return ruleApplier.applyAllRules();
      });
      specify('adds all can rules', function(){
        return ruleRepo.canRules.should.be.eql({
          edit: ['Book'],
          read: ['Project']
        });
      });
      specify('adds all cannot rules', function(){
        return ruleRepo.cannotRules.should.be.eql({
          write: ['Book']
        });
      });
      return context('double execution', function(){
        var readAccessRequest, ruleRepo, ruleApplier, rules;
        before(function(){
          readAccessRequest = {
            action: 'read',
            subject: book
          };
          rules = {
            edit: function(){
              return this.ucan('edit', 'Book');
            },
            read: function(){
              return this.ucan('read', ['Project', 'project']);
            },
            'default': function(){
              this.ucannot('write', 'Book');
              return this.ucan('edit', 'book');
            }
          };
          ruleRepo = new RuleRepo('action repo').clear();
          ruleApplier = new RuleApplier(ruleRepo, rules, readAccessRequest);
          ruleApplier.applyAllRules();
          return ruleApplier.applyAllRules();
        });
        specify('adds all can rules - one time', function(){
          return ruleRepo.canRules.should.be.eql({
            edit: ['Book'],
            read: ['Project']
          });
        });
        return specify('adds all cannot rules - one time', function(){
          return ruleRepo.cannotRules.should.be.eql({
            write: ['Book']
          });
        });
      });
    });
  });
}).call(this);
