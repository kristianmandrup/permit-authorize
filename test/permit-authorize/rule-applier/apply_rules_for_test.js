// Generated by LiveScript 1.2.0
(function(){
  var requires, _, User, Book, RuleApplier, RuleRepo, rules;
  requires = require('../../../requires');
  requires.test('test_setup');
  _ = require('prelude-ls');
  User = requires.fix('user');
  Book = requires.fix('book');
  RuleApplier = requires.rule('rule_applier');
  RuleRepo = requires.rule('rule_repo');
  rules = require('./rules');
  describe('Rule Applier (RuleApplier)', function(){
    var book, debugRepo;
    debugRepo = function(txt, repo){
      console.log(txt, repo);
      console.log(repo.canRules);
      return console.log(repo.cannotRules);
    };
    before(function(){
      return book = new Book('Far and away');
    });
    describe('apply-rules-for', function(){
      var accessRequest, ruleRepo, ruleApplier, rules;
      before(function(){
        rules = setup.basicRules;
        accessRequest = {
          action: 'read',
          subject: book
        };
        ruleRepo = new RuleRepo;
        ruleApplier = new RuleApplier(ruleRepo, rules, accessRequest);
        return ruleApplier.applyRulesFor('edit');
      });
      specify('adds all can rules', function(){
        return ruleRepo.canRules.should.be.eql({
          edit: ['Book']
        });
      });
      return specify('adds all cannot rules', function(){
        return ruleRepo.cannotRules.should.be.eql({
          write: ['Book']
        });
      });
    });
    return describe('apply-action-rules-for :read', function(){
      var readAccessRequest, ruleRepo, ruleApplier, rules;
      before(function(){
        rules = {
          edit: function(){
            this.ucan('edit', 'Book');
            return this.ucannot('write', 'Book');
          },
          read: function(){
            this.ucan('read', 'Project');
            return this.ucannot('delete', 'Paper');
          }
        };
        readAccessRequest = {
          action: 'read',
          subject: book
        };
        ruleRepo = new RuleRepo('action repo').clear();
        ruleApplier = new RuleApplier(ruleRepo, rules, readAccessRequest);
        return ruleApplier.applyActionRules();
      });
      specify('adds all can rules', function(){
        return ruleRepo.canRules.should.be.eql({
          read: ['Project']
        });
      });
      return specify('adds all cannot rules', function(){
        return ruleRepo.cannotRules.should.be.eql({
          'delete': ['Paper']
        });
      });
    });
  });
}).call(this);
