// Generated by LiveScript 1.2.0
(function(){
  var requires, Book, AccessRequest, Fingerprints;
  requires = require('../../../../requires');
  requires.test('test_setup');
  Book = requires.fix('book');
  AccessRequest = requires.lib('access-request');
  Fingerprints = requires.accessRequest('fingerprints');
  console.log(Fingerprints);
  describe('Fingerprints', function(){
    return specify('has method access-hash', function(){
      return Fingerprints.accessHash.should.not.eql(void 8);
    });
  });
  describe('AccessRequest', function(){
    var book, accessRequest, requests;
    requests = {};
    before(function(){
      book = new Book('a book');
      requests.complex = {
        user: {
          role: 'admin'
        },
        action: ['read', 'write'],
        subject: book
      };
      return accessRequest = AccessRequest.from(requests.complex);
    });
    describe('user-hash', function(){
      return specify('is JSON stringify when no hash', function(){
        return accessRequest.userHash().should.eql("{\"role\":\"admin\"}");
      });
    });
    describe('action-hash', function(){
      return specify('is actions joined by . when Array', function(){
        return accessRequest.actionHash().should.eql("read.write");
      });
    });
    describe('subject-fingerprint', function(){
      return specify('is JSON stringify when no hash', function(){
        return accessRequest.subjectHash().should.eql("{\"obj\":\"a book\"}");
      });
    });
    describe('ctx-hash', function(){
      return specify('is void of undefined', function(){
        return accessRequest.ctxHash().should.eql('x');
      });
    });
    return describe('access-hash', function(){
      return specify('is combination of all fingerprints', function(){
        return accessRequest.accessHash().should.eql("read.write:{\"obj\":\"a book\"}:x");
      });
    });
  });
}).call(this);
