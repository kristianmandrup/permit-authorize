// Generated by LiveScript 1.2.0
(function(){
  var requires, Book, Matcher, matcher;
  requires = require('../../requires');
  requires.test('test_setup');
  Book = requires.fix('book');
  Matcher = requires.lib('access_request').matcher.AccessMatcher;
  matcher = function(req){
    return new Matcher(req);
  };
  describe('AccessMatcher', function(){
    var book, accessMatchers, requests;
    accessMatchers = {};
    requests = {};
    before(function(){
      book = new Book('a book');
      requests.complex = {
        user: {
          role: 'admin'
        },
        action: 'read',
        subject: book
      };
      requests.userless = {
        action: 'read',
        subject: book
      };
      accessMatchers.complex = matcher(requests.complex);
      return accessMatchers.userless = matcher(requests.userless);
    });
    describe('create', function(){
      return specify('must have complex access request', function(){
        return accessMatchers.complex.accessRequest.should.eql(requests.complex);
      });
    });
    describe('chaining', function(){
      beforeEach(function(){
        return accessMatchers.complex = matcher(requests.complex);
      });
      return specify('should match chaining: role(admin).action(read)', function(){
        return accessMatchers.complex.role('admin').action('read').result().should.be['true'];
      });
    });
    describe('match-on', function(){
      beforeEach(function(){
        return accessMatchers.complex = matcher(requests.complex);
      });
      specify('should match action: read', function(){
        return accessMatchers.complex.matchOn({
          action: 'read'
        }).should.be['true'];
      });
      specify('should match role: admin', function(){
        return accessMatchers.complex.matchOn({
          role: 'admin'
        }).should.be['true'];
      });
      specify('should match role: admin and action: read', function(){
        return accessMatchers.complex.matchOn({
          role: 'admin',
          action: 'read'
        }).should.be['true'];
      });
      return specify('should NOT match role: admin and action: write', function(){
        return accessMatchers.complex.matchOn({
          role: 'admin',
          action: 'write'
        }).should.be['false'];
      });
    });
    context('using roles:', function(){
      return describe('match', function(){
        beforeEach(function(){
          return accessMatchers.complex = matcher(requests.complex);
        });
        specify('should match admin role', function(){
          return accessMatchers.complex.role('admin').result().should.be['true'];
        });
        return specify('should match admin role', function(){
          return accessMatchers.complex.roles('admin', 'guest').result().should.be['true'];
        });
      });
    });
    return context('using actions:', function(){
      return describe('match', function(){
        beforeEach(function(){
          return accessMatchers.complex = matcher(requests.complex);
        });
        specify('should match admin role', function(){
          return accessMatchers.complex.action('read').result().should.be['true'];
        });
        return specify('should match admin role', function(){
          return accessMatchers.complex.actions('read', 'write').result().should.be['true'];
        });
      });
    });
  });
}).call(this);
