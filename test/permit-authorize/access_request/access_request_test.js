// Generated by LiveScript 1.2.0
(function(){
  var requires, Book, AccessRequest;
  requires = require('../../../requires');
  requires.test('test_setup');
  Book = requires.fix('book');
  AccessRequest = requires.lib('access-request');
  describe('AccessRequest', function(){
    var book, accessRequest, requests;
    requests = {};
    before(function(){
      book = new Book('a book');
      return requests.complex = {
        user: {
          role: 'admin'
        },
        action: 'read',
        subject: book
      };
    });
    describe('from', function(){
      return specify('creates access request from object', function(){
        return AccessRequest.from(requests.complex).constructor.should.equal(AccessRequest);
      });
    });
    describe('initialize', function(){
      return specify('valid args creates it', function(){
        return new AccessRequest({
          name: 'kris'
        }, 'read', 'Book').constructor.should.equal(AccessRequest);
      });
    });
    return context('instance', function(){
      beforeEach(function(){
        return accessRequest = new AccessRequest({
          name: 'kris'
        }, 'read', 'Book');
      });
      describe('normalize', function(){
        specify('normalizes action', function(){
          accessRequest.action = 'read';
          return accessRequest.normalize().action.should.eql(['read']);
        });
        return specify('and subject', function(){
          accessRequest.subject = 'book';
          return accessRequest.normalize().subject.should.eql(['book']);
        });
      });
      return describe('validate', function(){
        specify('invalid subject throws', function(){});
        return specify('valid args does not throw', function(){});
      });
    });
  });
}).call(this);
