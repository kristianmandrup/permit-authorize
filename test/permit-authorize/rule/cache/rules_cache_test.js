// Generated by LiveScript 1.2.0
(function(){
  var requires, Cache, expect, User, currentUser, createCache;
  requires = require('../../../../requires');
  requires.test('test_setup');
  Cache = requires.rule('cache').RulesCache;
  expect = require('chai').expect;
  User = requires.fix('user');
  currentUser = new User({
    name: 'kris'
  });
  createCache = function(obj){
    return new Cache(obj);
  };
  describe('RulesCache', function(){
    var cache;
    describe('create(@object, @fp-class = FingerPrinter)', function(){
      context('invalid', function(){
        return specify('throws', function(){});
      });
      return context('valid', function(){
        return specify('ok', function(){});
      });
    });
    context('valid cache without object', function(){
      beforeEach(function(){
        return cache = createCache();
      });
      specify('has object', function(){
        return expect(cache.object).to.eql({});
      });
      specify('no-print is x', function(){
        return cache.noPrint().should.eql('x');
      });
      describe('get', function(){
        return specify('no x cached', function(){
          return expect(cache.get('x')).to.eql(void 8);
        });
      });
      describe('set', function(){
        var res;
        beforeEach(function(){
          return res = cache.set('x', 'Y');
        });
        specify('returns cache', function(){
          return expect(res).to.equal(cache);
        });
        return specify('has x to Y', function(){
          return expect(res.get('x')).to.eql('Y');
        });
      });
      return describe('init', function(){
        beforeEach(function(){
          return cache.init();
        });
        return specify('fingerprint is set to x', function(){
          return cache.fingerprint.should.eql('x');
        });
      });
    });
    return context('valid cache with current-user', function(){
      beforeEach(function(){
        return cache = createCache(currentUser);
      });
      specify('has object', function(){
        return expect(cache.object).to.equal(currentUser);
      });
      describe('init', function(){});
      describe('no-print', function(){
        return specify('is void', function(){
          return expect(cache.noPrint()).to.eql(void 8);
        });
      });
      describe('fingerprint', function(){
        return specify('is not void', function(){
          return expect(cache.fingerprint()).to.not.eql(void 8);
        });
      });
      describe('fingerprinter', function(){
        return specify('is a FingerPrinter', function(){
          return expect(cache.fingerprinter().constructor.displayName).to.eql('FingerPrinter');
        });
      });
      return describe('observe(...targets)', function(){
        context('invalid target', function(){
          return specify('doesnt throw when ', function(){
            return expect(cache.observe({})).to.not['throw'];
          });
        });
        return context('valid target', function(){
          var target;
          beforeEach(function(){
            target = {
              addObserver: function(observer){
                this.observer = observer;
              }
            };
            return cache.observe(target);
          });
          return specify('observes when valid target', function(){
            return expect(target.observer).to.equal(cache);
          });
        });
      });
    });
  });
}).call(this);
