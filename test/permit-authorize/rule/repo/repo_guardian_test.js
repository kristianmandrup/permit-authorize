// Generated by LiveScript 1.2.0
(function(){
  var expect, lib, PermitAllower, RepoGuardian, RuleRepo, ruleRepo;
  expect = require('chai').expect;
  lib = '../../../../lib/';
  PermitAllower = require(lib + 'allower').PermitAllower;
  RepoGuardian = require(lib + 'rule/repo/').RepoGuardian;
  RuleRepo = require(lib + 'rule/repo/').RuleRepo;
  ruleRepo = function(name){
    return new RuleRepo(name);
  };
  describe('RepoGuardian', function(){
    describe('create with null', function(){
      return specify('should throw', function(){
        return expect(function(){
          return new RepoGuardian;
        }).to['throw'];
      });
    });
    describe('create with repo', function(){
      return specify('should not throw', function(){
        return expect(function(){
          return new RepoGuardian({});
        }).to.not['throw'];
      });
    });
    return context('created with repo', function(){
      var guardian, ar, repos;
      repos = {
        access: ruleRepo('access'),
        noAccess: ruleRepo('no-access')
      };
      describe('permit-allower', function(){
        before(function(){
          var guardian;
          return guardian = new RepoGuardian(repo);
        });
        return specify('should create and return', function(){
          return guardian.permitAllower().should.be.instanceOf(PermitAllower);
        });
      });
      context('repo does not allow access', function(){
        before(function(){
          var guardian;
          return guardian = new RepoGuardian(repos.noAccess);
        });
        describe('allows', function(){
          return specify('should not allow', function(){
            return guardian.allows(ar).should.be['false'];
          });
        });
        return describe('disallows', function(){
          return specify('should disallow', function(){
            return guardian.disallows(ar).should.be['true'];
          });
        });
      });
      return context('repo does allow access', function(){
        before(function(){
          var guardian;
          return guardian = new RepoGuardian(repos.access);
        });
        describe('allows', function(){
          return specify('should allow', function(){
            return guardian.allows(ar).should.be['true'];
          });
        });
        return describe('disallows', function(){
          return specify('should not disallow', function(){
            return guardian.disallows(ar).should.be['false'];
          });
        });
      });
    });
  });
}).call(this);
