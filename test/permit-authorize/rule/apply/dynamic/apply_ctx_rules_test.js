// Generated by LiveScript 1.2.0
(function(){
  var requires, User, Book, RulesApplier, RuleRepo, ExecutionContext, rules;
  requires = require('../../../../../requires');
  requires.test('test_setup');
  User = requires.fix('user');
  Book = requires.fix('book');
  RulesApplier = requires.rule('apply').DynamicApplier;
  RuleRepo = requires.rule('repo').RuleRepo;
  ExecutionContext = requires.rule('apply').ExecutionContext;
  rules = requires.fixRules('rules');
  describe('Rule Applier (RuleApplier)', function(){
    var book, debugRepo, createRepo, createExecCtx, createRulesApplier, execRuleApplier;
    debugRepo = function(txt, repo){
      console.log(txt, repo);
      console.log(repo.canRules);
      return console.log(repo.cannotRules);
    };
    createRepo = function(name, debug){
      name == null && (name = 'dynamic repo');
      debug == null && (debug = false);
      return new RuleRepo(name, debug).clean();
    };
    createExecCtx = function(debug){
      debug == null && (debug = true);
      return new ExecutionContext(createRepo(), debug);
    };
    createRulesApplier = function(rules, accessRequest, debug){
      debug == null && (debug = true);
      return new RulesApplier(createExecCtx(), rules, accessRequest, debug);
    };
    execRuleApplier = function(rules, actionRequest){
      return createRulesApplier(rules, actionRequest).applyRules();
    };
    before(function(){
      return book = new Book('Far and away');
    });
    return describe('apply-action-rules-for :read', function(){
      var readAccessRequest, ruleRepo, ruleApplier, rules;
      before(function(){
        rules = {
          ctx: {
            guestArea: function(){
              this.ucan('edit', 'Book');
              this.ucan('read', 'Book');
              return this.ucannot('write', 'Book');
            },
            adminArea: function(){
              this.ucan('read', 'Project');
              return this.ucannot('delete', 'Paper');
            }
          }
        };
        readAccessRequest = {
          action: 'read',
          subject: book,
          ctx: {
            guestArea: true
          }
        };
        ruleApplier = createRulesApplier(rules, readAccessRequest);
        ruleRepo = ruleApplier.repo();
        ruleApplier.applyCtxRules();
        return console.log('REPO', ruleRepo.container());
      });
      specify('adds all dynamic can rules (only read)', function(){
        return ruleRepo.canRules().should.be.eql({
          read: ['Book']
        });
      });
      return specify('adds all dynamic cannot rules (only read)', function(){
        return ruleRepo.cannotRules().should.be.eql({
          write: ['Book']
        });
      });
    });
  });
}).call(this);
