// Generated by LiveScript 1.2.0
(function(){
  var requires, User, Book, RulesApplier, ExecutionContext, RuleRepo, fixRules, createRepo, createExecCtx, createRulesApplier, execRuleApplier;
  requires = require('../../../../../requires');
  requires.test('test_setup');
  User = requires.fix('user');
  Book = requires.fix('book');
  RulesApplier = requires.rule('apply').DynamicApplier;
  ExecutionContext = requires.rule('apply').ExecutionContext;
  RuleRepo = requires.rule('repo').RuleRepo;
  fixRules = requires.fixRules('rules');
  createRepo = function(name, debug){
    name == null && (name = 'dynamic repo');
    debug == null && (debug = false);
    return new RuleRepo(name, debug).clean();
  };
  createExecCtx = function(debug){
    debug == null && (debug = true);
    return new ExecutionContext(createRepo(), debug);
  };
  createRulesApplier = function(rules, accessRequest, debug){
    debug == null && (debug = true);
    return new RulesApplier(createExecCtx(), rules, accessRequest, debug);
  };
  execRuleApplier = function(rules, actionRequest){
    return createRulesApplier(rules, actionRequest).applyRules();
  };
  describe('Rule Applier (RuleApplier)', function(){
    var book, debugRepo;
    debugRepo = function(txt, repo){
      console.log(txt, repo);
      console.log(repo.canRules);
      return console.log(repo.cannotRules);
    };
    before(function(){
      return book = new Book('Far and away');
    });
    return describe('dynamic', function(){
      var readAccessRequest, ruleRepo, ruleApplier, rules;
      before(function(){
        rules = {
          edit: function(){
            this.ucan('edit', 'Book');
            return this.ucannot('write', 'Book');
          },
          read: function(){
            this.ucan('read', 'Project');
            return this.ucannot('delete', 'Paper');
          }
        };
        readAccessRequest = {
          action: 'read',
          subject: book
        };
        ruleApplier = execRuleApplier(rules, readAccessRequest);
        ruleRepo = ruleApplier.repo();
        return ruleApplier.applyRules();
      });
      specify('adds all dynamic can rules (only read)', function(){
        return ruleRepo.canRules().should.be.eql({
          read: ['Project']
        });
      });
      return specify('adds all dynamic cannot rules (only read)', function(){
        return ruleRepo.cannotRules().should.be.eql({
          'delete': ['Paper']
        });
      });
    });
  });
}).call(this);
