// Generated by LiveScript 1.2.0
(function(){
  var requires, User, Book, RulesApplier, RuleRepo, fixRules;
  requires = require('../../../../../requires');
  requires.test('test_setup');
  User = requires.fix('user');
  Book = requires.fix('book');
  RulesApplier = requires.rule('apply').DynamicApplier;
  RuleRepo = requires.rule('repo').RuleRepo;
  fixRules = requires.fixRules('rules');
  console.log('RulesApplier', RulesApplier);
  describe('Rule Applier (RuleApplier)', function(){
    var book, debugRepo, createRulesApplier, createRepo;
    debugRepo = function(txt, repo){
      console.log(txt, repo);
      console.log(repo.canRules);
      return console.log(repo.cannotRules);
    };
    createRulesApplier = function(ruleRepo, rules, readAccessRequest){
      return new RulesApplier(ruleRepo, rules, readAccessRequest);
    };
    createRepo = function(name, debug){
      name == null && (name = 'repo');
      debug == null && (debug = true);
      return new RuleRepo(name, debug).clear();
    };
    before(function(){
      return book = new Book('Far and away');
    });
    return describe('apply-rules-for', function(){
      var accessRequest, ruleRepo, ruleApplier, rules;
      before(function(){
        rules = fixRules.basic;
        accessRequest = {
          action: 'read',
          subject: book
        };
        ruleRepo = createRepo();
        ruleApplier = createRulesApplier(ruleRepo, rules, accessRequest);
        return ruleApplier.applyRulesFor('edit');
      });
      specify('adds all can rules', function(){
        return ruleRepo.canRules.should.be.eql({
          edit: ['Book']
        });
      });
      return specify('adds all cannot rules', function(){
        return ruleRepo.cannotRules.should.be.eql({
          write: ['Book']
        });
      });
    });
  });
}).call(this);
