// Generated by LiveScript 1.2.0
(function(){
  var requires, expect, ApplyMixin, Invalid, Rules;
  requires = require('../../../../../requires');
  requires.test('test_setup');
  expect = require('chai').expect;
  ApplyMixin = requires.rule('apply').single.ApplyMixin;
  Invalid = (function(){
    Invalid.displayName = 'Invalid';
    var prototype = Invalid.prototype, constructor = Invalid;
    importAll$(prototype, arguments[0]);
    function Invalid(){}
    return Invalid;
  }(ApplyMixin));
  Rules = (function(){
    Rules.displayName = 'Rules';
    var prototype = Rules.prototype, constructor = Rules;
    importAll$(prototype, arguments[0]);
    function Rules(rules){
      this.rules = rules != null
        ? rules
        : {};
    }
    return Rules;
  }(ApplyMixin));
  describe('ApplyMixin', function(){
    var mixer;
    context('no @rules', function(){
      before(function(){
        return mixer = new Invalid;
      });
      return specify('throws', function(){
        return expect(mixer.contextRules('user')).to['throw'];
      });
    });
    return context('has @rules', function(){
      before(function(){
        return mixer = new Rules;
      });
      specify('ok', function(){
        return expect(mixer.contextRules('user')).to.not['throw'];
      });
      return describe('context-rules', function(){});
    });
  });
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
