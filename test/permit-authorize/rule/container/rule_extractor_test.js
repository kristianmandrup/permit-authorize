// Generated by LiveScript 1.2.0
(function(){
  var requires, User, Book, Extractor, expect;
  requires = require('../../../../requires');
  requires.test('test_setup');
  User = requires.fix('user');
  Book = requires.fix('book');
  Extractor = requires.rule('container').RuleExtractor;
  expect = require('chai').expect;
  describe('RuleExtractor', function(){
    var extractor, actions, subjects, createExtr;
    createExtr = function(container, action, subjects, debug){
      debug == null && (debug = false);
      return new Extractor(container, action, subjects, debug);
    };
    actions = ['user', 'book'];
    subjects = ['user', 'article'];
    describe('create', function(){
      describe('invalid', function(){
        return specify('throws', function(){
          return expect(function(){
            return createExtr({}, 'ax');
          }).to['throw'];
        });
      });
      return describe('valid', function(){});
    });
    return context('valid extractor', function(){
      beforeEach(function(){
        return extractor = createExtr({}, 'edit', ['Article', 'book']);
      });
      describe('extract', function(){
        return specify('extracts rule?', function(){
          return expect(extractor.extract()).to.eql(['Article', 'Book']);
        });
      });
      describe.only('unique-subjects', function(){
        beforeEach(function(){
          var duplicates;
          duplicates = subjects.concat(['user']);
          return extractor = createExtr({}, 'edit', duplicates);
        });
        return specify('returns unique normalized subjects', function(){
          return expect(extractor.uniqueSubjects()).to.eql(['Article', 'User']);
        });
      });
      return describe('action-subjects', function(){
        context('no rules for action', function(){
          beforeEach(function(){
            return extractor = createExtr({}, 'edit', 'Article');
          });
          return specify('finds no subjects for action', function(){
            return expect(extractor.actionSubjects()).to.eql([]);
          });
        });
        return context('has subjects for action', function(){
          var ext;
          beforeEach(function(){
            return ext = createExtr({
              edit: ['Book']
            }, 'edit', 'Article');
          });
          return specify('gets subjects for action', function(){
            return expect(ext.actionSubjects()).to.eql(['Book']);
          });
        });
      });
    });
  });
}).call(this);
