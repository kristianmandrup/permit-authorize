// Generated by LiveScript 1.2.0
(function(){
  var requires, User, Book, Matcher, createMatcher, expect;
  requires = require('../../../../../requires');
  requires.test('test_setup');
  User = requires.fix('user');
  Book = requires.fix('book');
  Matcher = requires.rule('container').matcher.RuleMatcher;
  createMatcher = function(container, act, ar){
    return new Matcher(container, act, ar);
  };
  expect = require('chai').expect;
  describe('RuleMatcher', function(){
    var subjects, ar, containers, matcher;
    subjects = {};
    ar = {};
    containers = {};
    subjects.book = {
      name: 'a nice journey',
      _class: 'Book'
    };
    subjects.movie = {
      name: 'The Apollo moonlanding scam!',
      _class: 'Movie',
      type: 'documentary'
    };
    ar.book = {
      user: 'kris',
      action: 'edit',
      subject: subjects.book
    };
    containers.managedBook = {
      can: {
        manage: ['book', 'blog'],
        write: ['journal', 'article'],
        edit: ['movie']
      }
    };
    containers.noneManaged = {
      can: {
        edit: ['book'],
        create: ['article']
      }
    };
    describe('create', function(){
      context('invalid', function(){
        return specify('throws', function(){
          return expect(function(){
            return createMatcher({}, 'can', void 8);
          }).to['throw'];
        });
      });
      return context('valid', function(){
        specify('ok', function(){
          return expect(function(){
            return createMatcher(containers.managedBook, 'can', {});
          }).to.not['throw'];
        });
        return specify('act is set', function(){
          return createMatcher(containers.managedBook, 'can', {}).act.should.eql('can');
        });
      });
    });
    context('valid matcher', function(){
      beforeEach(function(){
        return matcher = createMatcher(containers.managedBook, 'can', ar.book);
      });
      describe('manage-actions', function(){
        return specify('has CED actions', function(){
          return matcher.manageActions.should.eql(['create', 'edit', 'delete']);
        });
      });
      describe('match-subject', function(){
        return specify('matches', function(){
          return matcher.matchSubject().should.eql(true);
        });
      });
      describe('subject-matcher', function(){
        return specify('has subjects', function(){
          return matcher.subjectMatcher().subject.should.eql(['book']);
        });
      });
      describe('action-subjects', function(){
        return specify('has subjects', function(){
          return matcher.actionSubjects().should.eql(['book']);
        });
      });
      return describe('act-container', function(){
        return specify('has subjects', function(){
          return matcher.actContainer().should.eql({
            manage: ['book', 'blog'],
            write: ['journal', 'article'],
            edit: ['movie']
          });
        });
      });
    });
    context('unmanaged book', function(){
      beforeEach(function(){
        return matcher = createMatcher(containers.unmanagedBook, 'can', ar.book);
      });
      describe('managed-subject-matcher', function(){
        return specify('matches', function(){
          return matcher.managedSubjectMatcher().subject.should.eql('book');
        });
      });
      return describe('managed-subject-match', function(){
        return specify('matches', function(){
          return matcher.managedSubjectMatch().should.eql(false);
        });
      });
    });
    return context('managed book', function(){
      beforeEach(function(){
        return matcher = createMatcher(containers.managedBook, 'can', ar.book);
      });
      return describe('managed-subject-match', function(){
        return specify('matches', function(){
          return matcher.managedSubjectMatch().should.eql(true);
        });
      });
    });
  });
}).call(this);
