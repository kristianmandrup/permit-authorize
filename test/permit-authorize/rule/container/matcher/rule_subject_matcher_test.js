// Generated by LiveScript 1.2.0
(function(){
  var requires, Matcher, expect, subjects;
  requires = require('../../../../../requires');
  requires.test('test_setup');
  Matcher = requires.rule('container').matcher.RuleSubjectMatcher;
  expect = require('chai').expect;
  subjects = {};
  describe('RuleSubjectMatcher', function(){
    var matcher, createMatcher;
    createMatcher = function(subjects, debug){
      debug == null && (debug = false);
      return new Matcher(subjects, debug);
    };
    describe('create', function(){
      describe('invalid', function(){
        return specify('throws', function(){
          return expect(function(){
            return createMatcher(void 8).to['throw'];
          });
        });
      });
      return describe('valid', function(){
        return specify('ok', function(){
          return expect(function(){
            return createMatcher([]).to.not['throw'];
          });
        });
      });
    });
    return context('created', function(){
      beforeEach(function(){
        return matcher = createMatcher('book');
      });
      describe('intersect-match', function(){
        beforeEach(function(){
          return matcher = createMatcher('blip');
        });
        return specify('should not match', function(){
          return expect(matcher.intersects('blap')).to.eql(false);
        });
      });
      return describe('match (subject)', function(){
        context('bad subject', function(){
          beforeEach(function(){
            return subjects.bad = 'bad book';
          });
          return specify('should not match', function(){
            return expect(matcher.match(subjects.bad)).to.eql(false);
          });
        });
        context('good subject', function(){
          beforeEach(function(){
            return subjects.good = 'book';
          });
          return specify('should match', function(){
            return expect(matcher.match(subjects.good)).to.eql(true);
          });
        });
        return context('wildcard match', function(){
          beforeEach(function(){
            matcher = createMatcher(['any']);
            return subjects.good = 'book';
          });
          return specify('should match', function(){
            return expect(matcher.match(subjects.good)).to.eql(true);
          });
        });
      });
    });
  });
}).call(this);
