// Generated by LiveScript 1.2.0
(function(){
  var requires, Matcher, expect, containers, log;
  requires = require('../../../../../requires');
  requires.test('test_setup');
  Matcher = requires.rule('container').matcher.ManagedSubjectMatcher;
  expect = require('chai').expect;
  containers = {};
  log = console.log;
  describe('ManagedSubjectMatcher', function(){
    var matcher, createMatcher;
    createMatcher = function(container, debug){
      debug == null && (debug = false);
      return new Matcher(container, debug);
    };
    containers.managedBook = {
      manage: ['book']
    };
    containers.noneManaged = {
      edit: ['book'],
      create: ['article']
    };
    describe('create', function(){
      describe('invalid', function(){
        return specify('throws', function(){
          return expect(function(){
            return createMatcher(void 8).to['throw'];
          });
        });
      });
      return describe('valid', function(){
        return specify('ok', function(){
          return expect(function(){
            return createMatcher([]).to.not['throw'];
          });
        });
      });
    });
    return context('created', function(){
      beforeEach(function(){
        return matcher = createMatcher('book');
      });
      describe('match(subject)', function(){
        return specify('calling with void does not match', function(){
          return expect(matcher.match()).to.eql(false);
        });
      });
      context('book is managed', function(){
        beforeEach(function(){
          return matcher = createMatcher(containers.managedBook);
        });
        describe('is-managed (subject)', function(){
          return specify('no match', function(){
            return expect(matcher.match('book')).to.eql(false);
          });
        });
        describe('managed-subjects', function(){
          return specify('returns list', function(){
            return expect(matcher.managedSubjects()).to.eql(['book']);
          });
        });
        describe('match-subject (subject)', function(){
          return specify('matches', function(){
            return expect(matcher.matchSubject('book').to.eql(true));
          });
        });
        describe('subject-matcher', function(){
          return specify('returns matcher', function(){
            return expect(matcher.subjectMatcher().subjects).to.eql(['book']);
          });
        });
        return describe('manage-action-subjects', function(){});
      });
      return context('book is not managed', function(){
        beforeEach(function(){
          return matcher = createMatcher(containers.noneManaged);
        });
        describe('is-managed (subject)', function(){
          return specify('matches', function(){
            return expect(matcher.match('book')).to.eql(false);
          });
        });
        describe('managed-subjects', function(){
          return specify('returns empty', function(){
            return expect(matcher.managedSubjects()).to.eql([]);
          });
        });
        describe('match-subject (subject, subjects)', function(){
          return specify('returns empty', function(){
            return expect(matcher.matchSubject('book')).to.eql(false);
          });
        });
        describe.only('subject-matcher (subjects)', function(){
          return specify('returns empty', function(){
            return expect(matcher.subjectMatcher().subjects).to.eql([]);
          });
        });
        return describe('manage-action-subjects', function(){
          return specify('returns list for edit', function(){
            return expect(matcher.manageActionSubjects()[0]).to.eql(['article']);
          });
        });
      });
    });
  });
}).call(this);
