(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  module.exports = {
    Authorizer: require('./lib/authorizer'),
    Ability: require('./lib/ability'),
    Allower: require('./lib/allower'),
    CachedAbility: require('./lib/ability/cached_ability'),
    Permit: require('./lib/permit'),
    RulesLoader: require('./lib/permit/permit_rules_loader'),
    DbRulesLoader: require('./lib/permit/permit_rules_db_loader'),
    permitFor: require('./lib/permit/permit_for')
  };
}).call(this);

},{"./lib/ability":3,"./lib/ability/cached_ability":5,"./lib/allower":8,"./lib/authorizer":9,"./lib/permit":18,"./lib/permit/permit_for":21,"./lib/permit/permit_rules_db_loader":24,"./lib/permit/permit_rules_loader":25}],3:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, permitFilter, Allower, AccessRequest, Debugger, ArgNormalizer, Ability, toString$ = {}.toString, slice$ = [].slice;
  lo = require('./util/lodash_lite');
  permitFilter = require('./permit/permit_filter');
  Allower = require('./allower');
  AccessRequest = require('./access_request');
  Debugger = require('./debugger');
  ArgNormalizer = require('./ability/arg_normalizer');
  module.exports = Ability = (function(){
    Ability.displayName = 'Ability';
    var prototype = Ability.prototype, constructor = Ability;
    importAll$(prototype, arguments[0]);
    function Ability(user){
      this.user = user;
      this.validateUser();
    }
    prototype.validateUser = function(){
      if (this.user === void 8) {
        throw new Error("Ability must be for a User, was void");
      }
      if (toString$.call(this.user).slice(8, -1) !== 'Object') {
        throw new Error("User must be an Object, was " + this.user);
      }
    };
    prototype.permits = function(){
      return permitFilter.filter(this.accessRequest());
    };
    prototype.allower = function(){
      return new Allower(this.accessRequest());
    };
    prototype.allowed = function(){
      return this.allower().allows();
    };
    prototype.notAllowed = function(){
      return this.allower().disallows();
    };
    prototype.can = function(){
      this.args = slice$.call(arguments);
      return this.authorize('can');
    };
    prototype.cannot = function(){
      this.args = slice$.call(arguments);
      return this.authorize('cannot');
    };
    prototype.authResult = function(){
      return this._result || (this._result = this.act === 'can'
        ? this.allowed()
        : this.notAllowed());
    };
    prototype.authorize = function(act){
      this.act = act;
      this.clear();
      this.debug('can result:', this.authResult());
      return this.authResult();
    };
    prototype.clear = function(){
      this._result = void 8;
      return this._accessRequest = void 8;
    };
    prototype.accessRequest = function(){
      return this._accessRequest || (this._accessRequest = AccessRequest.from(this.normalizedArgs(), this.debugging));
    };
    prototype.normalizedArgs = function(){
      this.args = lo.flatten(this.args);
      this.debug('normalize args', this.args);
      return new ArgNormalizer(this.args).setUser(this.user).normalized();
    };
    return Ability;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./ability/arg_normalizer":4,"./access_request":6,"./allower":8,"./debugger":10,"./permit/permit_filter":20,"./util/lodash_lite":29}],4:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, ArgNormalizer, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  module.exports = ArgNormalizer = (function(){
    ArgNormalizer.displayName = 'ArgNormalizer';
    var prototype = ArgNormalizer.prototype, constructor = ArgNormalizer;
    function ArgNormalizer(args){
      this.args = args;
      if (toString$.call(this.args).slice(8, -1) === 'Object') {
        this.args = [this.args];
      }
    }
    prototype.setUser = function(user){
      this.user = user;
      return this;
    };
    prototype.userObj = function(){
      if (this.user != null) {
        return {
          user: this.user
        };
      } else {
        return {};
      }
    };
    prototype.normalized = function(){
      return lo.extend(this.userObj(), this.normalizedObj());
    };
    prototype.normalizedObj = function(){
      return this.object() || this.createObject();
    };
    prototype.createObject = function(){
      return this.ctxObj() || this.baseObj();
    };
    prototype.ctxObj = function(){
      if (this.args[2]) {
        return lo.extend(this.baseObj(), {
          ctx: this.args[2]
        });
      }
    };
    prototype.baseObj = function(){
      return {
        action: this.args[0],
        subject: this.args[1]
      };
    };
    prototype.object = function(){
      if (toString$.call(this.args[0]).slice(8, -1) === 'Object') {
        return this.args[0];
      }
    };
    return ArgNormalizer;
  }());
}).call(this);

},{"../util/lodash_lite":29}],5:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var Ability, fingerprints, CachedAbility, slice$ = [].slice;
  Ability = require('../ability');
  fingerprints = require('../access_request/fingerprints');
  module.exports = CachedAbility = (function(superclass){
    var prototype = extend$((import$(CachedAbility, superclass).displayName = 'CachedAbility', CachedAbility), superclass).prototype, constructor = CachedAbility;
    function CachedAbility(user){
      this.user = user;
      CachedAbility.superclass.apply(this, arguments);
      this.userKey();
    }
    CachedAbility.clearCache = function(){
      constructor.canCache = {};
      return constructor.cannotCache = {};
    };
    CachedAbility.canCache = function(){
      return this._canCache || (this._canCache = {});
    };
    CachedAbility.cannotCache = function(){
      return this._cannotCache || (this._cannotCache = {});
    };
    prototype.userHash = fingerprints.userHash;
    prototype.userKey = function(){
      return this.userKey = this.userHash();
    };
    prototype.authorize = function(act){
      var args;
      this.act = act;
      args = slice$.call(arguments, 1);
      this.clear();
      if (this.hasCachedResult()) {
        return this.cachedResult();
      } else {
        this.cacheResult();
      }
      this.debug('cannot-res', this.authResult());
      return this.authResult();
    };
    prototype.accReqKey = function(){
      return this.accessRequest().accessHash();
    };
    prototype.hasCachedResult = function(){
      return this.cachedResult() !== void 8;
    };
    prototype.clear = function(){
      superclass.prototype.clear.call(this);
      return this._lastResult = void 8;
    };
    prototype.cachedResult = function(){
      return this._lastResult || (this._lastResult = this.cache()[this.accReqKey()]);
    };
    prototype.cacheResult = function(){
      return this.cache()[this.accReqKey()] = this.authResult();
    };
    prototype.cache = function(){
      return this[this.act + "Cache"]();
    };
    prototype.canCache = function(){
      return constructor.canCache()[this.userKey] || {};
    };
    prototype.cannotCache = function(){
      return constructor.cannotCache()[this.userKey] || {};
    };
    return CachedAbility;
  }(Ability));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../ability":3,"../access_request/fingerprints":7}],6:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var normalize, Debugger, Fingerprints, AccessRequest, toString$ = {}.toString;
  normalize = require('./util/normalize');
  Debugger = require('./debugger');
  Fingerprints = require('./access_request/fingerprints');
  module.exports = AccessRequest = (function(){
    AccessRequest.displayName = 'AccessRequest';
    var prototype = AccessRequest.prototype, constructor = AccessRequest;
    importAll$(prototype, arguments[0]);
    importAll$(prototype, arguments[1]);
    AccessRequest.from = function(obj, debugging){
      if (toString$.call(obj).slice(8, -1) !== 'Object') {
        throw new Error("Must be an Object, was: " + obj);
      }
      return new AccessRequest(obj.user, obj.action, obj.subject, obj.ctx, debugging);
    };
    function AccessRequest(user, action, subject, ctx, debugging){
      this.user = user;
      this.action = action;
      this.subject = subject;
      this.ctx = ctx;
      this.debugging = debugging;
      this.debug('create AccessRequest user:', this.user, 'action:', this.action, 'subject:', this.subject, 'ctx:', this.ctx);
      this.validate();
      this.normalize();
      this;
    }
    prototype.normalize = function(){
      this.debug('normalize action', this.action);
      this.action = normalize(this.action);
      if (toString$.call(this.subject).slice(8, -1) !== 'Object') {
        this.debug('normalize subject', this.subject);
        this.subject = normalize(this.subject);
      }
      return this;
    };
    prototype.validate = function(){
      if (!this.validAction()) {
        throw new Error("Missing action name. Must authorize an action to be performed on a subject, was: " + this.action + ", " + toString$.call(this.action).slice(8, -1));
      }
      if (!this.validSubject()) {
        throw new Error("Missing subject. Must authorize a subject to perform an action: " + this.action);
      }
      if (!this.validUser()) {
        throw new Error("Missing or invalid user. Must authorize a user to perform an action: " + this.action + " on the subject, was: " + this.user + " of type: " + toString$.call(this.user).slice(8, -1));
      }
    };
    prototype.validSubject = function(){
      return this.subject != null;
    };
    prototype.validUser = function(){
      return toString$.call(this.user).slice(8, -1) === 'Object';
    };
    prototype.validAction = function(){
      return toString$.call(this.action).slice(8, -1) === 'String' || toString$.call(this.action).slice(8, -1) === 'Array';
    };
    return AccessRequest;
  }(Debugger, Fingerprints));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./access_request/fingerprints":7,"./debugger":10,"./util/normalize":30}],7:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var Fingerprint, ObjectFingerprint, ArrayFingerprint, toString$ = {}.toString;
  Fingerprint = (function(){
    Fingerprint.displayName = 'Fingerprint';
    var prototype = Fingerprint.prototype, constructor = Fingerprint;
    function Fingerprint(value){
      this;
      this.value = value;
    }
    prototype.fingerprint = function(){
      return this.none() || this.string();
    };
    prototype.string = function(){
      if (toString$.call(this.value).slice(8, -1) === 'String') {
        return this.value;
      }
    };
    prototype.none = function(){
      if (this.value === void 8) {
        return 'x';
      }
    };
    return Fingerprint;
  }());
  ObjectFingerprint = (function(superclass){
    var prototype = extend$((import$(ObjectFingerprint, superclass).displayName = 'ObjectFingerprint', ObjectFingerprint), superclass).prototype, constructor = ObjectFingerprint;
    prototype.fingerprint = function(){
      return superclass.prototype.fingerprint.call(this) || this.hash() || this.json();
    };
    prototype.hash = function(){
      if (toString$.call(this.value.hash).slice(8, -1) === 'Function') {
        return this.value.hash();
      }
    };
    prototype.json = function(){
      return JSON.stringify(this.value);
    };
    function ObjectFingerprint(){
      ObjectFingerprint.superclass.apply(this, arguments);
    }
    return ObjectFingerprint;
  }(Fingerprint));
  ArrayFingerprint = (function(superclass){
    var prototype = extend$((import$(ArrayFingerprint, superclass).displayName = 'ArrayFingerprint', ArrayFingerprint), superclass).prototype, constructor = ArrayFingerprint;
    prototype.fingerprint = function(){
      return this.none() || this.string() || this.joined();
    };
    prototype.joined = function(){
      if (toString$.call(this.value).slice(8, -1) === 'Array') {
        return this.value.join('.');
      }
    };
    function ArrayFingerprint(){
      ArrayFingerprint.superclass.apply(this, arguments);
    }
    return ArrayFingerprint;
  }(Fingerprint));
  module.exports = {
    accessHash: function(){
      return this._accessHash || (this._accessHash = [this.actionHash(), this.subjectHash(), this.ctxHash()].join(':'));
    },
    subjectHash: function(){
      return this.subjectFingerprint || (this.subjectFingerprint = new ObjectFingerprint(this.subject).fingerprint());
    },
    actionHash: function(){
      return this.actionFingerprint || (this.actionFingerprint = new ArrayFingerprint(this.action).fingerprint());
    },
    userHash: function(){
      return this.userFingerprint || (this.userFingerprint = new ObjectFingerprint(this.user).fingerprint());
    },
    ctxHash: function(){
      return this.ctxFingerprint || (this.ctxFingerprint = new ObjectFingerprint(this.ctx).fingerprint());
    }
  };
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{}],8:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, Permit, PermitFilter, Allower;
  lo = require('./util/lodash_lite');
  Debugger = require('./debugger');
  Permit = require('./permit');
  PermitFilter = require('./permit/permit_filter');
  module.exports = Allower = (function(){
    Allower.displayName = 'Allower';
    var prototype = Allower.prototype, constructor = Allower;
    importAll$(prototype, arguments[0]);
    function Allower(accessRequest, debugging){
      this.accessRequest = accessRequest;
      this.debugging = debugging;
      this.permits = PermitFilter.filter(this.accessRequest);
    }
    prototype.allows = function(){
      this.debug('allows', this.accessRequest);
      return this.test('allows');
    };
    prototype.disallows = function(){
      this.debug('disallows', this.accessRequest);
      return this.test('disallows');
    };
    prototype.test = function(allowType){
      var i$, ref$, len$, permit;
      for (i$ = 0, len$ = (ref$ = this.permits).length; i$ < len$; ++i$) {
        permit = ref$[i$];
        this.debug('test permit', allowType, permit);
        this.debug('with rules', permit.rules);
        if (this.debugging) {
          permit.debugOn();
        }
        permit.applyRules(this.accessRequest);
        this.debug('permit rules');
        if (permit[allowType](this.accessRequest)) {
          return true;
        }
      }
      return false;
    };
    return Allower;
  }(Debugger));
  lo.extend(Allower, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./debugger":10,"./permit":18,"./permit/permit_filter":20,"./util/lodash_lite":29}],9:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var Debugger, AccessRequest, Ability, Authorizer, toString$ = {}.toString;
  Debugger = require('./debugger');
  AccessRequest = require('./access_request');
  Ability = require('./ability');
  module.exports = Authorizer = (function(){
    Authorizer.displayName = 'Authorizer';
    var prototype = Authorizer.prototype, constructor = Authorizer;
    importAll$(prototype, arguments[0]);
    function Authorizer(user){
      this.user = user;
    }
    prototype.run = function(action, subject, context){
      if (toString$.call(action).slice(8, -1) === 'Object') {
        return this.run(action.action, action.subject, action.context);
      }
      this.debug('run', action, subject, context);
      return this.can(action, subject, context);
    };
    prototype.createAbility = function(){
      var a;
      a = new Ability(this.user);
      if (this.debugging) {
        a.debugOn();
      }
      return a;
    };
    prototype.ability = function(){
      return this.currentAbility || (this.currentAbility = this.createAbility());
    };
    prototype.access = function(action, subject, ctx){
      var ar;
      ar = new AccessRequest(this.user, action, subject, ctx, this.debugging);
      if (this.debugging) {
        ar.debugOn();
      }
      return ar;
    };
    prototype.authorize = function(action, subject, context){
      this.debug('authorize', action, subject, context);
      return this.ability().authorize(this.access(action, subject, context));
    };
    prototype.can = function(action, subject, context){
      this.debug('can', action, subject, context);
      return this.ability().can(this.access(action, subject, context));
    };
    prototype.cannot = function(action, subject, context){
      this.debug('cannot', action, subject, context);
      return this.ability().cannot(this.access(action, subject, context));
    };
    return Authorizer;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./ability":3,"./access_request":6,"./debugger":10}],10:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  module.exports = {
    debugging: false,
    debug: function(msg){
      if (this.debugging) {
        console.log(this.constructor.displayName + ':');
        return console.log.apply(this, arguments);
      }
    },
    debugOn: function(){
      return this.debugging = true;
    },
    debugOff: function(){
      return this.debugging = false;
    }
  };
}).call(this);

},{}],11:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, UserMatcher, ActionMatcher, SubjectMatcher, ContextMatcher, AccessMatcher, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  Debugger = require('../debugger');
  UserMatcher = require('./user_matcher');
  ActionMatcher = require('./action_matcher');
  SubjectMatcher = require('./subject_matcher');
  ContextMatcher = require('./context_matcher');
  AccessMatcher = (function(){
    AccessMatcher.displayName = 'AccessMatcher';
    var prototype = AccessMatcher.prototype, constructor = AccessMatcher;
    importAll$(prototype, arguments[0]);
    function AccessMatcher(accessRequest){
      this.accessRequest = accessRequest;
      this.matchResult = true;
    }
    prototype.userMatcher = function(){
      return this.um || (this.um = new UserMatcher(this.accessRequest));
    };
    prototype.subjectMatcher = function(){
      return this.sm || (this.sm = new SubjectMatcher(this.accessRequest));
    };
    prototype.actionMatcher = function(){
      return this.am || (this.am = new ActionMatcher(this.accessRequest));
    };
    prototype.contextMatcher = function(){
      return this.cm || (this.cm = new ContextMatcher(this.accessRequest));
    };
    prototype.matchOn = function(hash){
      var all, key, matchFun, matchValue;
      all = hash;
      for (key in hash) {
        matchFun = this[key];
        matchValue = hash[key];
        if (toString$.call(matchFun).slice(8, -1) === 'Function') {
          delete all[key];
          matchFun.call(this, matchValue).matchOn(all);
        }
      }
      return this.result();
    };
    prototype.result = function(){
      return this.matchResult;
    };
    prototype.update = function(result){
      return this.matchResult = this.matchResult && result;
    };
    prototype.user = function(user){
      this.update(this.userMatcher().match(user));
      return this;
    };
    prototype.role = function(role){
      this.user({
        role: role
      });
      return this;
    };
    prototype.roles = function(roles){
      var i$, len$, role;
      for (i$ = 0, len$ = roles.length; i$ < len$; ++i$) {
        role = roles[i$];
        if (!this.matchResult) {
          this.role(role);
        }
      }
      return this;
    };
    prototype.subject = function(subject){
      this.update(this.subjectMatcher().match(subject));
      return this;
    };
    prototype.subjectClazz = function(clazz){
      this.update(this.subjectMatcher().matchClazz(clazz));
      return this;
    };
    prototype.action = function(action){
      this.update(this.actionMatcher().match(action));
      return this;
    };
    prototype.actions = function(actions){
      var i$, len$, action;
      for (i$ = 0, len$ = actions.length; i$ < len$; ++i$) {
        action = actions[i$];
        if (!this.matchResult) {
          this.action(action);
        }
      }
      return this;
    };
    prototype.context = function(ctx){
      this.update(this.contextMatcher().match(ctx));
      return this;
    };
    prototype.ctx = function(ctx){
      return this.context(ctx);
    };
    return AccessMatcher;
  }(Debugger));
  lo.extend(AccessMatcher, Debugger);
  module.exports = AccessMatcher;
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../debugger":10,"../util/lodash_lite":29,"./action_matcher":12,"./context_matcher":14,"./subject_matcher":15,"./user_matcher":16}],12:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, BaseMatcher, ActionMatcher, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  Debugger = require('../debugger');
  BaseMatcher = require('./base_matcher');
  ActionMatcher = (function(superclass){
    var prototype = extend$((import$(ActionMatcher, superclass).displayName = 'ActionMatcher', ActionMatcher), superclass).prototype, constructor = ActionMatcher;
    function ActionMatcher(accessRequest){
      this.accessRequest = accessRequest;
      ActionMatcher.superclass.apply(this, arguments);
      this.setAction();
    }
    prototype.setAction = function(){
      return this.action || (this.action = this.accessRequest != null ? this.accessRequest.action : '');
    };
    prototype.match = function(action){
      if (toString$.call(action).slice(8, -1) === 'Function') {
        return action.call(this.action);
      }
      if (this.deathMatch('action', action)) {
        return true;
      }
      return this.action === action;
    };
    return ActionMatcher;
  }(BaseMatcher));
  lo.extend(ActionMatcher, Debugger);
  module.exports = ActionMatcher;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../debugger":10,"../util/lodash_lite":29,"./base_matcher":13}],13:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, Intersect, BaseMatcher;
  lo = require('../util/lodash_lite');
  Debugger = require('../debugger');
  Intersect = requires.util('intersect');
  BaseMatcher = (function(){
    BaseMatcher.displayName = 'BaseMatcher';
    var prototype = BaseMatcher.prototype, constructor = BaseMatcher;
    importAll$(prototype, arguments[0]);
    function BaseMatcher(accessRequest){
      this.setAccessRequest(accessRequest);
      this.setIntersect();
    }
    prototype.match = function(value){
      return false;
    };
    prototype.deathMatch = function(name, value){
      if (this[name] && value === void 8) {
        return true;
      }
      return false;
    };
    prototype.setAccessRequest = function(accessRequest){
      return this.accessRequest = accessRequest
        ? accessRequest
        : {};
    };
    prototype.setIntersect = function(){
      return this.intersect || (this.intersect = Intersect());
    };
    return BaseMatcher;
  }(Debugger));
  lo.extend(BaseMatcher, Debugger);
  module.exports = BaseMatcher;
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../debugger":10,"../util/lodash_lite":29}],14:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, BaseMatcher, ContextMatcher, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  Debugger = require('../debugger');
  BaseMatcher = require('./base_matcher');
  ContextMatcher = (function(superclass){
    var prototype = extend$((import$(ContextMatcher, superclass).displayName = 'ContextMatcher', ContextMatcher), superclass).prototype, constructor = ContextMatcher;
    function ContextMatcher(accessRequest){
      this.accessRequest = accessRequest;
      ContextMatcher.superclass.apply(this, arguments);
      this.setCtx();
    }
    prototype.setCtx = function(){
      return this.ctx || (this.ctx = this.accessRequest != null
        ? this.accessRequest.ctx
        : {});
    };
    prototype.match = function(ctx){
      if (toString$.call(ctx).slice(8, -1) === 'Function') {
        return ctx.call(this.ctx);
      }
      if (this.deathMatch('ctx', ctx)) {
        return true;
      }
      return this.intersect.on(ctx, this.ctx);
    };
    return ContextMatcher;
  }(BaseMatcher));
  lo.extend(ContextMatcher, Debugger);
  module.exports = ContextMatcher;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../debugger":10,"../util/lodash_lite":29,"./base_matcher":13}],15:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, BaseMatcher, SubjectMatcher, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  Debugger = require('../debugger');
  BaseMatcher = require('./base_matcher');
  SubjectMatcher = (function(superclass){
    var prototype = extend$((import$(SubjectMatcher, superclass).displayName = 'SubjectMatcher', SubjectMatcher), superclass).prototype, constructor = SubjectMatcher;
    function SubjectMatcher(accessRequest){
      this.accessRequest = accessRequest;
      SubjectMatcher.superclass.apply(this, arguments);
      this.setSubject();
    }
    prototype.setSubject = function(){
      return this.subject || (this.subject = this.accessRequest != null
        ? this.accessRequest.subject
        : {});
    };
    prototype.match = function(subject){
      if (toString$.call(subject).slice(8, -1) === 'Function') {
        return subject.call(this.subject);
      }
      if (this.deathMatch('subject', subject)) {
        return true;
      }
      return this.intersect.on(subject, this.subject);
    };
    prototype.matchClazz = function(subject){
      var clazz;
      clazz = subject.camelize();
      if (!(this.subject && this.subject.constructor)) {
        return false;
      }
      return this.subject.constructor.displayName === clazz;
    };
    return SubjectMatcher;
  }(BaseMatcher));
  lo.extend(SubjectMatcher, Debugger);
  module.exports = SubjectMatcher;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../debugger":10,"../util/lodash_lite":29,"./base_matcher":13}],16:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, BaseMatcher, UserMatcher, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  Debugger = require('../debugger');
  BaseMatcher = require('./base_matcher');
  UserMatcher = (function(superclass){
    var prototype = extend$((import$(UserMatcher, superclass).displayName = 'UserMatcher', UserMatcher), superclass).prototype, constructor = UserMatcher;
    function UserMatcher(accessRequest){
      this.accessRequest = accessRequest;
      UserMatcher.superclass.apply(this, arguments);
      this.setUser();
    }
    prototype.setUser = function(){
      return this.user || (this.user = this.accessRequest != null
        ? this.accessRequest.user
        : {});
    };
    prototype.match = function(user){
      if (toString$.call(user).slice(8, -1) === 'Function') {
        return user.call(this.user);
      }
      if (this.deathMatch('user', user)) {
        return true;
      }
      return this.intersect.on(user, this.user);
    };
    return UserMatcher;
  }(BaseMatcher));
  lo.extend(UserMatcher, Debugger);
  module.exports = UserMatcher;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../debugger":10,"../util/lodash_lite":29,"./base_matcher":13}],17:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var BaseMatcher, UserMatcher, ActionMatcher, SubjectMatcher, ContextMatcher, AccessMatcher;
  BaseMatcher = require('./matcher/base_matcher');
  UserMatcher = require('./matcher/user_matcher');
  ActionMatcher = require('./matcher/action_matcher');
  SubjectMatcher = require('./matcher/subject_matcher');
  ContextMatcher = require('./matcher/context_matcher');
  AccessMatcher = require('./matcher/access_matcher');
  module.exports = {
    BaseMatcher: BaseMatcher,
    UserMatcher: UserMatcher,
    ActionMatcher: ActionMatcher,
    SubjectMatcher: SubjectMatcher,
    ContextMatcher: ContextMatcher,
    AccessMatcher: AccessMatcher
  };
}).call(this);

},{"./matcher/access_matcher":11,"./matcher/action_matcher":12,"./matcher/base_matcher":13,"./matcher/context_matcher":14,"./matcher/subject_matcher":15,"./matcher/user_matcher":16}],18:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, PermitRegistry, PermitMatcher, PermitAllower, RuleApplier, RuleRepo, matchers, UserMatcher, SubjectMatcher, ActionMatcher, ContextMatcher, AccessMatcher, Permit, toString$ = {}.toString;
  lo = require('./util/lodash_lite');
  Debugger = require('./debugger');
  PermitRegistry = require('./permit/permit_registry');
  PermitMatcher = require('./permit/permit_matcher');
  PermitAllower = require('./permit/permit_allower');
  RuleApplier = require('./rule/rule_applier');
  RuleRepo = require('./rule/rule_repo');
  matchers = require('./matchers');
  UserMatcher = matchers.UserMatcher;
  SubjectMatcher = matchers.SubjectMatcher;
  ActionMatcher = matchers.ActionMatcher;
  ContextMatcher = matchers.ContextMatcher;
  AccessMatcher = matchers.AccessMatcher;
  module.exports = Permit = (function(){
    Permit.displayName = 'Permit';
    var prototype = Permit.prototype, constructor = Permit;
    importAll$(prototype, arguments[0]);
    function Permit(name, description){
      this.name = name;
      this.description = description != null ? description : '';
      PermitRegistry.registerPermit(this);
      this.ruleRepo = new RuleRepo(this.name);
      this.appliedRules = false;
      this;
    }
    prototype.permitMatcherClass = PermitMatcher;
    prototype.ruleApplierClass = RuleApplier;
    Permit.get = function(name){
      return PermitRegistry.get(name);
    };
    prototype.init = function(){
      this.debug('permit init');
      this.applyRules();
      this.configureMatchers();
      return this;
    };
    prototype.configureMatchers = function(){
      var key;
      this.debug("configure-matchers", this.matchesOn);
      if (toString$.call(this.matchesOn).slice(8, -1) !== 'Object') {
        return;
      }
      this.compiledList = [];
      this.debug("compile...");
      for (key in this.matchesOn) {
        this.compileFor(key, this.matchesOn[key]);
      }
      return this.debug('compiled matchers:', this.compiledList);
    };
    prototype.compileFor = function(key, list){
      var fun;
      this.debug("compile for", key, list);
      fun = this.compiledMatcher(key, list);
      this.debug('fun', fun);
      return this.compiledList.push(fun);
    };
    prototype.compiledMatcher = function(type, matchList){
      var self;
      self = this;
      return function(accessRequest){
        var matchObj, ref$;
        matchObj = (ref$ = {}, ref$[type] = matchList, ref$);
        self.debug('compiled fun: match-on', accessRequest);
        return self.matchOn(accessRequest, matchObj);
      };
    };
    prototype.clean = function(){
      this.ruleRepo.clean();
      return this.appliedRules = false;
    };
    prototype.use = function(obj){
      if (toString$.call(obj).slice(8, -1) === 'Function') {
        obj = obj();
      }
      if (toString$.call(obj).slice(8, -1) === 'Object') {
        return lo.extend(this, obj);
      } else {
        throw Error("Can only extend permit with an Object, was: " + toString$.call(obj).slice(8, -1));
      }
    };
    prototype.rules = function(){};
    prototype.permitAllower = function(){
      return new PermitAllower(this.ruleRepo, this.debugging);
    };
    prototype.allows = function(accessRequest){
      var res;
      this.debug('permit allows?', this.name, this.description);
      res = this.permitAllower().allows(accessRequest);
      this.debug(this.name + " Permit allows:", this.rules, accessRequest, res);
      return res;
    };
    prototype.disallows = function(accessRequest){
      var res;
      this.debug('permit disallows?', this.name, this.description);
      res = this.permitAllower().disallows(accessRequest);
      this.debug(this.name + " Permit disallows:", this.rules, accessRequest, res);
      return res;
    };
    prototype.matching = function(access){
      return new AccessMatcher(access);
    };
    prototype.matcher = function(accessRequest){
      return new this.permitMatcherClass(this, accessRequest, this.debugging);
    };
    prototype.matches = function(accessRequest){
      var permitMatcher;
      this.debug('matches', accessRequest);
      permitMatcher = this.matcher(accessRequest);
      this.debug('permit matcher', permitMatcher);
      return permitMatcher.match();
    };
    prototype.matchOn = function(accessRequest, matchObj){
      return this.matching(accessRequest).matchOn(matchObj);
    };
    prototype.matchUser = function(accessRequest, user){
      return this.matching(accessRequest).user(user);
    };
    prototype.matchRole = function(accessRequest, role){
      return this.matching(accessRequest).role(role);
    };
    prototype.matchSubject = function(accessRequest, subj){
      return this.matching(accessRequest).subject(subj);
    };
    prototype.matchSubjectClazz = function(clazz){
      return {
        subjectClazz: this.matching(accessRequest).clazz
      };
    };
    prototype.matchAction = function(action){
      return this.matching(accessRequest).action(action);
    };
    prototype.matchContext = function(ctx){
      return this.matches(accessRequest).context(ctx);
    };
    prototype.matchCtx = function(ctx){
      return this.matching(accessRequest).ctx(ctx);
    };
    prototype.ruleApplier = function(accessRequest){
      if (toString$.call(accessRequest).slice(8, -1) !== 'Object') {
        accessRequest = {};
      }
      return new this.ruleApplierClass(this.ruleRepo, this.rules, accessRequest, this.debugging);
    };
    prototype.applyRules = function(accessRequest, force){
      if (!(accessRequest === undefined || toString$.call(accessRequest).slice(8, -1) === 'Object')) {
        force = Boolean(accessRequest);
      }
      if (!(this.appliedRules && !force)) {
        this.debug('permit apply rules', accessRequest);
        this.ruleApplier(accessRequest).applyRules();
        return this.appliedRules = true;
      } else {
        return this.debug('rules already applied before', this.appliedRules);
      }
    };
    prototype.canRules = function(){
      return this.ruleRepo.canRules;
    };
    prototype.cannotRules = function(){
      return this.ruleRepo.cannotRules;
    };
    return Permit;
  }(Debugger));
  lo.extend(Permit, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./debugger":10,"./matchers":17,"./permit/permit_allower":19,"./permit/permit_matcher":22,"./permit/permit_registry":23,"./rule/rule_applier":26,"./rule/rule_repo":27,"./util/lodash_lite":29}],19:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, PermitAllower, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  Debugger = require('../debugger');
  module.exports = PermitAllower = (function(){
    PermitAllower.displayName = 'PermitAllower';
    var prototype = PermitAllower.prototype, constructor = PermitAllower;
    importAll$(prototype, arguments[0]);
    function PermitAllower(ruleRepo, debugging){
      this.ruleRepo = ruleRepo;
      this.debugging = debugging;
      if (toString$.call(this.ruleRepo).slice(8, -1) !== 'Object') {
        throw Error("PermitAllower must take a RuleRepo in constructor, was: " + this.ruleRepo);
      }
    }
    prototype.testAccess = function(act, accessRequest){
      var subj;
      this.debug('test-access', act, accessRequest);
      if (this.debugging) {
        this.ruleRepo.debugOn();
      }
      subj = this.ruleRepo.matchRule(act, accessRequest);
      this.debug('subj', subj);
      return subj === true;
    };
    prototype.allows = function(accessRequest, ignoreInverse){
      this.debug('allows', accessRequest, ignoreInverse);
      if (!ignoreInverse) {
        if (this.disallows(accessRequest, true)) {
          return false;
        }
      }
      if (this.testAccess('can', accessRequest) === false) {
        return false;
      }
      return true;
    };
    prototype.disallows = function(accessRequest, ignoreInverse){
      this.debug('disallows', accessRequest, ignoreInverse);
      if (this.testAccess('cannot', accessRequest) === true) {
        return true;
      }
      return false;
    };
    return PermitAllower;
  }(Debugger));
  lo.extend(PermitAllower, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../debugger":10,"../util/lodash_lite":29}],20:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, Permit, PermitRegistry, PermitFilter, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  Debugger = require('../debugger');
  Permit = require('../permit');
  PermitRegistry = require('../permit/permit_registry');
  module.exports = PermitFilter = (function(){
    PermitFilter.displayName = 'PermitFilter';
    var prototype = PermitFilter.prototype, constructor = PermitFilter;
    importAll$(prototype, arguments[0]);
    PermitFilter.filter = function(accessRequest){
      var self, matchingFun, permits, res;
      self = this;
      matchingFun = function(permit){
        self.debug('matching', permit, accessRequest);
        if (!permit.matches) {
          throw Error("Permit must have a .matches(access-request) method: " + permit);
        }
        return permit.matches(accessRequest);
      };
      permits = this.permits();
      if (toString$.call(permits).slice(8, -1) !== 'Array') {
        throw Error("permits which contain all registered permits, must be an Array, was: " + typeof permits);
      }
      this.debug('filter permits', permits, accessRequest);
      res = lo.filter(permits, matchingFun);
      this.debug('filtered', res);
      return res;
    };
    PermitFilter.permits = function(){
      return lo.values(PermitRegistry.permits);
    };
    function PermitFilter(){}
    return PermitFilter;
  }(Debugger));
  lo.extend(PermitFilter, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../debugger":10,"../permit":18,"../permit/permit_registry":23,"../util/lodash_lite":29}],21:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Permit, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  Permit = require('../permit');
  module.exports = function(baseClazz, name, baseObj, debug){
    var permit;
    if (toString$.call(baseClazz).slice(8, -1) === 'String') {
      baseObj = name;
      name = baseClazz;
      baseClazz = Permit;
    }
    permit = new baseClazz(name);
    if (debug === true) {
      permit.debugOn();
    }
    if (baseObj != null && toString$.call(baseObj).slice(8, -1) === 'Function') {
      baseObj = baseObj();
    }
    if (toString$.call(baseObj).slice(8, -1) === 'Object') {
      permit = permit.use(baseObj);
    }
    return permit.init();
  };
}).call(this);

},{"../permit":18,"../util/lodash_lite":29}],22:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Intersect, AccessMatcher, Debugger, PermitMatcher, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  Intersect = require('../util/intersect');
  AccessMatcher = require('../matcher/access_matcher');
  Debugger = requires.lib('debugger');
  module.exports = PermitMatcher = (function(){
    PermitMatcher.displayName = 'PermitMatcher';
    var prototype = PermitMatcher.prototype, constructor = PermitMatcher;
    importAll$(prototype, arguments[0]);
    function PermitMatcher(permit, accessRequest, debugging){
      this.permit = permit;
      this.accessRequest = accessRequest;
      this.debugging = debugging;
      this.intersect = Intersect();
      if (this.debugging) {
        this.debugOn();
      }
      this.validate();
    }
    prototype.match = function(options){
      var res, mc;
      options == null && (options = {});
      this.debug('permit-matcher match');
      res = (this.include() || this.customMatch()) && !(this.exclude() || this.customExMatch());
      if (options.compiled === false) {
        return res;
      }
      this.debug('compiled result:', this.matchCompiled());
      mc = this.matchCompiled();
      this.debug('mc res', mc);
      return res || mc;
    };
    prototype.matchCompiled = function(){
      var res, i$, ref$, len$, matchFun;
      this.debug("match-compiled", this.permit.compiledList);
      if (toString$.call(this.permit.compiledList).slice(8, -1) !== 'Array') {
        return false;
      }
      this.debug("compiled matchers: " + this.permit.compiledList.length);
      res = false;
      for (i$ = 0, len$ = (ref$ = this.permit.compiledList).length; i$ < len$; ++i$) {
        matchFun = ref$[i$];
        if (matchFun(this.accessRequest)) {
          res = true;
        }
        this.debug('compile fun res', res);
        if (res) {
          break;
        }
      }
      return res;
    };
    prototype.include = function(){
      return this.intersectOn(this.permit.includes);
    };
    prototype.exclude = function(){
      return this.intersectOn(this.permit.excludes);
    };
    prototype.customExMatch = function(){
      var res;
      if (toString$.call(this.permit.exMatch).slice(8, -1) === 'Function') {
        res = this.permit.exMatch(this.accessRequest);
        if (res.constructor === AccessMatcher) {
          return res.result();
        }
        if (res === undefined) {
          return true;
        }
        if (toString$.call(res).slice(8, -1) !== 'Boolean') {
          throw Error(".match method of permit " + this.permit.name + " must return a Boolean value, was: " + toString$.call(res).slice(8, -1));
        }
        return res;
      } else {
        this.debug("permit.ex-match function not found for permit: " + this.permit);
        return false;
      }
    };
    prototype.customMatch = function(){
      var res;
      if (toString$.call(this.permit.match).slice(8, -1) === 'Function') {
        res = this.permit.match(this.accessRequest);
        this.debug('custom-match', this.permit.match, res);
        if (res.constructor === AccessMatcher) {
          return res.result();
        }
        if (res === undefined) {
          return true;
        }
        if (toString$.call(res).slice(8, -1) !== 'Boolean') {
          throw Error(".match method of permit " + this.permit.name + " must return a Boolean value, was: " + toString$.call(res).slice(8, -1));
        }
        return res;
      } else {
        this.debug("permit.match function not found for permit: " + this.permit);
        return false;
      }
    };
    prototype.intersectOn = function(partial){
      var res;
      if (partial == null) {
        return false;
      }
      if (toString$.call(partial).slice(8, -1) === 'Function') {
        partial = partial();
      }
      res = this.intersect.on(partial, this.accessRequest);
      return res;
    };
    prototype.validate = function(){
      if (!this.permit) {
        throw Error("PermitMatcher missing permit");
      }
      if (this.accessRequest != null && this.accessRequest === undefined) {
        throw Error("access-request is undefined");
      }
    };
    return PermitMatcher;
  }(Debugger));
  lo.extend(PermitMatcher, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../matcher/access_matcher":11,"../util/intersect":28,"../util/lodash_lite":29}],23:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, todo, PermitRegistry, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  Debugger = require('../debugger');
  todo = "allow creation of multiple registries and select one to use per environment";
  module.exports = PermitRegistry = (function(){
    PermitRegistry.displayName = 'PermitRegistry';
    var prototype = PermitRegistry.prototype, constructor = PermitRegistry;
    importAll$(prototype, arguments[0]);
    function PermitRegistry(){
      throw Error("PermitRegistry is currently a singleton (TODO: " + todo + ")");
    }
    PermitRegistry.permits = {};
    PermitRegistry.permitCounter = 0;
    PermitRegistry.calcName = function(name){
      if (name === undefined) {
        name = "Permit-" + constructor.permitCounter;
      }
      if (toString$.call(name).slice(8, -1) !== 'String') {
        throw Error("Name of permit must be a String, was: " + name);
      }
      return name;
    };
    PermitRegistry.get = function(name){
      return constructor.permits[name] || (function(){
        throw Error("No permit '" + name + "' is registered");
      }());
    };
    PermitRegistry.registerPermit = function(permit){
      var name;
      permit.name = this.calcName(permit.name);
      name = permit.name;
      if (toString$.call(constructor.permits).slice(8, -1) !== 'Object') {
        throw Error("permits registry container must be an Object in order to store permits by name, was: " + constructor.permits);
      }
      if (constructor.permits[name]) {
        throw Error("A Permit named: " + name + " is already registered, please use a different name!");
      }
      constructor.permits[name] = permit;
      return constructor.permitCounter = constructor.permitCounter + 1;
    };
    PermitRegistry.clearPermits = function(){
      constructor.permits = {};
      return constructor.permitCounter = 0;
    };
    PermitRegistry.clearAll = function(){
      return constructor.clearPermits();
    };
    PermitRegistry.permitList = function(){
      return lo.values(constructor.permits);
    };
    PermitRegistry.cleanPermits = function(){
      var i$, ref$, len$, permit, results$ = [];
      for (i$ = 0, len$ = (ref$ = constructor.permitList()).length; i$ < len$; ++i$) {
        permit = ref$[i$];
        results$.push(permit.clean());
      }
      return results$;
    };
    PermitRegistry.cleanAll = function(){
      return constructor.cleanPermits();
    };
    return PermitRegistry;
  }(Debugger));
  lo.extend(PermitRegistry, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../debugger":10,"../util/lodash_lite":29}],24:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, PermitRulesDbLoader;
  lo = require('../util/lodash_lite');
  Debugger = require('../debugger');
  PermitRulesDbLoader = (function(superclass){
    var prototype = extend$((import$(PermitRulesDbLoader, superclass).displayName = 'PermitRulesDbLoader', PermitRulesDbLoader), superclass).prototype, constructor = PermitRulesDbLoader;
    importAll$(prototype, arguments[1]);
    function PermitRulesDbLoader(filePath){
      this.filePath = filePath;
      PermitRulesDbLoader.superclass;
    }
    prototype.loadDb = function(options){
      this.options = options != null
        ? options
        : {};
      this.connectDb();
      this.loadData();
      this.loadedRules = JSON.parse(data);
      return this.processRules();
    };
    prototype.connectDb = function(){};
    prototype.loadData = function(){};
    return PermitRulesDbLoader;
  }(PermitRulesLoader, Debugger));
  module.exports = PermitRulesDbLoader;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../debugger":10,"../util/lodash_lite":29}],25:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, fs, permitFor, PermitRulesLoader, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  Debugger = require('../debugger');
  fs = require('fs');
  permitFor = require('../permit/permit_for');
  Array.prototype.contains = function(v){
    return this.indexOf(v) > -1;
  };
  PermitRulesLoader = (function(){
    PermitRulesLoader.displayName = 'PermitRulesLoader';
    var prototype = PermitRulesLoader.prototype, constructor = PermitRulesLoader;
    importAll$(prototype, arguments[0]);
    function PermitRulesLoader(filePath, options){
      this.filePath = filePath;
      this.options = options != null
        ? options
        : {};
      this.loadedRules = {};
      this.async = this.options.async;
    }
    prototype.createPermit = function(name, options){
      var baseClazz, loadedRules, permit;
      options == null && (options = {});
      baseClazz || (baseClazz = options.clazz || requires.lib('permit'));
      loadedRules = this.loadRules().rules();
      console.log('loaded-rules', loadedRules, this.filePath);
      permit = permitFor(baseClazz, name, function(){
        return {
          rules: {}
        };
      });
      if (options.key) {
        return permit.rules[key] = loadedRules;
      } else {
        return permit.rules = loadedRules;
      }
    };
    prototype.loadRules = function(filePath, async){
      this.filePath || (this.filePath = filePath);
      if (async !== void 8) {
        this.async = async;
      } else {
        this.async || (this.async = true);
      }
      this.debug("loadRules", this.filePath);
      if (!this.filePath) {
        throw Error("Error: Missing filepath");
      }
      if (this.async) {
        return this.loadRulesAsync(filePath);
      } else {
        return this.loadRulesSync(filePath);
      }
    };
    prototype.loadRulesAsync = function(){
      var self;
      this.debug('loadRulesAsync');
      self = this;
      fs.readFile(this.filePath, 'utf8', function(err, data){
        var rules;
        self.debug(err, data);
        if (err) {
          this.debug(err);
          throw Error("Error loading file: " + this.filePath + " - " + err);
        }
        self.debug("data", data);
        rules = JSON.parse(data);
        self.debug("loaded-rules", rules);
        self.loadedRules = rules;
        return self.processRules();
      });
      return this;
    };
    prototype.loadRulesSync = function(){
      var data, rules, err;
      try {
        data = fs.readFileSync(this.filePath, 'utf8', function(){});
        this.debug("data", data);
        if (toString$.call(data).slice(8, -1) !== 'String') {
          throw Error;
        }
        rules = JSON.parse(data);
        this.debug("loaded-rules", rules);
        this.loadedRules = rules;
        this.processRules();
        return this;
      } catch (e$) {
        err = e$;
        throw Error("Error loading file: " + this.filePath + " - " + err);
      }
    };
    prototype.loadRulesFrom = function(path){
      return this.loadRules(path);
    };
    prototype.load = function(path){
      return this.loadRules(path);
    };
    prototype.processRules = function(){
      var key, ref$, rule;
      this.debug("processRules", this.loadedRules);
      if (toString$.call(this.loadedRules).slice(8, -1) !== 'Object') {
        throw Error("Rules not loaded or invalid: " + this.loadedRules);
      }
      this.processedRules = {};
      for (key in ref$ = this.loadedRules) {
        rule = ref$[key];
        this.processRule(key, rule);
      }
      return this.processedRules;
    };
    prototype.processRule = function(key, rule){
      this.debug("processRule", key, rule);
      return this.processedRules[key] = this.ruleFor(rule);
    };
    prototype.createRulesAt = function(permit, place){
      if (toString$.call(permit).slice(8, -1) !== 'Function') {
        throw Error("Not a permit, was: " + permit);
      }
      if (place != null) {
        if (!(permit.rules != null && toString$.call(permit.rules).slice(8, -1) === 'Object')) {
          throw Error("Permit has no rules object to place loaded rules at " + place);
        }
        return permit.rules[place] = this.processedRules;
      } else {
        return permit.rules = this.processedRules;
      }
    };
    prototype.rules = function(){
      return this.processedRules;
    };
    prototype.ruleFor = function(rule){
      var key;
      this.debug("ruleFor", rule);
      key = Object.keys(rule)[0];
      if (!['can', 'cannot'].contains(key)) {
        throw Error("Not a valid rule key, must be 'can' or 'cannot', was: " + key);
      }
      return this.factory(key, rule[key]);
    };
    prototype.factory = function(act, rule){
      var rules, action, subject, fun;
      rules = [];
      for (action in rule) {
        subject = rule[action];
        fun = this.resolve(act, action, subject);
        rules.push(fun);
      }
      return function(){
        var i$, ref$, len$, rule, results$ = [];
        for (i$ = 0, len$ = (ref$ = rules).length; i$ < len$; ++i$) {
          rule = ref$[i$];
          results$.push(this.rule());
        }
        return results$;
      };
    };
    prototype.resolve = function(act, action, subject){
      return function(){
        return this["u" + act](action, subject);
      };
    };
    return PermitRulesLoader;
  }(Debugger));
  module.exports = PermitRulesLoader;
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../debugger":10,"../permit/permit_for":21,"../util/lodash_lite":29,"fs":1}],26:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, recurse, valid_rules, RuleApplier, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  Debugger = require('../debugger');
  recurse = function(val, ctx){
    var k, results$ = [];
    switch (toString$.call(val).slice(8, -1)) {
    case 'Function':
      return val.call(ctx);
    case 'Object':
      for (k in val) {
        results$.push(recurse(k, ctx));
      }
      return results$;
    }
  };
  valid_rules = function(rules){
    return toString$.call(rules).slice(8, -1) === 'Object' || toString$.call(rules).slice(8, -1) === 'Function';
  };
  module.exports = RuleApplier = (function(){
    RuleApplier.displayName = 'RuleApplier';
    var prototype = RuleApplier.prototype, constructor = RuleApplier;
    importAll$(prototype, arguments[0]);
    function RuleApplier(repo, rules, accessRequest, debugging){
      this.repo = repo;
      this.rules = rules;
      this.accessRequest = accessRequest;
      this.debugging = debugging;
      if (toString$.call(this.repo).slice(8, -1) !== 'Object') {
        throw Error("RuleApplier must be passed a RuleRepo, was: " + this.repo);
      }
      if (!valid_rules(this.rules)) {
        throw Error("RuleApplier must be passed the rules to be applied, was: " + this.rules);
      }
      if (!(this.accessRequest === undefined || toString$.call(this.accessRequest).slice(8, -1) === 'Object')) {
        throw Error("AccessRequest must be an Object, was: " + this.accessRequest);
      }
      this.debugging = this.debugging;
    }
    prototype.action = function(){
      var ref$;
      return (ref$ = this.accessRequest) != null ? ref$.action : void 8;
    };
    prototype.user = function(){
      var ref$;
      return (ref$ = this.accessRequest) != null ? ref$.user : void 8;
    };
    prototype.subject = function(){
      var ref$;
      return (ref$ = this.accessRequest) != null ? ref$.subject : void 8;
    };
    prototype.ctx = function(){
      var ref$;
      return (ref$ = this.accessRequest) != null ? ref$.ctx : void 8;
    };
    prototype.canRules = function(){
      return this.repo.canRules;
    };
    prototype.cannotRules = function(){
      return this.repo.cannotRules;
    };
    prototype.applyRulesFor = function(name, context){
      var rules, namedRules;
      this.debug("apply rules for " + name + " in context: " + context);
      if (toString$.call(name).slice(8, -1) === 'Object') {
        this.applyObjRulesFor(name, context);
      }
      if (toString$.call(name).slice(8, -1) !== 'String') {
        this.debug("Name to apply rules for must be a String, was: " + typeof name + " : " + name);
        return this;
      }
      rules = this.contextRules(context);
      namedRules = rules[name];
      if (toString$.call(namedRules).slice(8, -1) === 'Function') {
        namedRules.call(this, this.accessRequest);
      } else {
        this.debug("rules key for " + name + " should be a function that resolves one or more rules");
      }
      return this;
    };
    prototype.applyObjRulesFor = function(obj, context){
      var rules, objKeys, key, val, keyRules, results$ = [];
      rules = this.contextRules(context);
      this.debug('apply-obj-rules-for', obj, context, rules);
      objKeys = Object.keys(obj);
      if (obj.clazz === 'User') {
        objKeys = ['name', 'role'];
      }
      for (key in objKeys) {
        val = obj[key];
        if (obj.clazz === 'User') {
          this.applyRulesFor(val, context);
        }
        keyRules = rules[key];
        results$.push(this.applyRulesFor(val, keyRules));
      }
      return results$;
    };
    prototype.contextRules = function(context){
      if (toString$.call(context).slice(8, -1) === 'Object') {
        return context;
      }
      if (toString$.call(context).slice(8, -1) !== 'String') {
        return this.rules;
      }
      if (toString$.call(this.rules[context]).slice(8, -1) === 'Object') {
        return this.rules[context];
      } else {
        this.debug("no such rules context: " + context, this.rules);
        return this.rules;
      }
    };
    prototype.applyActionRules = function(){
      this.applyRulesFor(this.action());
      this.applyRulesFor(this.action(), 'action');
      return this;
    };
    prototype.applyUserRules = function(){
      this.applyRulesFor(this.user());
      this.applyRulesFor(this.user(), 'user');
      return this;
    };
    prototype.applySubjectRules = function(){
      this.applyRulesFor(this.subject());
      this.applyRulesFor(this.subject(), 'subject');
      return this;
    };
    prototype.applyCtxRules = function(){
      this.applyRulesFor(this.ctx());
      this.applyRulesFor(this.ctx(), 'ctx');
      this.applyRulesFor(this.ctx(), 'context');
      return this;
    };
    prototype.applyContextRules = function(){
      return this.applyCtxRules();
    };
    prototype.validRequest = function(){
      return !lo.isEmpty(this.accessRequest);
    };
    prototype.applyDefaultRules = function(){
      this.debug('apply-default-rules', this.accessRequest, this.validRequest());
      if (toString$.call(this.accessRequest).slice(8, -1) === 'Object' && this.validRequest()) {
        this.applyAccessRules();
      } else {
        this.applyRulesFor('default');
      }
      return this;
    };
    prototype.applyRules = function(){
      if (!valid_rules(this.rules)) {
        this.debug('invalid permit rules could not be applied');
        return;
      }
      this.debug('applying rules', this.rules, 'for', this.accessRequest);
      switch (typeof this.rules) {
      case 'function':
        this.rules();
        break;
      case 'object':
        this.applyDefaultRules();
        break;
      default:
        throw Error("rules must be a Function or an Object, was: " + this.rules);
      }
      return this;
    };
    prototype.applyAccessRules = function(){
      this.debug('apply access rules on', this.accessRequest);
      this.applyActionRules();
      this.applyUserRules();
      this.applyCtxRules();
      return this;
    };
    prototype.applyAllRules = function(){
      var rules, ctx, self, key;
      switch (typeof this.rules) {
      case 'object':
        rules = this.rules;
        ctx = this;
        self = this;
        for (key in rules) {
          self.recurse(rules[key], ctx);
        }
        break;
      default:
        throw Error("rules must be an Object was: " + typeof this.rules);
      }
      return this;
    };
    prototype.ucan = function(actions, subjects, ctx){
      return this.repo.registerRule('can', actions, subjects, ctx);
    };
    prototype.ucannot = function(actions, subjects, ctx){
      return this.repo.registerRule('cannot', actions, subjects, ctx);
    };
    return RuleApplier;
  }(Debugger));
  lo.extend(RuleApplier, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../debugger":10,"../util/lodash_lite":29}],27:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, camelCase, normalize, RuleRepo, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  Debugger = require('../debugger');
  camelCase = require('../util/string_util').camelCase;
  normalize = require('../util/normalize');
  module.exports = RuleRepo = (function(){
    RuleRepo.displayName = 'RuleRepo';
    var prototype = RuleRepo.prototype, constructor = RuleRepo;
    importAll$(prototype, arguments[0]);
    function RuleRepo(name){
      this.name = name;
    }
    prototype.canRules = {};
    prototype.cannotRules = {};
    prototype.display = function(){
      console.log("name:", this.name);
      console.log("can-rules:", this.canRules);
      return console.log("cannot-rules:", this.cannotRules);
    };
    prototype.cleanAll = function(){
      this.clean('can');
      this.clean('cannot');
      return this;
    };
    prototype.clean = function(act){
      if (act === undefined) {
        return this.cleanAll();
      }
      if (!(act === 'can' || act === 'cannot')) {
        throw Error("Repo can only clear 'can' or 'cannot' rules, was: " + act);
      }
      this.debug('clean', act);
      this[act + "Rules"] = {};
      return this;
    };
    prototype.clearAll = function(){
      return this.cleanAll();
    };
    prototype.clear = function(act){
      return this.clean(act);
    };
    prototype.subjectClazz = function(subject){
      var subjectClazz;
      if (toString$.call(subject).slice(8, -1) === 'Object') {
        return subjectClazz = subject.constructor.displayName;
      } else {
        return subjectClazz = subject;
      }
    };
    prototype.wildcards = ['*', 'any'];
    prototype.findMatchingSubject = function(subjects, subject){
      var self, camelized;
      if (lo.find(this.wildcards, function(wildcard){
        return subjects.indexOf(wildcard) !== -1;
      })) {
        return true;
      }
      if (toString$.call(subject).slice(8, -1) === 'Array') {
        self = this;
        return lo.find(subject, function(subj){
          return self.findMatchingSubject(subjects, subj);
        });
      }
      if (toString$.call(subject).slice(8, -1) !== 'String') {
        throw Error("find-matching-subject: Subject must be a String to be matched, was " + subject);
      }
      camelized = camelCase(subject);
      return subjects.indexOf(camelized) !== -1;
    };
    prototype.matchRule = function(act, accessRequest){
      var action, subject, subjClazz, ruleContainer, actionSubjects;
      this.debug('match-rule', act, accessRequest);
      act = camelCase(act);
      action = accessRequest.action;
      subject = accessRequest.subject;
      subjClazz = this.subjectClazz(subject);
      ruleContainer = this.containerFor(act);
      if (action === 'manage') {
        this.matchManageRule(ruleContainer, subjClazz);
      }
      this.debug('subj-clazz', subjClazz);
      if (!subjClazz) {
        return;
      }
      actionSubjects = ruleContainer[action];
      if (!actionSubjects) {
        return;
      }
      return this.matchSubjectClazz(actionSubjects, subjClazz);
    };
    prototype.matchSubjectClazz = function(actionSubjects, subjClazz){
      this.debug('match-subject-clazz', actionSubjects, subjClazz);
      if (toString$.call(actionSubjects).slice(8, -1) !== 'Array') {
        return false;
      }
      return this.findMatchingSubject(actionSubjects, subjClazz);
    };
    prototype.matchManageRule = function(ruleContainer, subjClazz){
      var manageSubjects, found;
      manageSubjects = ruleContainer['manage'];
      found = matchSubjectClazz(manageSubjects, subjClazz);
      if (found) {
        return found;
      }
      return manageActionSubjects(ruleContainer).all(function(actionSubjects){
        return matchSubjectClazz(actionSubjects, subjClazz);
      });
    };
    prototype.manageActionSubjects = function(ruleContainer){
      return lo.map(this.manageActions(), function(action){
        return ruleContainer[action];
      });
    };
    prototype.manageActions = function(){
      return ['create', 'edit', 'delete'];
    };
    prototype.addRule = function(ruleContainer, action, subjects){
      var ruleSubjects, uniqueSubjects, actionSubjects, self;
      if (toString$.call(ruleContainer).slice(8, -1) !== 'Object') {
        throw Error("Container must be an object");
      }
      ruleSubjects = ruleContainer[action] || [];
      subjects = normalize(subjects);
      ruleSubjects = ruleSubjects.concat(subjects);
      ruleSubjects = lo.map(ruleSubjects, function(subject){
        var val;
        val = camelCase(subject);
        if (val === 'Any') {
          return '*';
        } else {
          return val;
        }
      });
      uniqueSubjects = lo.unique(ruleSubjects);
      actionSubjects = ruleContainer[action];
      if (toString$.call(actionSubjects).slice(8, -1) !== 'Array') {
        actionSubjects = [];
      }
      ruleContainer[action] = this.registerActionSubjects(actionSubjects, uniqueSubjects);
      if (action === 'manage') {
        self = this;
        return lo.each(this.manageActions(), function(action){
          return ruleContainer[action] = self.registerActionSubjects(actionSubjects, uniqueSubjects);
        });
      }
    };
    prototype.registerActionSubjects = function(actionContainer, subjects){
      return lo.unique(actionContainer.concat(subjects));
    };
    prototype.containerFor = function(act){
      var c;
      act = act.toLowerCase();
      c = this[act + "Rules"];
      if (toString$.call(c).slice(8, -1) !== 'Object') {
        throw Error("No valid rule container for: " + act);
      }
      return c;
    };
    prototype.registerRule = function(act, actions, subjects){
      var ruleContainer, i$, len$, action, results$ = [];
      actions = normalize(actions);
      ruleContainer = this.containerFor(act);
      for (i$ = 0, len$ = actions.length; i$ < len$; ++i$) {
        action = actions[i$];
        results$.push(this.addRule(ruleContainer, action, subjects));
      }
      return results$;
    };
    return RuleRepo;
  }(Debugger));
  lo.extend(RuleRepo, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../debugger":10,"../util/lodash_lite":29,"../util/normalize":30,"../util/string_util":31}],28:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, toString$ = {}.toString;
  lo = require('./lodash_lite');
  module.exports = function(){
    var countProps, objectEquals, recursivePartialEqual;
    countProps = function(obj){
      var count, i$, len$, k;
      count = 0;
      for (i$ = 0, len$ = obj.length; i$ < len$; ++i$) {
        k = obj[i$];
        if (obj.hasOwnProperty(k)) {
          count++;
        }
      }
      return count;
    };
    objectEquals = function(v1, v2){
      var r, i$, len$, k;
      if (typeof v1 !== typeof v2) {
        return false;
      }
      if (toString$.call(v1).slice(8, -1) === 'Object' && toString$.call(v2).slice(8, -1) === 'Object') {
        if (countProps(v1) !== countProps(v2)) {
          return false;
        }
        r = true;
        for (i$ = 0, len$ = v1.length; i$ < len$; ++i$) {
          k = v1[i$];
          r = objectEquals(v1[k], v2[k]);
          if (!r) {
            return false;
          }
        }
        return true;
      } else {
        return v1 === v2;
      }
    };
    recursivePartialEqual = function(partialObj, compareObj){
      var res, key, partial, compare, equals;
      res = {};
      if (partialObj === void 8 || compareObj === void 8) {
        return false;
      }
      for (key in partialObj) {
        res[key] = false;
        partial = partialObj[key];
        compare = compareObj[key];
        if (partial === void 8) {
          continue;
        }
        if (toString$.call(partial).slice(8, -1) === 'Object' && toString$.call(compare).slice(8, -1) === 'Object') {
          if (compare != null) {
            equals = recursivePartialEqual(partial, compare);
          }
        } else {
          equals = objectEquals(partial, compare);
        }
        if (equals) {
          res[key] = true;
        }
      }
      for (key in partialObj) {
        if (!res[key]) {
          return false;
        }
      }
      return true;
    };
    return {
      on: function(partial, obj){
        return recursivePartialEqual(partial, obj);
      }
    };
  };
}).call(this);

},{"./lodash_lite":29}],29:[function(require,module,exports){
(function (global){
/**
 * @license
 * Lo-Dash 2.4.1 (Custom Build) lodash.com/license | Underscore.js 1.5.2 underscorejs.org/LICENSE
 * Build: `lodash include="each,keys,values,flatten,extend,filter,isEmpty,find,map,unique"`
 */
;(function(){function N(a,c,b){b=(b||0)-1;for(var d=a?a.length:0;++b<d;)if(a[b]===c)return b;return-1}function Ja(a,c){var b=typeof c;a=a.l;if("boolean"==b||null==c)return a[c]?0:-1;"number"!=b&&"string"!=b&&(b="object");var d="number"==b?c:ja+c;a=(a=a[b])&&a[d];return"object"==b?a&&-1<N(a,c)?0:-1:a?0:-1}function Ka(a){var c=this.l,b=typeof a;if("boolean"==b||null==a)c[a]=true;else{"number"!=b&&"string"!=b&&(b="object");var d="number"==b?a:ja+a,c=c[b]||(c[b]={});"object"==b?(c[d]||(c[d]=[])).push(a):
c[d]=true}}function ka(){return Y.pop()||{k:null,l:null,"false":false,"null":false,number:null,object:null,push:null,string:null,"true":false,undefined:false}}function O(a){a.length=0;D.length<la&&D.push(a)}function ma(a){var c=a.l;c&&ma(c);a.k=a.l=a.object=a.number=a.string=null;Y.length<la&&Y.push(a)}function y(a,c){var b;c||(c=0);typeof b=="undefined"&&(b=a?a.length:0);var d=-1;b=b-c||0;for(var e=Array(0>b?0:b);++d<b;)e[d]=a[c+d];return e}function f(){}function La(a){function c(){if(d){var a=y(d);P.apply(a,
arguments)}if(this instanceof c){var l=$(b.prototype),a=b.apply(l,a||arguments);return z(a)?a:l}return b.apply(e,a||arguments)}var b=a[0],d=a[2],e=a[4];aa(c,a);return c}function $(a){return z(a)?Q(a):{}}function na(a,c,b){if(typeof a!="function")return ba;if(typeof c=="undefined"||!("prototype"in a))return a;var d=a.__bindData__;if(typeof d=="undefined"&&(g.funcNames&&(d=!a.name),d=d||!g.funcDecomp,!d)){var e=Ma.call(a);g.funcNames||(d=!Na.test(e));d||(d=oa.test(e),aa(a,d))}if(false===d||true!==d&&d[1]&
1)return a;switch(b){case 1:return function(b){return a.call(c,b)};case 2:return function(b,d){return a.call(c,b,d)};case 3:return function(b,d,e){return a.call(c,b,d,e)};case 4:return function(b,d,e,f){return a.call(c,b,d,e,f)}}return pa(a,c)}function qa(a){function c(){var a=m?l:this;if(e){var s=y(e);P.apply(s,arguments)}if(Z||h)if(s||(s=y(arguments)),Z&&P.apply(s,Z),h&&s.length<f)return d|=16,qa([b,g?d:d&-4,s,null,l,f]);s||(s=arguments);p&&(b=a[n]);return this instanceof c?(a=$(b.prototype),s=
b.apply(a,s),z(s)?s:a):b.apply(a,s)}var b=a[0],d=a[1],e=a[2],Z=a[3],l=a[4],f=a[5],m=d&1,p=d&2,h=d&4,g=d&8,n=b;aa(c,a);return c}function ra(a,c,b){for(var d=-1,e=a?a.length:0,f=[];++d<e;){var l=a[d];if(l&&typeof l=="object"&&typeof l.length=="number"&&(A(l)||w(l))){c||(l=ra(l,c,b));var q=-1,m=l.length,p=f.length;for(f.length+=m;++q<m;)f[p++]=l[q]}else b||f.push(l)}return f}function E(a,c,b,d,e,f){if(b){var l=b(a,c);if(typeof l!="undefined")return!!l}if(a===c)return 0!==a||1/a==1/c;if(a===a&&!(a&&x[typeof a]||
c&&x[typeof c]))return false;if(null==a||null==c)return a===c;var q=u.call(a),m=u.call(c);q==F&&(q=G);m==F&&(m=G);if(q!=m)return false;switch(q){case sa:case ta:return+a==+c;case ua:return a!=+a?c!=+c:0==a?1/a==1/c:a==+c;case va:case H:return a==String(c)}m=q==R;if(!m){var p=v.call(a,"__wrapped__"),h=v.call(c,"__wrapped__");if(p||h)return E(p?a.__wrapped__:a,h?c.__wrapped__:c,b,d,e,f);if(q!=G)return false;q=!g.argsObject&&w(a)?Object:a.constructor;p=!g.argsObject&&w(c)?Object:c.constructor;if(q!=p&&!(B(q)&&q instanceof
q&&B(p)&&p instanceof p)&&"constructor"in a&&"constructor"in c)return false}q=!e;e||(e=D.pop()||[]);f||(f=D.pop()||[]);for(p=e.length;p--;)if(e[p]==a)return f[p]==c;var n=0,l=true;e.push(a);f.push(c);if(m){if(p=a.length,n=c.length,(l=n==p)||d)for(;n--;)if(m=p,h=c[n],d)for(;m--&&!(l=E(a[m],h,b,d,e,f)););else if(!(l=E(a[n],h,b,d,e,f)))break}else ca(c,function(c,h,m){if(v.call(m,h))return n++,l=v.call(a,h)&&E(a[h],c,b,d,e,f)}),l&&!d&&ca(a,function(a,c,b){if(v.call(b,c))return l=-1<--n});e.pop();f.pop();q&&
(O(e),O(f));return l}function da(a,c,b,d,e,f){var l=c&1,q=c&4,m=c&16,p=c&32;if(!(c&2||B(a)))throw new TypeError;m&&!b.length&&(c&=-17,m=b=false);p&&!d.length&&(c&=-33,p=d=false);var h=a&&a.__bindData__;return h&&true!==h?(h=y(h),h[2]&&(h[2]=y(h[2])),h[3]&&(h[3]=y(h[3])),!l||h[1]&1||(h[4]=e),!l&&h[1]&1&&(c|=8),!q||h[1]&4||(h[5]=f),m&&P.apply(h[2]||(h[2]=[]),b),p&&Oa.apply(h[3]||(h[3]=[]),d),h[1]|=c,da.apply(null,h)):(1==c||17===c?La:qa)([a,c,b,d,e,f])}function I(){r.h=ea;r.b=r.c=r.g=r.i="";r.e="t";r.j=true;
for(var a,c=0;a=arguments[c];c++)for(var b in a)r[b]=a[b];c=r.a;r.d=/^[^,]+/.exec(c)[0];a=Function;c="return function("+c+"){";b=r;var d="var n,t="+b.d+",E="+b.e+";if(!t)return E;"+b.i+";";b.b?(d+="var u=t.length;n=-1;if("+b.b+"){",g.unindexedChars&&(d+="if(s(t)){t=t.split('')}"),d+="while(++n<u){"+b.g+";}}else{"):g.nonEnumArgs&&(d+="var u=t.length;n=-1;if(u&&p(t)){while(++n<u){n+='';"+b.g+";}}else{");g.enumPrototypes&&(d+="var G=typeof t=='function';");g.enumErrorProps&&(d+="var F=t===k||t instanceof Error;");
var e=[];g.enumPrototypes&&e.push('!(G&&n=="prototype")');g.enumErrorProps&&e.push('!(F&&(n=="message"||n=="name"))');if(b.j&&b.f)d+="var C=-1,D=B[typeof t]&&v(t),u=D?D.length:0;while(++C<u){n=D[C];",e.length&&(d+="if("+e.join("&&")+"){"),d+=b.g+";",e.length&&(d+="}"),d+="}";else if(d+="for(n in t){",b.j&&e.push("m.call(t, n)"),e.length&&(d+="if("+e.join("&&")+"){"),d+=b.g+";",e.length&&(d+="}"),d+="}",g.nonEnumShadows){d+="if(t!==A){var i=t.constructor,r=t===(i&&i.prototype),f=t===J?I:t===k?j:L.call(t),x=y[f];";
for(k=0;7>k;k++)d+="n='"+b.h[k]+"';if((!(r&&x[n])&&m.call(t,n))",b.j||(d+="||(!x[n]&&t[n]!==A[n])"),d+="){"+b.g+"}";d+="}"}if(b.b||g.nonEnumArgs)d+="}";d+=b.c+";return E";return a("d,j,k,m,o,p,q,s,v,A,B,y,I,J,L",c+d+"}")(na,wa,fa,v,Pa,w,A,xa,r.f,S,x,n,H,Qa,u)}function J(a){return typeof a=="function"&&Ra.test(a)}function w(a){return a&&typeof a=="object"&&typeof a.length=="number"&&u.call(a)==F||false}function B(a){return typeof a=="function"}function z(a){return!(!a||!x[typeof a])}function xa(a){return typeof a=="string"||a&&typeof a=="object"&&u.call(a)==H||false}function ya(a,c,b){var d=[];c=f.createCallback(c,b,3);if(A(a)){b=-1;for(var e=a.length;++b<e;){var g=a[b];c(g,b,a)&&d.push(g)}}else T(a,function(a,b,e){c(a,b,e)&&d.push(a)});return d}function ga(a,c,b){c=f.createCallback(c,b,3);if(A(a)){b=-1;for(var d=a.length;++b<d;){var e=a[b];if(c(e,b,a))return e}}else{var g;T(a,function(a,b,d){if(c(a,b,d))return g=a,false});return g}}function za(a,c,b){if(c&&typeof b=="undefined"&&A(a)){b=-1;for(var d=a.length;++b<
d&&false!==c(a[b],b,a););}else T(a,c,b);return a}function ha(a,c,b){var d=-1,e=a?a.length:0,g=Array(typeof e=="number"?e:0);c=f.createCallback(c,b,3);if(A(a))for(;++d<e;)g[d]=c(a[d],d,a);else T(a,function(a,b,e){g[++d]=c(a,b,e)});return g}function Aa(a,c,b){if(typeof b=="number"){var d=a?a.length:0;b=0>b?Sa(0,d+b):b||0}else if(b)return b=Ba(a,c),a[b]===c?b:-1;return N(a,c,b)}function Ba(a,c,b,d){var e=0,g=a?a.length:e;b=b?f.createCallback(b,d,1):ba;for(c=b(c);e<g;)d=e+g>>>1,b(a[d])<c?e=d+1:g=d;return e}
function Ca(a,c,b,d){typeof c!="boolean"&&null!=c&&(d=b,b=typeof c!="function"&&d&&d[c]===a?null:c,c=false);null!=b&&(b=f.createCallback(b,d,3));d=-1;var e,g=(g=f.indexOf)===Aa?N:g;e=g;var g=a?a.length:0,l=[],q=!c&&g>=Ta&&e===N,m=b||q?D.pop()||[]:l;if(q){e=m;var m=-1,p=e.length,h=e[0],n=e[p/2|0],r=e[p-1];if(h&&typeof h=="object"&&n&&typeof n=="object"&&r&&typeof r=="object")m=false;else{h=ka();h["false"]=h["null"]=h["true"]=h.undefined=false;n=ka();n.k=e;n.l=h;for(n.push=Ka;++m<p;)n.push(e[m]);m=n}e=Ja}for(;++d<
g;)if(p=a[d],h=b?b(p,d,a):p,c?!d||m[m.length-1]!==h:0>e(m,h))(b||q)&&m.push(h),l.push(p);q?(O(m.k),ma(m)):b&&O(m);return l}function pa(a,c){return 2<arguments.length?da(a,17,y(arguments,2),null,c):da(a,1,null,null,c)}function ba(a){return a}function Da(){}function Ea(a){return function(c){return c[a]}}var D=[],Y=[],Pa={},ja=+new Date+"",Ta=75,la=40,Na=/^\s*function[ \n\r\t]+\w/,oa=/\bthis\b/,ea="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),
F="[object Arguments]",R="[object Array]",sa="[object Boolean]",ta="[object Date]",wa="[object Error]",ua="[object Number]",G="[object Object]",va="[object RegExp]",H="[object String]",Fa={configurable:false,enumerable:false,value:null,writable:false},r={a:"",b:null,c:"",d:"",e:"",v:null,g:"",h:null,support:null,i:"",j:false},x={"boolean":false,"function":true,object:true,number:false,string:false,undefined:false},K=x[typeof window]&&window||this,U=x[typeof exports]&&exports&&!exports.nodeType&&exports,V=x[typeof module]&&module&&
!module.nodeType&&module,Ua=V&&V.exports===U&&U,t=x[typeof global]&&global;!t||t.global!==t&&t.window!==t||(K=t);var ia=[],fa=Error.prototype,S=Object.prototype,Qa=String.prototype,u=S.toString,Ra=RegExp("^"+String(u).replace(/[.*+?^${}()|[\]\\]/g,"\\$&").replace(/toString| for [^\]]+/g,".*?")+"$"),Ma=Function.prototype.toString,v=S.hasOwnProperty,P=ia.push,W=S.propertyIsEnumerable,Oa=ia.unshift,Ga=function(){try{var a={},c=J(c=Object.defineProperty)&&c,b=c(a,a,a)&&c}catch(d){}return b}(),Q=J(Q=Object.create)&&
Q,C=J(C=Array.isArray)&&C,X=J(X=Object.keys)&&X,Sa=Math.max,n={};n[R]=n[ta]=n[ua]={constructor:true,toLocaleString:true,toString:true,valueOf:true};n[sa]=n[H]={constructor:true,toString:true,valueOf:true};n[wa]=n["[object Function]"]=n[va]={constructor:true,toString:true};n[G]={constructor:true};(function(){for(var a=ea.length;a--;){var c=ea[a],b;for(b in n)v.call(n,b)&&!v.call(n[b],c)&&(n[b][c]=false)}})();var g=f.support={};(function(){function a(){this.x=1}var c={0:1,length:1},b=[];a.prototype={valueOf:1,y:1};for(var d in new a)b.push(d);
for(d in arguments);g.argsClass=u.call(arguments)==F;g.argsObject=arguments.constructor==Object&&!(arguments instanceof Array);g.enumErrorProps=W.call(fa,"message")||W.call(fa,"name");g.enumPrototypes=W.call(a,"prototype");g.funcDecomp=!J(K.m)&&oa.test(function(){return this});g.funcNames=typeof Function.name=="string";g.nonEnumArgs=0!=d;g.nonEnumShadows=!/valueOf/.test(b);g.spliceObjects=(ia.splice.call(c,0,1),!c[0]);g.unindexedChars="xx"!="x"[0]+Object("x")[0]})(1);Q||($=function(){function a(){}
return function(c){if(z(c)){a.prototype=c;var b=new a;a.prototype=null}return b||K.Object()}}());var aa=Ga?function(a,c){Fa.value=c;Ga(a,"__bindData__",Fa)}:Da;g.argsClass||(w=function(a){return a&&typeof a=="object"&&typeof a.length=="number"&&v.call(a,"callee")&&!W.call(a,"callee")||false});var A=C||function(a){return a&&typeof a=="object"&&typeof a.length=="number"&&u.call(a)==R||false},Ha=I({a:"z",e:"[]",i:"if(!(B[typeof z]))return E",g:"E.push(n)"}),L=X?function(a){return z(a)?g.enumPrototypes&&typeof a=="function"||g.nonEnumArgs&&a.length&&w(a)?Ha(a):X(a):[]}:Ha,t={a:"g,e,K",i:"e=e&&typeof K=='undefined'?e:d(e,K,3)",b:"typeof u=='number'",v:L,g:"if(e(t[n],n,g)===false)return E"},M={a:"z,H,l",i:"var a=arguments,b=0,c=typeof l=='number'?2:a.length;while(++b<c){t=a[b];if(t&&B[typeof t]){",v:L,g:"if(typeof E[n]=='undefined')E[n]=t[n]",c:"}}"},C={i:"if(!B[typeof t])return E;"+t.i,b:false},T=I(t),M=I(M,{i:M.i.replace(";",";if(c>3&&typeof a[c-2]=='function'){var e=d(a[--c-1],a[c--],2)}else if(c>2&&typeof a[c-1]=='function'){e=a[--c]}"),
g:"E[n]=e?e(E[n],t[n]):t[n]"}),ca=I(t,C,{j:false}),Ia=I(t,C);B(/x/)&&(B=function(a){return typeof a=="function"&&"[object Function]"==u.call(a)});f.assign=M;f.bind=pa;f.createCallback=function(a,c,b){var d=typeof a;if(null==a||"function"==d)return na(a,c,b);if("object"!=d)return Ea(a);var e=L(a),f=e[0],g=a[f];return 1!=e.length||g!==g||z(g)?function(c){for(var b=e.length,d=false;b--&&(d=E(c[e[b]],a[e[b]],null,true)););return d}:function(a){a=a[f];return g===a&&(0!==g||1/g==1/a)}};f.filter=ya;f.flatten=function(a,
c,b,d){typeof c!="boolean"&&null!=c&&(d=b,b=typeof c!="function"&&d&&d[c]===a?null:c,c=false);null!=b&&(a=ha(a,b,d));return ra(a,c)};f.forEach=za;f.forIn=ca;f.forOwn=Ia;f.keys=L;f.map=ha;f.property=Ea;f.uniq=Ca;f.values=function(a){for(var c=-1,b=L(a),d=b.length,e=Array(d);++c<d;)e[c]=a[b[c]];return e};f.collect=ha;f.each=za;f.extend=M;f.select=ya;f.unique=Ca;f.find=ga;f.identity=ba;f.indexOf=Aa;f.isArguments=w;f.isArray=A;f.isEmpty=function(a){var c=true;if(!a)return c;var b=u.call(a),d=a.length;if(b==
R||b==H||(g.argsClass?b==F:w(a))||b==G&&typeof d=="number"&&B(a.splice))return!d;Ia(a,function(){return c=false});return c};f.isFunction=B;f.isObject=z;f.isString=xa;f.noop=Da;f.sortedIndex=Ba;f.detect=ga;f.findWhere=ga;f.VERSION="2.4.1";typeof define=="function"&&typeof define.amd=="object"&&define.amd?(K._=f, define(function(){return f})):U&&V?Ua?(V.exports=f)._=f:U._=f:K._=f}.call(this));
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],30:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var lo, flatten, normalize, toString$ = {}.toString;
  lo = require('./lodash_lite');
  flatten = function(items, res){
    var i$, len$, item;
    if (!res) {
      res = [];
    }
    if (toString$.call(items).slice(8, -1) === 'String') {
      return items;
    }
    for (i$ = 0, len$ = items.length; i$ < len$; ++i$) {
      item = items[i$];
      if (toString$.call(item).slice(8, -1) === 'Array') {
        flatten(item, res);
      } else {
        res.push(item);
      }
    }
    return res;
  };
  normalize = function(items, recursed){
    var normalized;
    normalized = (function(){
      switch (toString$.call(items).slice(8, -1)) {
      case 'Function':
        return normalize(items(), true);
      case 'String':
        if (recursed) {
          return items;
        } else {
          return [items];
        }
        break;
      case 'Array':
        return lo.map(items, function(item){
          return normalize(item, true);
        });
      default:
        throw Error(items + " " + toString$.call(items).slice(8, -1) + " can't be normalized, must be a Function, String or Array");
      }
    }());
    return flatten(normalized);
  };
  module.exports = normalize;
}).call(this);

},{"./lodash_lite":29}],31:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  module.exports = {
    camelCase: function(s){
      return (s || '').toLowerCase().replace(/(\b|-)\w/g, function(m){
        return m.toUpperCase().replace(/-/, '');
      });
    }
  };
}).call(this);

},{}]},{},[2]);
