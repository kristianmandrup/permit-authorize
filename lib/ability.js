// Generated by LiveScript 1.2.0
(function(){
  var requires, lo, permitFilter, Allower, AccessRequest, Debugger, Ability;
  requires = require('../requires');
  lo = require('lodash');
  permitFilter = requires.permit('permit_filter');
  Allower = requires.lib('allower');
  AccessRequest = requires.lib('access_request');
  Debugger = requires.lib('debugger');
  module.exports = Ability = (function(){
    Ability.displayName = 'Ability';
    var prototype = Ability.prototype, constructor = Ability;
    importAll$(prototype, arguments[0]);
    function Ability(user){
      this.user = user;
    }
    prototype.accessObj = function(accessRequest){
      return lo.merge(accessRequest, {
        user: this.user
      });
    };
    prototype.permits = function(accessRequest){
      return permitFilter.filter(accessRequest);
    };
    prototype.allower = function(accessRequest){
      var a;
      a = new Allower(this.accessObj(accessRequest));
      if (this.debugging) {
        a.debugOn();
      }
      return a;
    };
    prototype.allowedFor = function(accessRequest){
      return this.allower(accessRequest).allows();
    };
    prototype.notAllowedFor = function(accessRequest){
      return this.allower(accessRequest).disallows();
    };
    prototype.can = function(accessRequest){
      var c;
      this.debug('can', accessRequest);
      c = this.allowedFor(accessRequest);
      this.debug('can-res', c);
      return c;
    };
    prototype.cannot = function(access){
      this.debug('cannot', accessRequest);
      return this.notAllowedFor(accessRequest);
    };
    return Ability;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
