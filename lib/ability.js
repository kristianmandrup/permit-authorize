// Generated by LiveScript 1.2.0
(function(){
  var requires, lo, permitFilter, Allower, AccessRequest, Debugger, ArgNormalizer, Ability, toString$ = {}.toString, slice$ = [].slice;
  requires = require('../requires');
  lo = require('lodash');
  permitFilter = requires.permit('permit_filter');
  Allower = requires.lib('allower');
  AccessRequest = requires.lib('access_request');
  Debugger = requires.lib('debugger');
  ArgNormalizer = requires.ability('arg-normalizer');
  module.exports = Ability = (function(){
    Ability.displayName = 'Ability';
    var prototype = Ability.prototype, constructor = Ability;
    importAll$(prototype, arguments[0]);
    function Ability(user){
      this.user = user;
      this.validateUser();
    }
    prototype.validateUser = function(){
      if (this.user === void 8) {
        throw new Error("Ability must be for a User, was void");
      }
      if (toString$.call(this.user).slice(8, -1) !== 'Object') {
        throw new Error("User must be an Object, was " + this.user);
      }
    };
    prototype.permits = function(){
      return permitFilter.filter(this.accessRequest());
    };
    prototype.allower = function(){
      return new Allower(this.accessRequest());
    };
    prototype.allowed = function(){
      return this.allower().allows();
    };
    prototype.notAllowed = function(){
      return this.allower().disallows();
    };
    prototype.can = function(){
      this.args = slice$.call(arguments);
      return this.authorize('can');
    };
    prototype.cannot = function(){
      this.args = slice$.call(arguments);
      return this.authorize('cannot');
    };
    prototype.authResult = function(){
      return this._result || (this._result = this.act === 'can'
        ? this.allowed()
        : this.notAllowed());
    };
    prototype.authorize = function(act){
      this.act = act;
      this.clear();
      this.debug('can result:', this.authResult());
      return this.authResult();
    };
    prototype.clear = function(){
      this._result = void 8;
      return this._accessRequest = void 8;
    };
    prototype.accessRequest = function(){
      return this._accessRequest || (this._accessRequest = AccessRequest.from(this.normalizedArgs(), this.debugging));
    };
    prototype.normalizedArgs = function(){
      this.args = lo.flatten(this.args);
      this.debug('normalize args', this.args);
      return new ArgNormalizer(this.args).setUser(this.user).normalized();
    };
    return Ability;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
