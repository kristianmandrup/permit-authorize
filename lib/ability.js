// Generated by LiveScript 1.2.0
(function(){
  var requires, lo, permitFilter, Allower, AccessRequest, Debugger, Ability;
  requires = require('../requires');
  lo = require('lodash');
  permitFilter = requires.permit('permit_filter');
  Allower = requires.lib('allower');
  AccessRequest = requires.lib('access_request');
  Debugger = requires.lib('debugger');
  module.exports = Ability = (function(){
    Ability.displayName = 'Ability';
    var prototype = Ability.prototype, constructor = Ability;
    importAll$(prototype, arguments[0]);
    function Ability(user){
      this.user = user;
      this.userKey();
    }
    Ability.clearCache = function(){
      constructor.canCache = {};
      return constructor.cannotCache = {};
    };
    Ability.canCache = function(){
      return this._canCache || (this._canCache = {});
    };
    Ability.cannotCache = function(){
      return this._cannotCache || (this._cannotCache = {});
    };
    prototype.userHash = requires.accessRequest('fingerprints').userHash;
    prototype.userKey = function(){
      return this.userKey = this.userHash();
    };
    prototype.accessObj = function(accessRequest){
      return lo.merge(accessRequest, {
        user: this.user
      });
    };
    prototype.permits = function(accessRequest){
      return permitFilter.filter(accessRequest);
    };
    prototype.allower = function(accessRequest){
      var a;
      a = new Allower(this.accessObj(accessRequest));
      if (this.debugging) {
        a.debugOn();
      }
      return a;
    };
    prototype.allowedFor = function(accessRequest){
      return this.allower(accessRequest).allows();
    };
    prototype.notAllowedFor = function(accessRequest){
      return this.allower(accessRequest).disallows();
    };
    prototype.can = function(accessRequest){
      var cachedRes, result;
      this.debug('can', accessRequest);
      cachedRes = this.cachedResult('can', accessRequest);
      if (cachedRes !== void 8) {
        return cachedRes;
      }
      result = this.allowedFor(accessRequest);
      this.cacheResult('can', accessRequest, result);
      this.debug('can-res', result);
      return result;
    };
    prototype.cannot = function(accessRequest){
      var cachedRes, result;
      this.debug('cannot', accessRequest);
      cachedRes = this.cachedResult('cannot', accessRequest);
      if (cachedRes !== void 8) {
        return cachedRes;
      }
      result = this.notAllowedFor(accessRequest);
      this.cacheResult('cannot', accessRequest, result);
      this.debug('cannot-res', result);
      return result;
    };
    prototype.cachedResult = function(act, accessRequest){
      var cacheRepo, accReqKey;
      cacheRepo = this[act + "Cache"]();
      accReqKey = accessRequest.accessHash();
      return cacheRepo[accReqKey];
    };
    prototype.cacheResult = function(act, accessRequest, result){
      var cacheRepo, accReqKey;
      cacheRepo = this[act + "Cache"]();
      accReqKey = accessRequest.accessHash();
      cacheRepo[accReqKey] = result;
      return result;
    };
    prototype.canCache = function(){
      return Ability.canCache()[this.userKey];
    };
    prototype.cannotCache = function(){
      return Ability.cannotCache()[this.userKey];
    };
    return Ability;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
