// Generated by LiveScript 1.2.0
(function(){
  var requires, Debugger, AccessRequest, Ability, Authorizer, toString$ = {}.toString;
  requires = require('../requires');
  Debugger = requires.lib('debugger');
  AccessRequest = requires.lib('access_request');
  Ability = requires.lib('ability');
  module.exports = Authorizer = (function(){
    Authorizer.displayName = 'Authorizer';
    var prototype = Authorizer.prototype, constructor = Authorizer;
    importAll$(prototype, arguments[0]);
    function Authorizer(user){
      this.user = user;
    }
    prototype.run = function(action, subject, context){
      if (toString$.call(action).slice(8, -1) === 'Object') {
        return this.run(action.action, action.subject, action.context);
      }
      console.log("ACTION type", toString$.call(action).slice(8, -1));
      this.debug('run', action, subject, context);
      return this.can(action, subject, context);
    };
    prototype.createAbility = function(){
      var a;
      a = new Ability(this.user);
      if (this.debugging) {
        a.debugOn();
      }
      return a;
    };
    prototype.ability = function(){
      return this.currentAbility || (this.currentAbility = this.createAbility());
    };
    prototype.access = function(action, subject, ctx){
      var ar;
      ar = new AccessRequest(this.user, action, subject, ctx, this.debugging);
      if (this.debugging) {
        ar.debugOn();
      }
      return ar;
    };
    prototype.authorize = function(action, subject, context){
      this.debug('authorize', action, subject, context);
      return this.ability().authorize(this.access(action, subject, context));
    };
    prototype.can = function(action, subject, context){
      this.debug('can', action, subject, context);
      return this.ability().can(this.access(action, subject, context));
    };
    prototype.cannot = function(action, subject, context){
      this.debug('cannot', action, subject, context);
      return this.ability().cannot(this.access(action, subject, context));
    };
    return Authorizer;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
