// Generated by LiveScript 1.2.0
(function(){
  var requires, lo, Debugger, BaseMatcher, UserMatcher, toString$ = {}.toString;
  requires = require('../../requires');
  lo = requires.util('lodash-lite');
  Debugger = requires.lib('debugger');
  BaseMatcher = requires.matcher('base');
  UserMatcher = (function(superclass){
    var prototype = extend$((import$(UserMatcher, superclass).displayName = 'UserMatcher', UserMatcher), superclass).prototype, constructor = UserMatcher;
    function UserMatcher(accessRequest){
      this.accessRequest = accessRequest;
      UserMatcher.superclass.apply(this, arguments);
      this.setUser();
    }
    prototype.setUser = function(){
      return this.user || (this.user = this.accessRequest != null
        ? this.accessRequest.user
        : {});
    };
    prototype.match = function(user){
      if (toString$.call(user).slice(8, -1) === 'Function') {
        return user.call(this.user);
      }
      if (this.deathMatch('user', user)) {
        return true;
      }
      return this.intersect.on(user, this.user);
    };
    return UserMatcher;
  }(BaseMatcher));
  lo.extend(UserMatcher, Debugger);
  module.exports = UserMatcher;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
