// Generated by LiveScript 1.2.0
(function(){
  var requires, normalize, Debugger, AccessRequest, toString$ = {}.toString;
  requires = require('../requires');
  normalize = requires.util('normalize');
  Debugger = requires.lib('debugger');
  module.exports = AccessRequest = (function(){
    AccessRequest.displayName = 'AccessRequest';
    var prototype = AccessRequest.prototype, constructor = AccessRequest;
    importAll$(prototype, arguments[0]);
    AccessRequest.from = function(obj){
      return new AccessRequest(obj.user, obj.action, obj.subject, obj.ctx);
    };
    function AccessRequest(user, action, subject, ctx, debug){
      this.user = user;
      this.action = action;
      this.subject = subject;
      this.ctx = ctx;
      if (debug) {
        this.debugOn();
      }
      this.debug('create AccessRequest user:', this.user, 'action:', this.action, 'subject:', this.subject, 'ctx:', this.ctx);
      this.validate();
      this.normalize();
      this;
    }
    prototype.normalize = function(){
      this.debug('normalize action', this.action);
      this.action = normalize(this.action);
      if (toString$.call(this.subject).slice(8, -1) !== 'Object') {
        this.debug('normalize subject', this.subject);
        return this.subject = normalize(this.subject);
      }
    };
    prototype.validate = function(){
      if (toString$.call(this.action).slice(8, -1) !== 'String') {
        throw new Error("Missing action name. Must authorize an action to be performed on a subject, was: " + this.action + ", " + toString$.call(this.action).slice(8, -1));
      }
      if (this.subject == null) {
        throw new Error("Missing subject. Must authorize a subject to perform an action: " + this.action);
      }
      if (toString$.call(this.user).slice(8, -1) !== 'Object') {
        throw new Error("Missing user. Must authorize a user to perform an action: " + this.action + " on the subject");
      }
    };
    return AccessRequest;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
