// Generated by LiveScript 1.2.0
(function(){
  var RulesAccessor, camelCase, Debugger, StaticApplier, DynamicApplier, PermitRuleApplier, toString$ = {}.toString;
  RulesAccessor = require('../../rule').RulesAccessor;
  camelCase = require('../../util').string.camelCase;
  Debugger = require('../../util').Debugger;
  StaticApplier = require('../../rule').apply.StaticApplier;
  DynamicApplier = require('../../rule').apply.StaticApplier;
  module.exports = PermitRuleApplier = (function(){
    PermitRuleApplier.displayName = 'PermitRuleApplier';
    var prototype = PermitRuleApplier.prototype, constructor = PermitRuleApplier;
    importAll$(prototype, arguments[0]);
    function PermitRuleApplier(permit, accessRequest, debugging){
      this.permit = permit;
      this.accessRequest = accessRequest;
      this.debugging = debugging;
      this.appliedRules = false;
      this.rules = this.permit.rules;
    }
    prototype.clean = function(){
      return this.appliedRules = false;
    };
    prototype.staticApplier = function(){
      return new StaticApplier(this.executionContext(), this.rules, this.debugging);
    };
    prototype.dynamicApplier = function(){
      return new DynamicApplier(this.executionContext(), this.rules, this.accessRequest, this.debugging);
    };
    prototype.executionContext = function(){
      return this._xcuter || (this._xcuter = this.permit.ruleRepo);
    };
    prototype.ruleApplier = function(){
      return new this.rulesApplier.clazz(this.permit, this.accessRequest, this.debugging);
    };
    prototype.validateAccessRequest = function(){
      if (toString$.call(this.accessRequest).slice(8, -1) !== 'Object') {
        throw Error("Invalid access reques " + this.accessRequest + ", must be an Object");
      }
    };
    prototype.applierFor = function(type){
      return this[type + "Applier"]();
    };
    prototype.apply = function(type, force){
      type == null && (type = 'static');
      return this["apply" + camelCase(type)](force);
    };
    prototype.applyDynamic = function(){
      return this.applierFor('dynamic').applyRules();
    };
    prototype.applyStatic = function(force){
      if (!(this.appliedRules && !force)) {
        this.debug('permit apply static rules');
        this.applierFor('static').applyRules();
        return this.appliedStaticRules = true;
      } else {
        return this.debug('static rules already applied before', this.appliedStaticRules);
      }
    };
    return PermitRuleApplier;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
