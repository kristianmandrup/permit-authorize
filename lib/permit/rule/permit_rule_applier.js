// Generated by LiveScript 1.2.0
(function(){
  var RulesAccessor, PermitRuleApplier, toString$ = {}.toString;
  RulesAccessor = require('../../rule').RulesAccessor;
  module.exports = PermitRuleApplier = (function(){
    PermitRuleApplier.displayName = 'PermitRuleApplier';
    var prototype = PermitRuleApplier.prototype, constructor = PermitRuleApplier;
    function PermitRuleApplier(permit, debugging){
      this.permit = permit;
      this.debugging = debugging;
      this.appliedRules = false;
      if (this.debugging) {
        this.debugOn();
      }
    }
    prototype.clean = function(){
      return this.appliedRules = false;
    };
    prototype.rulesApplier = {
      clazz: RulesAccessor
    };
    prototype.ruleApplier = function(){
      return new this.rulesApplier.clazz(this.permit, this.accessRequest, this.debugging);
    };
    prototype.validateAccessRequest = function(){
      if (toString$.call(this.accessRequest).slice(8, -1) !== 'Object') {
        throw Error("Invalid access reques " + this.accessRequest + ", must be an Object");
      }
    };
    prototype.applyRules = function(force){
      if (!(this.appliedRules && !force)) {
        this.debug('permit apply rules', this.accessRequest);
        this.ruleApplier(this.accessRequest).applyRules();
        return this.appliedRules = true;
      } else {
        return this.debug('rules already applied before', this.appliedRules);
      }
    };
    return PermitRuleApplier;
  }());
}).call(this);
