// Generated by LiveScript 1.2.0
(function(){
  var ActRuleProcessor, RuleProcessor;
  ActRuleProcessor = require('./act_rule_processor');
  module.exports = RuleProcessor = (function(){
    RuleProcessor.displayName = 'RuleProcessor';
    var prototype = RuleProcessor.prototype, constructor = RuleProcessor;
    function RuleProcessor(ruleKey, rule){
      this.ruleKey = ruleKey;
      this.rule = rule;
    }
    prototype.process = function(){
      this.debug("processRule", this.ruleKey, this.rule);
      return this.processedRules[this.ruleKey] = this.processedRule;
    };
    prototype.processedRule = function(){
      var actKey;
      this.debug("processed-rule");
      actKey = Object.keys(rule)[0];
      if (!['can', 'cannot'].contains(actKey)) {
        throw Error("Not a valid rule key, must be 'can' or 'cannot', was: " + key);
      }
      return this.processActRule(actKey, rule[actKey]);
    };
    prototype.processActRule = function(){
      return new ActRuleProcessor(act, actRule).process();
    };
    return RuleProcessor;
  }());
}).call(this);
