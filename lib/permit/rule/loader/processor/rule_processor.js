// Generated by LiveScript 1.2.0
(function(){
  var ActRuleProcessor, Debugger, contains, RuleProcessor;
  ActRuleProcessor = require('./act_rule_processor');
  Debugger = require('../../../../util').Debugger;
  contains = require('../../../../util').array.contains;
  module.exports = RuleProcessor = (function(){
    RuleProcessor.displayName = 'RuleProcessor';
    var prototype = RuleProcessor.prototype, constructor = RuleProcessor;
    importAll$(prototype, arguments[0]);
    function RuleProcessor(ruleKey, rule, debugging){
      this.ruleKey = ruleKey;
      this.rule = rule;
      this.debugging = debugging;
      this.processedRules = {};
    }
    prototype.process = function(){
      this.debug("processRule", this.ruleKey, this.rule);
      this.processedRules[this.ruleKey] = this.processActs();
      return this.processedRules;
    };
    prototype.processActs = function(){
      return [processAct('can', processAct('cannot'))].filter(function(item){
        return !deepEq$(item, void 8, '===');
      });
    };
    prototype.processAct = function(key){
      _validateAct(key);
      return this.processActRule(actKey, this.rule[key]);
    };
    prototype.processActRule = function(act, actRule){
      return new ActRuleProcessor(act, actRule).process();
    };
    prototype._validateAct = function(key){
      if (!contains(['can', 'cannot'], key)) {
        throw Error("Not a valid rule key, must be 'can' or 'cannot', was: " + key);
      }
    };
    return RuleProcessor;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
  function deepEq$(x, y, type){
    var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
        has = function (obj, key) { return hasOwnProperty.call(obj, key); };
    var first = true;
    return eq(x, y, []);
    function eq(a, b, stack) {
      var className, length, size, result, alength, blength, r, key, ref, sizeB;
      if (a == null || b == null) { return a === b; }
      if (a.__placeholder__ || b.__placeholder__) { return true; }
      if (a === b) { return a !== 0 || 1 / a == 1 / b; }
      className = toString.call(a);
      if (toString.call(b) != className) { return false; }
      switch (className) {
        case '[object String]': return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source &&
                 a.global == b.global &&
                 a.multiline == b.multiline &&
                 a.ignoreCase == b.ignoreCase;
      }
      if (typeof a != 'object' || typeof b != 'object') { return false; }
      length = stack.length;
      while (length--) { if (stack[length] == a) { return true; } }
      stack.push(a);
      size = 0;
      result = true;
      if (className == '[object Array]') {
        alength = a.length;
        blength = b.length;
        if (first) { 
          switch (type) {
          case '===': result = alength === blength; break;
          case '<==': result = alength <= blength; break;
          case '<<=': result = alength < blength; break;
          }
          size = alength;
          first = false;
        } else {
          result = alength === blength;
          size = alength;
        }
        if (result) {
          while (size--) {
            if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
          }
        }
      } else {
        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
          return false;
        }
        for (key in a) {
          if (has(a, key)) {
            size++;
            if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
          }
        }
        if (result) {
          sizeB = 0;
          for (key in b) {
            if (has(b, key)) { ++sizeB; }
          }
          if (first) {
            if (type === '<<=') {
              result = size < sizeB;
            } else if (type === '<==') {
              result = size <= sizeB
            } else {
              result = size === sizeB;
            }
          } else {
            first = false;
            result = size === sizeB;
          }
        }
      }
      stack.pop();
      return result;
    }
  }
}).call(this);
