// Generated by LiveScript 1.2.0
(function(){
  var ActRuleProcessor;
  module.exports = ActRuleProcessor = (function(){
    ActRuleProcessor.displayName = 'ActRuleProcessor';
    var prototype = ActRuleProcessor.prototype, constructor = ActRuleProcessor;
    function ActRuleProcessor(act, rule){
      var rules;
      this.act = act;
      this.rule = rule;
      rules = [];
    }
    prototype.process = function(){
      var action, ref$, subject, fun;
      for (action in ref$ = this.rule) {
        subject = ref$[action];
        fun = this.resolve(this.act, action, subject);
        rules.push(fun);
      }
      return function(){
        var i$, ref$, len$, rule, results$ = [];
        for (i$ = 0, len$ = (ref$ = rules).length; i$ < len$; ++i$) {
          rule = ref$[i$];
          results$.push(this.rule());
        }
        return results$;
      };
    };
    prototype.resolve = function(act, action, subject){
      return function(){
        return this["u" + act](action, subject);
      };
    };
    return ActRuleProcessor;
  }());
}).call(this);
