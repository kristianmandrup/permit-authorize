// Generated by LiveScript 1.2.0
(function(){
  var RuleMatchesProcessor, toString$ = {}.toString;
  module.exports = RuleMatchesProcessor = (function(){
    RuleMatchesProcessor.displayName = 'RuleMatchesProcessor';
    var prototype = RuleMatchesProcessor.prototype, constructor = RuleMatchesProcessor;
    function RuleMatchesProcessor(obj){
      this.obj = obj;
      if (!this.obj['matches']) {
        throw new Error("Rules are missing a 'matches' root key");
      }
      this.rules = this.obj['matches'];
      this.processedRules = {};
      process();
    }
    prototype.result = function(){
      return {
        'matches': this.processedRules
      };
    };
    prototype.process = function(){
      var key, results$ = [];
      this.debug("process", this.rules);
      for (key in this.rules) {
        this.validate(key);
        results$.push(this.processedRules[key] = processRule(this.rules[key]));
      }
      return results$;
    };
    prototype.validate = function(key){
      if (!valid(key)) {
        throw new Error("Invalid rule identifier " + key + ", must be one of " + validKeys);
      }
    };
    prototype.validKeys = ['role', 'roles', 'subject', 'subjects', 'action', 'actions', 'user', 'ctx'];
    prototype.valid = function(key){
      if (find(validKeys, key)) {
        return true;
      } else {
        return false;
      }
    };
    prototype.processMatches = function(matches){
      if (!validType(matches)) {
        throw new Error("Invalid matches type: " + matches);
      }
      if (!validateValues(matches)) {
        throw new Error("Invalid matches value: " + matches);
      }
    };
    prototype.validType = function(value){
      return find(['String', 'Array'], toString$.call(value).slice(8, -1));
    };
    prototype.validateValues = function(matches){
      return validateStr(matches) || validateList(matches);
    };
    prototype.validateStr = function(value){
      if (toString$.call(matches).slice(8, -1) !== 'String') {
        return false;
      }
      return true;
    };
    prototype.validateList = function(value){
      if (toString$.call(matches).slice(8, -1) !== 'Array') {
        return false;
      }
      return true;
    };
    return RuleMatchesProcessor;
  }());
}).call(this);
