// Generated by LiveScript 1.2.0
(function(){
  var RuleMatchesProcessor, RulesProcessor, PermitParser;
  RuleMatchesProcessor = require('./matches_processor');
  RulesProcessor = require('./rules_processor');
  module.exports = PermitParser = (function(){
    PermitParser.displayName = 'PermitParser';
    var prototype = PermitParser.prototype, constructor = PermitParser;
    function PermitParser(obj){
      this.obj = obj;
    }
    prototype.matchesClazz = RuleMatchesProcessor;
    prototype.rulesClazz = RulesProcessor;
    prototype.parseMatches = function(){
      return new this.matchesClazz(this.obj).process();
    };
    prototype.parseRules = function(){
      return new this.rulesClazz(this.obj).process();
    };
    prototype.tryParseRules = function(){
      var e;
      try {
        return this.parseRules();
      } catch (e$) {
        e = e$;
        return this.parseRule();
      }
    };
    prototype.parseRule = function(){
      return new this.rulesClazz(this.obj).process();
    };
    prototype.parse = function(){
      return this.parsedPermit = import$(this.parseMatches(), this.tryParseRules());
    };
    return PermitParser;
  }());
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
