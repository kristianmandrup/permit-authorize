// Generated by LiveScript 1.2.0
(function(){
  var RuleProcessor, RulesProcessor;
  RuleProcessor = require('./rule_processor');
  module.exports = RulesProcessor = (function(){
    RulesProcessor.displayName = 'RulesProcessor';
    var prototype = RulesProcessor.prototype, constructor = RulesProcessor;
    function RulesProcessor(obj){
      this.obj = obj;
      if (!this.obj['rules']) {
        throw new Error("Rules are missing a 'rules' root key");
      }
      this.rules = this.obj['rules'];
      process();
    }
    prototype.process = function(){
      var key;
      this.debug("process", this.rules);
      for (key in this.rules) {
        this.validate(key);
        this.processedRules[key] = processRule(this.rules[key]);
      }
      return this.processedRules;
    };
    prototype.validate = function(key){
      if (!valid(key)) {
        throw new Error("Invalid rule identifier " + key + ", must be one of " + validKeys);
      }
    };
    prototype.validKeys = ['user', 'action', 'subject', 'ctx'];
    prototype.valid = function(key){
      if (find(validKeys, key)) {
        return true;
      } else {
        return false;
      }
    };
    prototype.ruleClazz = RuleProcessor;
    prototype.processRule = function(rule){
      return new this.ruleClazz(rule).process();
    };
    return RulesProcessor;
  }());
}).call(this);
