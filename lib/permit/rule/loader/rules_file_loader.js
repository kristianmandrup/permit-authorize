// Generated by LiveScript 1.2.0
(function(){
  var fs, RulesFileLoader, toString$ = {}.toString;
  fs = require('fs');
  module.exports = RulesFileLoader = (function(){
    RulesFileLoader.displayName = 'RulesFileLoader';
    var prototype = RulesFileLoader.prototype, constructor = RulesFileLoader;
    function RulesFileLoader(filePath, callback, options){
      this.filePath = filePath;
      this.callback = callback;
      options == null && (options = {});
      if (!this.filePath) {
        throw Error("Error: Missing filepath: " + this.file_path);
      }
      this.validateCallback(this.callback);
      this.async = options.async;
    }
    prototype.validateCallback = function(cb){
      if (toString$.call(cb).slice(8, -1) !== 'Function') {
        throw new Error("Callback option must be a function, was: " + cb);
      }
    };
    prototype.loadRules = function(options){
      var async;
      async = options.async || this.async;
      this.debug("loadRules", this.filePath);
      if (async) {
        return this.loadRulesAsync();
      } else {
        return this.loadRulesSync();
      }
    };
    prototype.loadRulesAsync = function(){
      var self;
      this.debug('loadRulesAsync');
      self = this;
      fs.readFile(this.filePath, 'utf8', function(err, data){
        var rules;
        self.debug(err, data);
        if (err) {
          this.debug(err);
          throw Error("Error loading file: " + this.filePath + " - " + err);
        }
        self.debug("data", data);
        rules = JSON.parse(data);
        self.debug("loaded-rules", rules);
        return this.callback(rules);
      });
      return this;
    };
    prototype.loadRulesSync = function(){
      var data, rules, err;
      try {
        data = fs.readFileSync(this.filePath, 'utf8', function(){});
        this.debug("data", data);
        if (toString$.call(data).slice(8, -1) !== 'String') {
          throw Error;
        }
        rules = JSON.parse(data);
        this.debug("loaded-rules", rules);
        this.loadedRules = rules;
        this.callback(rules);
        return this;
      } catch (e$) {
        err = e$;
        throw Error("Error loading file: " + this.filePath + " - " + err);
      }
    };
    prototype.loadRulesFrom = function(path){
      return this.loadRules(path);
    };
    prototype.load = function(path){
      return this.loadRules(path);
    };
    return RulesFileLoader;
  }());
}).call(this);
