// Generated by LiveScript 1.2.0
(function(){
  var Debugger, MatchesCompiler, MatchesOnCompiler, toString$ = {}.toString;
  Debugger = require('../../../util').Debugger;
  MatchesCompiler = require('./matches_compiler');
  module.exports = MatchesOnCompiler = (function(){
    MatchesOnCompiler.displayName = 'MatchesOnCompiler';
    var prototype = MatchesOnCompiler.prototype, constructor = MatchesOnCompiler;
    importAll$(prototype, arguments[0]);
    function MatchesOnCompiler(context, debugging){
      this.context = context;
      this.debugging = debugging;
    }
    prototype.compileMatchers = function(){
      var key;
      this.debug("compile-matchers", this.matchesOn);
      if (toString$.call(this.matchesOn).slice(8, -1) !== 'Object') {
        return;
      }
      this.compiledList = [];
      this.debug("compile...");
      for (key in this.matchesOn) {
        this.addCompiled(compileFor(key));
      }
      return this.debug('compiled matchers:', this.compiledList);
    };
    prototype.addCompiled = function(compiled){
      return this.context.compiledList.push(compiled);
    };
    prototype.compileFor = function(key){
      return this.matchesCompiler().process(key, this.matchesOn[key]);
    };
    prototype.matchesCompiler = function(){
      return this._matchesCompiler || (this._matchesCompiler = new MatchesCompiler(this.context));
    };
    return MatchesOnCompiler;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
