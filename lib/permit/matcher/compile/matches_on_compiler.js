// Generated by LiveScript 1.2.0
(function(){
  var Debugger, MatchCompiler, MatchesOnCompiler, toString$ = {}.toString;
  Debugger = require('../../../util').Debugger;
  MatchCompiler = require('./match_compiler');
  module.exports = MatchesOnCompiler = (function(){
    MatchesOnCompiler.displayName = 'MatchesOnCompiler';
    var prototype = MatchesOnCompiler.prototype, constructor = MatchesOnCompiler;
    importAll$(prototype, arguments[0]);
    function MatchesOnCompiler(context, debugging){
      this.context = context;
      this.debugging = debugging;
      this.debug('compiler', this.context, this.key);
      this.compiled = {
        includes: [],
        excludes: []
      };
    }
    prototype.compileAll = function(){
      compile('includes');
      compile('excludes');
      return this.compiled;
    };
    prototype.compile = function(key){
      var key;
      if (!this.context.compile) {
        return false;
      }
      this.compileContext = this.context.compile[this.key];
      this.compiledEntry = this.compiled[this.key];
      this.debug("compile-matchers", this.compileContext);
      if (toString$.call(this.compileContext).slice(8, -1) !== 'Object') {
        return;
      }
      this.debug("compile...");
      for (key in this.matchesOn) {
        this.addCompiled(this.compileFor(key));
      }
      this.debug('compiled matchers:', this.compiledList);
      return this.compiledEntry;
    };
    prototype.addCompiled = function(compiled){
      return this.compiledEntry.push(compiled);
    };
    prototype.compileFor = function(key){
      return this.matchCompiler().compile(key, this.matchesOn[key]);
    };
    prototype.matchCompiler = function(){
      return this._matchCompiler || (this._matchCompiler = new MatchCompiler(this.context));
    };
    return MatchesOnCompiler;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
