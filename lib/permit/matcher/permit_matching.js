// Generated by LiveScript 1.2.0
(function(){
  var UsePermitMatcher, AccessMatcher;
  UsePermitMatcher = require('./use_permit_matcher');
  AccessMatcher = require('../../access_request').matcher.AccessMatcher;
  module.exports = {
    usePermitMatcherClass: UsePermitMatcher,
    matcher: function(accessRequest){
      return new this.permitMatcherClass(this, accessRequest, this.debugging);
    },
    matches: function(accessRequest){
      var permitMatcher;
      this.debug('matches', accessRequest);
      permitMatcher = this.matcher(accessRequest);
      this.debug('permit matcher', permitMatcher);
      return permitMatcher.match();
    },
    matching: function(accessRequest){
      var fingerprint;
      fingerprint = accessRequest.fingerprint();
      if (!this.cached_matchers[fingerprint]) {
        this.cached_matchers[fingerprint] = new AccessMatcher(accessRequest);
      }
      return this.cached_matchers[fingerprint];
    },
    matchOn: function(accessRequest, matchObj){
      return this.matching(accessRequest).matchOn(matchObj);
    },
    matchUser: function(accessRequest, user){
      return this.matching(accessRequest).user(user);
    },
    matchRole: function(accessRequest, role){
      return this.matching(accessRequest).role(role);
    },
    matchSubject: function(accessRequest, subj){
      return this.matching(accessRequest).subject(subj);
    },
    matchSubjectClazz: function(clazz){
      return {
        subjectClazz: this.matching(accessRequest).clazz
      };
    },
    matchAction: function(action){
      return this.matching(accessRequest).action(action);
    },
    matchContext: function(ctx){
      return this.matches(accessRequest).context(ctx);
    },
    matchCtx: function(ctx){
      return this.matching(accessRequest).ctx(ctx);
    }
  };
}).call(this);
