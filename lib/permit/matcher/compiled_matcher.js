// Generated by LiveScript 1.2.0
(function(){
  var Debugger, MatchesOnCompiler, CompiledMatcher, toString$ = {}.toString;
  Debugger = require('../../util').Debugger;
  MatchesOnCompiler = require('./compile').MatchesOnCompiler;
  module.exports = CompiledMatcher = (function(){
    CompiledMatcher.displayName = 'CompiledMatcher';
    var prototype = CompiledMatcher.prototype, constructor = CompiledMatcher;
    importAll$(prototype, arguments[0]);
    function CompiledMatcher(context, accessRequest, debugging){
      this.accessRequest = accessRequest;
      this.debugging = debugging;
      CompiledMatcher.superclass.call(this, context);
      this.compiledList = this.context.compiledList;
      this.compile();
      this;
    }
    prototype.compile = function(){
      return this.compiledList || (this.compiledList = this.compiler().compile());
    };
    prototype.compiler = function(){
      return this._compiler || (this._compiler = new MatchesOnCompiler(this.context, this.debugging));
    };
    prototype.match = function(){
      this.debug("match");
      if (toString$.call(this.compiledList).slice(8, -1) !== 'Array') {
        return false;
      }
      this.debug("compiled matchers: " + this.compiledList.length);
      return this.iterateCompiled();
    };
    prototype.iterateCompiled = function(){
      var res, i$, ref$, len$, matchFun;
      res = false;
      for (i$ = 0, len$ = (ref$ = this.compiledList).length; i$ < len$; ++i$) {
        matchFun = ref$[i$];
        if (matchFun(this.accessRequest)) {
          break;
        }
      }
      return res;
    };
    return CompiledMatcher;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
