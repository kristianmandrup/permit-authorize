// Generated by LiveScript 1.2.0
(function(){
  var AccessMatcher, ContextMatcher, ExcludeMatcher, toString$ = {}.toString;
  AccessMatcher = require('../../access_request').matcher.AccessMatcher;
  ContextMatcher = require('./context_matcher');
  module.exports = ExcludeMatcher = (function(superclass){
    var prototype = extend$((import$(ExcludeMatcher, superclass).displayName = 'ExcludeMatcher', ExcludeMatcher), superclass).prototype, constructor = ExcludeMatcher;
    function ExcludeMatcher(context, accessRequest, debugging){
      this.accessRequest = accessRequest;
      this.debugging = debugging;
      ExcludeMatcher.superclass.call(this, context, constructor.defaultKey, this.debugging);
    }
    ExcludeMatcher.defaultKey = 'excludes';
    prototype.match = function(){
      return this.exclude() || this.match();
    };
    prototype.exclude = function(){
      return this.intersectOn(this.accessRequest);
    };
    prototype.exMatch = function(){
      var res;
      if (toString$.call(this.matchContext).slice(8, -1) !== 'Function') {
        return false;
      }
      res = this.matchContext(this.accessRequest);
      if (res.constructor === AccessMatcher) {
        return res.result();
      }
      if (res === undefined) {
        return false;
      }
      if (toString$.call(res).slice(8, -1) !== 'Boolean') {
        throw Error(".match method of permit " + this.context.name + " must return a Boolean value, was: " + toString$.call(res).slice(8, -1));
      }
      return res;
    };
    return ExcludeMatcher;
  }(ContextMatcher));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
