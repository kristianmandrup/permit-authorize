// Generated by LiveScript 1.2.0
(function(){
  var Debugger, Intersect, ContextMatcher, toString$ = {}.toString;
  Debugger = require('../../util').Debugger;
  Intersect = require('../../util').Intersect;
  module.exports = ContextMatcher = (function(){
    ContextMatcher.displayName = 'ContextMatcher';
    var prototype = ContextMatcher.prototype, constructor = ContextMatcher;
    importAll$(prototype, arguments[0]);
    function ContextMatcher(context, key, debugging){
      this.context = context;
      this.key = key;
      this.debugging = debugging;
      this.debug('set match-context', this.context, 'KEY', this.key);
      if (!this.context.name) {
        throw new Error("Match context (permit) missing a name: " + this.context);
      }
      this.matchContext = this.context[this.key];
    }
    prototype.match = function(){
      return false;
    };
    prototype.intersectOn = function(partial){
      this.debug('intersectOn', partial);
      if (partial == null) {
        return false;
      }
      if (toString$.call(partial).slice(8, -1) === 'Function') {
        partial = partial();
      }
      this.intersect || (this.intersect = Intersect());
      this.debug('perform intersect.on', this.matchContext, partial);
      return this.intersect.on(this.matchContext, partial);
    };
    return ContextMatcher;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
