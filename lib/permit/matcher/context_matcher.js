// Generated by LiveScript 1.2.0
(function(){
  var Debugger, Intersect, MatchingContext, ContextMatcher, toString$ = {}.toString;
  Debugger = require('../../util').Debugger;
  Intersect = require('../../util').Intersect;
  MatchingContext = require('./matching_contex');
  module.exports = ContextMatcher = (function(){
    ContextMatcher.displayName = 'ContextMatcher';
    var prototype = ContextMatcher.prototype, constructor = ContextMatcher;
    importAll$(prototype, arguments[0]);
    function ContextMatcher(context, key, accessRequest, debugging){
      this.context = context;
      this.key = key;
      this.accessRequest = accessRequest;
      this.debugging = debugging;
      this.validate();
    }
    prototype.validate = function(){
      if (toString$.call(this.context).slice(8, -1) !== 'Object') {
        throw new Error("Context must be an Object, was: " + this.context);
      }
      if (toString$.call(this.key).slice(8, -1) !== 'String') {
        throw new Error("Key must be a String, was: " + this.key);
      }
    };
    prototype.matchingContext = function(){
      return new MatchingContext(this.context, this.accessRequest);
    };
    prototype.match = function(){
      this.debug('match', this.matchContext);
      return this.intersect() || this.fun() || this.none();
    };
    prototype.none = function(){
      return false;
    };
    prototype.intersect = function(){
      if (!this.context.intersect) {
        return false;
      }
      this.intersectContext = this.context.intersect[this.key];
      if (toString$.call(this.intersectContext).slice(8, -1) !== 'Object') {
        return false;
      }
      this.debug('intersect', this.intersectContext, this.accessRequest);
      return this.intersectOn(this.accessRequest);
    };
    prototype.fun = function(){
      var res;
      if (!this.context.fun) {
        return false;
      }
      this.matchFun = this.context.fun[this.key];
      if (toString$.call(this.matchFun).slice(8, -1) !== 'Function') {
        return false;
      }
      this.debug('fun', this.matchFun, this.accessRequest);
      res = this.matchFun.call(this.matchingContext());
      if (res.constructor === AccessMatcher) {
        return res.result();
      }
      if (res === undefined) {
        return false;
      }
      if (toString$.call(res).slice(8, -1) !== 'Boolean') {
        throw Error(this.key + " method of context " + this.context.fun + " must return a Boolean value, was: " + toString$.call(res).slice(8, -1));
      }
      return res;
    };
    prototype.intersectOn = function(partial){
      this.debug('intersectOn', partial);
      if (partial == null) {
        return false;
      }
      if (toString$.call(partial).slice(8, -1) === 'Function') {
        partial = partial();
      }
      this.intersect || (this.intersect = Intersect());
      this.debug('perform intersect.on', this.intersectContext, partial);
      return this.intersect.on(this.intersectContext, partial);
    };
    return ContextMatcher;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
