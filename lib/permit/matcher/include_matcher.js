// Generated by LiveScript 1.2.0
(function(){
  var AccessMatcher, ContextMatcher, IncludeMatcher, toString$ = {}.toString;
  AccessMatcher = require('../../access_request').matcher.AccessMatcher;
  ContextMatcher = require('./context_matcher');
  module.exports = IncludeMatcher = (function(superclass){
    var prototype = extend$((import$(IncludeMatcher, superclass).displayName = 'IncludeMatcher', IncludeMatcher), superclass).prototype, constructor = IncludeMatcher;
    prototype.match = function(){
      return this.include() || this.customMatch();
    };
    prototype.include = function(){
      return this.intersectOn(this.context.includes);
    };
    prototype.customMatch = function(){
      var res;
      if (toString$.call(this.context.match).slice(8, -1) === 'Function') {
        res = this.context.match(this.accessRequest);
        this.debug('custom-match', this.permit.match, res);
        if (res.constructor === AccessMatcher) {
          return res.result();
        }
        if (res === undefined) {
          return true;
        }
        if (toString$.call(res).slice(8, -1) !== 'Boolean') {
          throw Error(".match method of permit " + this.context.name + " must return a Boolean value, was: " + toString$.call(res).slice(8, -1));
        }
        return res;
      } else {
        this.debug("permit.match function not found for permit: " + this.context.name);
        return false;
      }
    };
    function IncludeMatcher(){
      IncludeMatcher.superclass.apply(this, arguments);
    }
    return IncludeMatcher;
  }(ContextMatcher));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
