// Generated by LiveScript 1.2.0
(function(){
  var Debugger, PermitMatchesCompiler, toString$ = {}.toString;
  Debugger = require('../../util').Debugger;
  module.exports = PermitMatchesCompiler = (function(){
    PermitMatchesCompiler.displayName = 'PermitMatchesCompiler';
    var prototype = PermitMatchesCompiler.prototype, constructor = PermitMatchesCompiler;
    importAll$(prototype, arguments[0]);
    function PermitMatchesCompiler(permit, debugging){
      this.permit = permit;
      this.debugging = debugging;
    }
    prototype.compileMatchers = function(){
      var key;
      this.debug("compile-matchers", this.matchesOn);
      if (toString$.call(this.matchesOn).slice(8, -1) !== 'Object') {
        return;
      }
      this.compiledList = [];
      this.debug("compile...");
      for (key in this.matchesOn) {
        this.matchesProcessor().process(key, this.matchesOn[key]);
      }
      return this.debug('compiled matchers:', this.compiledList);
    };
    prototype.matchesCompiler = function(){
      var MatchesCompiler;
      MatchesCompiler = require('./matches_compiler');
      return this._matchesCompiler || (this._matchesCompiler = new MatchesCompiler(this.permit));
    };
    return PermitMatchesCompiler;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
