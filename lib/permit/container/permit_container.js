// Generated by LiveScript 1.2.0
(function(){
  var values, PermitContainer, toString$ = {}.toString;
  values = require('../../util').object.values;
  module.exports = PermitContainer = (function(){
    PermitContainer.displayName = 'PermitContainer';
    var prototype = PermitContainer.prototype, constructor = PermitContainer;
    function PermitContainer(name, desc){
      this.name = name;
      this.desc = desc;
      this.repo = {};
      this.description = this.desc;
      this;
    }
    prototype.add = function(permit){
      this.repo[permit.name] = permit;
      permit.container = this;
      return this;
    };
    prototype.remove = function(thing){
      var name;
      name = thing;
      if (toString$.call(thing).slice(8, -1) === 'Object') {
        name = thing.name;
      }
      if (!this.repo[name]) {
        throw new Error("Permit Repo has no entry for: " + name);
      }
      delete this.repo[name];
      return this;
    };
    prototype.activate = function(){
      this.active = true;
      PermitContainer.add(this);
      return this;
    };
    prototype.deactivate = function(){
      this.active = false;
      PermitContainer.remove(this);
      return this;
    };
    PermitContainer.add = function(container){
      return this.activeContainers[container.name] = container;
    };
    PermitContainer.remove = function(container){
      var ref$, key$, ref1$;
      return ref1$ = (ref$ = this.activeContainers)[key$ = container.name], delete ref$[key$], ref1$;
    };
    PermitContainer.activeContainers = {};
    PermitContainer.activeContainersList = function(){
      return values(this.activeContainers);
    };
    PermitContainer.hasAny = function(){
      return Object.keys(this.activeContainers).length > 0;
    };
    return PermitContainer;
  }());
}).call(this);
