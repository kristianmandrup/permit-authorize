// Generated by LiveScript 1.2.0
(function(){
  var Debugger, PermitFactory, toString$ = {}.toString;
  Debugger = require('../../util').Debugger;
  module.exports = PermitFactory = (function(){
    PermitFactory.displayName = 'PermitFactory';
    var prototype = PermitFactory.prototype, constructor = PermitFactory;
    importAll$(prototype, arguments[0]);
    function PermitFactory(baseClazz, name, baseObj, debugging){
      this.baseClazz = baseClazz;
      this.name = name;
      this.baseObj = baseObj;
      this.debugging = debugging;
      this.configure();
      this;
    }
    prototype.configure = function(){
      if (toString$.call(this.baseClazz).slice(8, -1) === 'String') {
        console.log('configure');
        this.debugging = this.baseObj;
        this.baseObj = this.name;
        this.name = this.baseClazz;
        return this.baseClazz = this.defaultPermitClass();
      }
    };
    prototype.defaultPermitClass = function(){
      return this.dpc || (this.dpc = require('../permit'));
    };
    prototype.createPermit = function(){
      return new this.baseClazz(this.name, this.debugging);
    };
    prototype.create = function(){
      this.debug('create', this.baseObj);
      return this.use(this.createPermit(), this.baseObj);
    };
    prototype.use = function(permit, obj){
      this.debug('use', permit, obj);
      if (toString$.call(obj).slice(8, -1) === 'Function') {
        obj = obj();
      }
      this.debug('rules obj', obj);
      if (toString$.call(obj).slice(8, -1) === 'Object') {
        this.debug('extend', permit, 'with', obj);
        import$(permit, obj);
      } else {
        throw Error("Can only extend permit with an Object, was: " + toString$.call(obj).slice(8, -1));
      }
      this.debug('extended', permit);
      return permit;
    };
    return PermitFactory;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
