// Generated by LiveScript 1.2.0
(function(){
  var requires, lo, fs, Debugger, PermitRulesLoader, toString$ = {}.toString;
  requires = require('../../requires');
  lo = requires.util('lodash-lite');
  fs = require('fs');
  Array.prototype.contains = function(v){
    return this.indexOf(v) > -1;
  };
  Debugger = requires.lib('debugger');
  PermitRulesLoader = (function(){
    PermitRulesLoader.displayName = 'PermitRulesLoader';
    var prototype = PermitRulesLoader.prototype, constructor = PermitRulesLoader;
    importAll$(prototype, arguments[0]);
    function PermitRulesLoader(filePath){
      this.filePath = filePath;
      this.loadedRules = {};
    }
    prototype.loadRules = function(filePath, async){
      async == null && (async = true);
      this.filePath || (this.filePath = filePath);
      this.debug("loadRules", this.filePath);
      if (!this.filePath) {
        throw Error("Error: Missing filepath");
      }
      if (async) {
        return this.loadRulesAsync(filePath);
      } else {
        return this.loadRulesSync(filePath);
      }
    };
    prototype.loadRulesAsync = function(){
      var self;
      this.debug('loadRulesAsync');
      self = this;
      return fs.readFile(this.filePath, 'utf8', function(err, data){
        var rules;
        self.debug(err, data);
        if (err) {
          this.debug(err);
          throw Error("Error loading file: " + this.filePath + " - " + err);
        }
        self.debug("data", data);
        rules = JSON.parse(data);
        self.debug("loaded-rules", rules);
        self.loadedRules = rules;
        return self.processRules();
      });
    };
    prototype.loadRulesSync = function(){
      var data, rules, err;
      try {
        data = fs.readFileSync(this.filePath, 'utf8', function(){});
        this.debug("data", data);
        if (toString$.call(data).slice(8, -1) !== 'String') {
          throw Error;
        }
        rules = JSON.parse(data);
        this.debug("loaded-rules", rules);
        this.loadedRules = rules;
        return this.processRules();
      } catch (e$) {
        err = e$;
        throw Error("Error loading file: " + this.filePath + " - " + err);
      }
    };
    prototype.loadRulesFrom = function(path){
      return this.loadRules(path);
    };
    prototype.processRules = function(){
      var key, ref$, rule;
      this.debug("processRules", this.loadedRules);
      if (toString$.call(this.loadedRules).slice(8, -1) !== 'Object') {
        throw Error("Rules not loaded or invalid: " + this.loadedRules);
      }
      this.processedRules = {};
      for (key in ref$ = this.loadedRules) {
        rule = ref$[key];
        this.processRule(key, rule);
      }
      return this.processedRules;
    };
    prototype.processRule = function(key, rule){
      this.debug("processRule", key, rule);
      return this.processedRules[key] = this.ruleFor(rule);
    };
    prototype.createRulesAt = function(permit, place){
      if (toString$.call(permit).slice(8, -1) !== 'Function') {
        throw Error("Not a permit, was: " + permit);
      }
      if (place != null) {
        if (!(permit.rules != null && toString$.call(permit.rules).slice(8, -1) === 'Object')) {
          throw Error("Permit has no rules object to place loaded rules at " + place);
        }
        return permit.rules[place] = this.processedRules;
      } else {
        return permit.rules = this.processedRules;
      }
    };
    prototype.ruleFor = function(rule){
      var key;
      this.debug("ruleFor", rule);
      key = Object.keys(rule)[0];
      if (!['can', 'cannot'].contains(key)) {
        throw Error("Not a valid rule key, must be 'can' or 'cannot', was: " + key);
      }
      return this.factoryFor(key)(rule[key]);
    };
    prototype.factoryFor = function(key){
      return this[key + "Factory"];
    };
    prototype.canFactory = function(action, subject){
      return function(){
        return this.ucan(action, subject);
      };
    };
    prototype.cannotFactory = function(action, subject){
      return function(){
        return this.ucannot(action, subject);
      };
    };
    return PermitRulesLoader;
  }(Debugger));
  module.exports = PermitRulesLoader;
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
