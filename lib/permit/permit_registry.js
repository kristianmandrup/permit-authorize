// Generated by LiveScript 1.2.0
(function(){
  var requires, lo, Debugger, todo, PermitRegistry, toString$ = {}.toString;
  requires = require('../../requires');
  lo = require('lodash');
  Debugger = requires.lib('debugger');
  todo = "allow creation of multiple registries and select one to use per environment";
  module.exports = PermitRegistry = (function(){
    PermitRegistry.displayName = 'PermitRegistry';
    var prototype = PermitRegistry.prototype, constructor = PermitRegistry;
    importAll$(prototype, arguments[0]);
    function PermitRegistry(){
      throw Error("PermitRegistry is currently a singleton (TODO: " + todo + ")");
    }
    PermitRegistry.permits = {};
    PermitRegistry.permitCounter = 0;
    PermitRegistry.calcName = function(name){
      if (name === undefined) {
        name = "Permit-" + constructor.permitCounter;
      }
      if (toString$.call(name).slice(8, -1) !== 'String') {
        throw Error("Name of permit must be a String, was: " + name);
      }
      return name;
    };
    PermitRegistry.get = function(name){
      return constructor.permits[name] || (function(){
        throw Error("No permit '" + name + "' is registered");
      }());
    };
    PermitRegistry.registerPermit = function(permit){
      var name;
      permit.name = this.calcName(permit.name);
      name = permit.name;
      if (toString$.call(constructor.permits).slice(8, -1) !== 'Object') {
        throw Error("permits registry container must be an Object in order to store permits by name, was: " + constructor.permits);
      }
      if (constructor.permits[name]) {
        throw Error("A Permit named: " + name + " is already registered, please use a different name!");
      }
      constructor.permits[name] = permit;
      return constructor.permitCounter = constructor.permitCounter + 1;
    };
    PermitRegistry.clearPermits = function(){
      constructor.permits = {};
      return constructor.permitCounter = 0;
    };
    PermitRegistry.clearAll = function(){
      return constructor.clearPermits();
    };
    PermitRegistry.permitList = function(){
      return _.values(constructor.permits);
    };
    PermitRegistry.cleanPermits = function(){
      var i$, ref$, len$, permit, results$ = [];
      for (i$ = 0, len$ = (ref$ = constructor.permitList()).length; i$ < len$; ++i$) {
        permit = ref$[i$];
        results$.push(permit.clean());
      }
      return results$;
    };
    PermitRegistry.cleanAll = function(){
      return constructor.cleanPermits();
    };
    return PermitRegistry;
  }(Debugger));
  lo.extend(PermitRegistry, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
