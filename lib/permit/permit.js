// Generated by LiveScript 1.2.0
(function(){
  var Debugger, PermitRegistry, PermitMatcher, RuleRepo, PermitApplier, Permit;
  Debugger = require('../util').Debugger;
  PermitRegistry = require('./registry').PermitRegistry;
  PermitMatcher = require('./matcher').PermitMatchController;
  RuleRepo = require('../rule').repo.RuleRepo;
  PermitApplier = require('./rule').PermitRuleApplier;
  module.exports = Permit = (function(){
    Permit.displayName = 'Permit';
    var prototype = Permit.prototype, constructor = Permit;
    importAll$(prototype, arguments[0]);
    function Permit(name, description, debugging){
      this.name = name;
      this.description = description != null ? description : '';
      this.debugging = debugging;
      Permit.registry || (Permit.registry = new PermitRegistry);
      this.matchEnabled = false;
      if (this.autoActivate) {
        this._register();
      }
      this;
    }
    prototype.repo = function(){
      return this._repo || (this._repo = new RuleRepo(this.name));
    };
    prototype.applier = function(){
      return this._applier || (this._applier = new PermitApplier(this.repo));
    };
    prototype.permitMatcher = function(accessRequest){
      return new PermitMatcher(this, accessRequest, this.debugging);
    };
    prototype.rules = function(){};
    prototype.autoActivate = true;
    prototype.activate = function(){
      this.activate = true;
      return this._register();
    };
    prototype.deactivate = function(){
      this.activate = false;
      return this._unregister();
    };
    prototype._register = function(){
      return this.registry().register(this);
    };
    prototype._unregister = function(){
      return this.registry().unregister(this);
    };
    Permit.get = function(name){
      return constructor.registry.get(name);
    };
    prototype.registry = function(){
      return constructor.registry;
    };
    Permit.enableMatch = function(){
      return this.matchEnabled = true;
    };
    Permit.disableMatch = function(){
      return this.matchEnabled = false;
    };
    prototype.match = function(accessRequest){
      if (this.matchEnabled) {
        return this.permitMatcher(accessRequest).match();
      }
    };
    prototype.init = function(){
      this.debug('permit init');
      this.applier.apply('static');
      return this;
    };
    prototype.clean = function(){
      this.repo.clean();
      return this.applier.clean();
    };
    prototype.canRules = function(){
      return this.repo.canRules;
    };
    prototype.cannotRules = function(){
      return this.repo.cannotRules;
    };
    return Permit;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
