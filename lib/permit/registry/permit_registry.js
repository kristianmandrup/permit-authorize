// Generated by LiveScript 1.2.0
(function(){
  var obj, values, Debugger, PermitRegistry, toString$ = {}.toString;
  obj = require('../../util').object;
  values = obj.values;
  Debugger = require('../../util').Debugger;
  module.exports = PermitRegistry = (function(){
    PermitRegistry.displayName = 'PermitRegistry';
    var prototype = PermitRegistry.prototype, constructor = PermitRegistry;
    importAll$(prototype, arguments[0]);
    function PermitRegistry(permits){
      this.permits = permits != null
        ? permits
        : {};
      this.permitCounter = Object.keys(this.permits).length;
      this;
    }
    prototype.calcName = function(name){
      if (name === undefined) {
        name = "Permit-" + this.permitCounter;
      }
      if (toString$.call(name).slice(8, -1) !== 'String') {
        throw Error("Name of permit must be a String, was: " + name);
      }
      return name;
    };
    prototype.get = function(name){
      return this.permits[name] || (function(){
        throw Error("No permit '" + name + "' is registered");
      }());
    };
    prototype.registerPermit = function(permit){
      var name;
      permit.name = this.calcName(permit.name);
      name = permit.name;
      if (toString$.call(this.permits).slice(8, -1) !== 'Object') {
        throw Error("permits registry container must be an Object in order to store permits by name, was: " + this.permits);
      }
      if (this.permits[name]) {
        throw Error("A Permit named: " + name + " is already registered, please use a different name!");
      }
      this.permits[name] = permit;
      return this.permitCounter = this.permitCounter + 1;
    };
    prototype.clearPermits = function(){
      this.permits = {};
      return this.permitCounter = 0;
    };
    prototype.clearAll = function(){
      return this.clearPermits();
    };
    prototype.permitList = function(){
      return values(this.permits);
    };
    prototype.cleanPermits = function(){
      var i$, ref$, len$, permit, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.permitList()).length; i$ < len$; ++i$) {
        permit = ref$[i$];
        results$.push(permit.clean());
      }
      return results$;
    };
    prototype.cleanAll = function(){
      return this.cleanPermits();
    };
    return PermitRegistry;
  }(Debugger));
  import$(PermitRegistry, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
