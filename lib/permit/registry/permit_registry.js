// Generated by LiveScript 1.2.0
(function(){
  var obj, values, Debugger, extractName, calcName, PermitRegistry, toString$ = {}.toString;
  obj = require('../../util').object;
  values = obj.values;
  Debugger = require('../../util').Debugger;
  extractName = function(thing){
    switch (toString$.call(thing).slice(8, -1)) {
    case 'Object':
      return thing.name;
    case 'String':
      return thing;
    default:
      throw new Error("Can't find the name of " + thing);
    }
  };
  calcName = function(ctx, name){
    if (name === undefined) {
      name = "Permit-" + ctx.permitCount();
    }
    if (toString$.call(name).slice(8, -1) !== 'String') {
      throw Error("Name of permit must be a String, was: " + name);
    }
    return name;
  };
  module.exports = PermitRegistry = (function(){
    PermitRegistry.displayName = 'PermitRegistry';
    var prototype = PermitRegistry.prototype, constructor = PermitRegistry;
    importAll$(prototype, arguments[0]);
    function PermitRegistry(permits){
      this.permits = permits != null
        ? permits
        : {};
    }
    prototype.get = function(name){
      return this.permits[name] || (function(){
        throw Error("No permit '" + name + "' is registered");
      }());
    };
    prototype.unregister = function(permit){
      var name, ref$, ref1$;
      name = extractName(permit);
      return ref1$ = (ref$ = this.permits)[name], delete ref$[name], ref1$;
    };
    prototype.register = function(permit){
      var name;
      name = calcName(this, permit.name);
      if (this._mayRegister(name)) {
        this.permits[name] = permit;
      }
      permit.name = name;
      return this;
    };
    prototype.permitCount = function(){
      return Object.keys(this.permits).length;
    };
    prototype.permitList = function(){
      return values(this.permits);
    };
    prototype.cleanPermits = function(){
      var i$, ref$, len$, permit, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.permitList()).length; i$ < len$; ++i$) {
        permit = ref$[i$];
        results$.push(permit.clean());
      }
      return results$;
    };
    prototype.clean = function(){
      return this.permits = {};
    };
    prototype._mayRegister = function(name){
      if (toString$.call(this.permits).slice(8, -1) !== 'Object') {
        throw Error("permits registry container must be an Object in order to store permits by name, was: " + this.permits);
      }
      if (this.permits[name]) {
        throw Error("A Permit named: " + name + " is already registered, please use a different name!");
      }
    };
    return PermitRegistry;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
