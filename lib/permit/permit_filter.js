// Generated by LiveScript 1.2.0
(function(){
  var requires, lo, Permit, PermitRegistry, Debugger, PermitFilter, toString$ = {}.toString;
  requires = require('../../requires');
  lo = require('lodash');
  Permit = requires.lib('permit');
  PermitRegistry = requires.permit('permit_registry');
  Debugger = requires.lib('debugger');
  module.exports = PermitFilter = (function(){
    PermitFilter.displayName = 'PermitFilter';
    var prototype = PermitFilter.prototype, constructor = PermitFilter;
    importAll$(prototype, arguments[0]);
    PermitFilter.filter = function(accessRequest){
      var self, matchingFun, permits, res;
      self = this;
      matchingFun = function(permit){
        self.debug('matching', permit, accessRequest);
        if (!permit.matches) {
          throw Error("Permit must have a .matches(access-request) method: " + permit);
        }
        return permit.matches(accessRequest);
      };
      permits = this.permits();
      if (toString$.call(permits).slice(8, -1) !== 'Array') {
        throw Error("permits which contain all registered permits, must be an Array, was: " + typeof permits);
      }
      this.debug('filter permits', permits, accessRequest);
      res = lo.filter(permits, matchingFun);
      this.debug('filtered', res);
      return res;
    };
    PermitFilter.permits = function(){
      return lo.values(PermitRegistry.permits);
    };
    function PermitFilter(){}
    return PermitFilter;
  }(Debugger));
  lo.extend(PermitFilter, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
