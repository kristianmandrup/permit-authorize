// Generated by LiveScript 1.2.0
(function(){
  var util, Debugger, camelCase, normalize, RuleRepo;
  util = require('../../util');
  Debugger = util.Debugger;
  camelCase = util.string.camelCase;
  normalize = util.normalize;
  module.exports = RuleRepo = (function(){
    RuleRepo.displayName = 'RuleRepo';
    var prototype = RuleRepo.prototype, constructor = RuleRepo;
    importAll$(prototype, arguments[0]);
    function RuleRepo(name, debugging){
      this.name = name;
      this.debugging = debugging;
    }
    prototype.canRules = {};
    prototype.cannotRules = {};
    prototype.display = function(){
      console.log("name:", this.name);
      console.log("can-rules:", this.canRules);
      return console.log("cannot-rules:", this.cannotRules);
    };
    prototype.registerRule = function(act, actions, subjects){
      return this.registrator.registerRule(act, actions, subjects);
    };
    prototype.cleaner = function(){
      return this._cleaner || (this._cleaner = new RepoCleaner(this));
    };
    prototype.registrator = function(){
      return this._registrator || (this._registrator = new RepoRegistrator(this));
    };
    prototype.matchRule = function(act, accessRequest){
      return this.ruleMatcher(act, accessRequest).match();
    };
    prototype.ruleMatcher = function(act, accessRequest){
      return new RuleMatcher(act, accessRequest);
    };
    return RuleRepo;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
