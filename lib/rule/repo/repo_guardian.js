// Generated by LiveScript 1.2.0
(function(){
  var util, Debugger, RepoGuardian, toString$ = {}.toString;
  util = require('../../util');
  Debugger = util.Debugger;
  module.exports = RepoGuardian = (function(){
    RepoGuardian.displayName = 'RepoGuardian';
    var prototype = RepoGuardian.prototype, constructor = RepoGuardian;
    importAll$(prototype, arguments[0]);
    function RepoGuardian(repo, accessRequest){
      this.repo = repo;
      this.accessRequest = accessRequest;
      this._validate();
    }
    prototype._validate = function(){
      if (toString$.call(this.repo).slice(8, -1) !== 'Object') {
        throw Error("PermitAllower must take a RuleRepo in constructor, was: " + this.repo);
      }
    };
    prototype.testAccess = function(act){
      var subj;
      this.debug('test-access', act, this.accessRequest);
      if (this.debugging) {
        this.repo.debugOn();
      }
      subj = this.repo.match(act, this.accessRequest);
      this.debug('subj', subj);
      return subj === true;
    };
    prototype.allows = function(ignoreInverse){
      this.debug('allows', this.accessRequest, ignoreInverse);
      if (!ignoreInverse) {
        if (this.disallows(true)) {
          return false;
        }
      }
      if (this.testAccess('can' === false)) {
        return false;
      }
      return true;
    };
    prototype.disallows = function(ignoreInverse){
      this.debug('disallows', this.accessRequest, ignoreInverse);
      if (this.testAccess('cannot' === true)) {
        return true;
      }
      return false;
    };
    return RepoGuardian;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
