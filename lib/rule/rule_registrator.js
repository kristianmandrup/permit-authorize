// Generated by LiveScript 1.2.0
(function(){
  var util, Debugger, RuleExtractor, RuleRegistrator, toString$ = {}.toString;
  util = require('../util');
  Debugger = util.Debugger;
  RuleExtractor = require('./rule_extractor');
  module.exports = RuleRegistrator = (function(){
    RuleRegistrator.displayName = 'RuleRegistrator';
    var prototype = RuleRegistrator.prototype, constructor = RuleRegistrator;
    importAll$(prototype, arguments[0]);
    function RuleRegistrator(container){
      this.container = container;
      if (toString$.call(this.ruleContainer).slice(8, -1) !== 'Object') {
        throw Error("Container must be an object");
      }
    }
    prototype.addRule = function(action, subjects){
      var registeredActionSubjects, i$, ref$, len$, results$ = [];
      this.debug('add rule', action, subjects);
      registeredActionSubjects = this.ruleExtractor(this.container, action, subjects).extract();
      this.container[action] = registeredActionSubjects;
      if (action === 'manage') {
        for (i$ = 0, len$ = (ref$ = this.manageActions).length; i$ < len$; ++i$) {
          action = ref$[i$];
          results$.push(this.container[action] = registeredActionSubjects);
        }
        return results$;
      }
    };
    prototype.ruleExtractor = function(container, action, subjects){
      this.container = container;
      return new RuleExtractor(this.container, action, subjects);
    };
    prototype.registerRule = function(act, actions, subjects){
      var i$, len$, action, results$ = [];
      actions = normalize(actions);
      this.container = this.containerFor(act);
      this.debug('rule container', ruleContainer);
      for (i$ = 0, len$ = actions.length; i$ < len$; ++i$) {
        action = actions[i$];
        results$.push(this.addRule(this.container, action, subjects));
      }
      return results$;
    };
    prototype.manageActions = ['create', 'edit', 'delete'];
    return RuleRegistrator;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
