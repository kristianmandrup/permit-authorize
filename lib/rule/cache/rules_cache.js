// Generated by LiveScript 1.2.0
(function(){
  var FingerPrinter, Debugger, Permit, RulesCache, slice$ = [].slice, toString$ = {}.toString;
  FingerPrinter = require('../../access_request').fingerprint.FingerPrinter;
  Debugger = require('../../util').Debugger;
  Permit = require('../../permit').Permit;
  module.exports = RulesCache = (function(){
    RulesCache.displayName = 'RulesCache';
    var prototype = RulesCache.prototype, constructor = RulesCache;
    importAll$(prototype, arguments[0]);
    function RulesCache(object, fpClass){
      this.object = object != null
        ? object
        : {};
      this.fpClass = fpClass != null ? fpClass : FingerPrinter;
      this.clearCache();
    }
    prototype.init = function(){
      this.observe(Permit.registry);
      return this.fingerprint();
    };
    prototype.clearCache = function(act){
      if (act) {
        this.cache[act] = {};
      } else {
        this.cache = {};
      }
      return this;
    };
    prototype.get = function(name){
      return this.cache[name];
    };
    prototype.set = function(name, value){
      this.cache[name] = value;
      return this;
    };
    prototype.fingerprint = function(){
      return this.fingerprint = this.noPrint() || this.fingerprinter().fingerprint();
    };
    prototype.noPrint = function(){
      if (Object.keys(this.object).length === 0) {
        return 'x';
      }
    };
    prototype.fingerprinter = function(){
      return new this.fpClass(this.object);
    };
    prototype.observe = function(){
      var targets, i$, len$, target, results$ = [];
      targets = slice$.call(arguments);
      for (i$ = 0, len$ = targets.length; i$ < len$; ++i$) {
        target = targets[i$];
        if (toString$.call(target != null ? target.addObserver : void 8).slice(8, -1) === 'Function') {
          results$.push(target.addObserver(this));
        }
      }
      return results$;
    };
    prototype.notify = function(sender, event){
      return this.clearCache();
    };
    return RulesCache;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
