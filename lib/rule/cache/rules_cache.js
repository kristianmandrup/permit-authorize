// Generated by LiveScript 1.2.0
(function(){
  var FingerPrinter, Debugger, RulesCache;
  FingerPrinter = require('../../access_request').fingerprint.FingerPrinter;
  Debugger = require('../../util').Debugger;
  module.exports = RulesCache = (function(){
    RulesCache.displayName = 'RulesCache';
    var prototype = RulesCache.prototype, constructor = RulesCache;
    importAll$(prototype, arguments[0]);
    function RulesCache(object, fpClass){
      this.object = object;
      this.fpClass = fpClass != null ? fpClass : FingerPrinter;
    }
    prototype.clearCache = function(){
      this.can = {};
      return this.cannot = {};
    };
    prototype.canCache = function(){
      return this.can || (this.can = {});
    };
    prototype.cannotCache = function(){
      return this.cannot || (this.cannot = {});
    };
    prototype.fingerprint = function(){
      return this._fingerprint || (this._fingerprint = this.fingerprinter().hash());
    };
    prototype.fingerprinter = function(){
      return new this.fpClass(this.object);
    };
    return RulesCache;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
