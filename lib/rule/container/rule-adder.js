// Generated by LiveScript 1.2.0
(function(){
  var Debugger, RuleExtractor, RuleAdder;
  Debugger = util.Debugger;
  RuleExtractor = require('./rule_extractor');
  module.exports = RuleAdder = (function(){
    RuleAdder.displayName = 'RuleAdder';
    var prototype = RuleAdder.prototype, constructor = RuleAdder;
    importAll$(prototype, arguments[0]);
    function RuleAdder(container, action, subjects){
      this.container = container;
      this.action = action;
      this.subjects = subjects;
    }
    prototype.add = function(){
      this.debug('add rule', action, subjects);
      this.actionSubjects(action, subjects);
      this.container[action] = this.actionSubjects();
      return this.addManage(action);
    };
    prototype.actionSubjects = function(action, subjects){
      return this._actionSubjects || (this._actionSubjects = this.ruleExtractor(this.container, action, subjects).extract());
    };
    prototype.addManage = function(action){
      var i$, ref$, len$;
      if (action !== 'manage') {
        return;
      }
      for (i$ = 0, len$ = (ref$ = this.manageActions).length; i$ < len$; ++i$) {
        action = ref$[i$];
        this.container[action] = this.actionSubjects();
      }
      return this;
    };
    prototype.ruleExtractor = function(container, action, subjects){
      this.container = container;
      return new RuleExtractor(this.container, action, subjects);
    };
    prototype.manageActions = require('../../util').globals.manageActions;
    return RuleAdder;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
