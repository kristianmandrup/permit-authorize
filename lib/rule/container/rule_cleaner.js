// Generated by LiveScript 1.2.0
(function(){
  var util, Debugger, RepoCleaner, toString$ = {}.toString;
  util = require('../../util');
  Debugger = util.Debugger;
  module.exports = RepoCleaner = (function(){
    RepoCleaner.displayName = 'RepoCleaner';
    var prototype = RepoCleaner.prototype, constructor = RepoCleaner;
    importAll$(prototype, arguments[0]);
    function RepoCleaner(container){
      this.container = container;
      this._validate();
      this;
    }
    prototype._validate = function(){
      if (toString$.call(this.container).slice(8, -1) !== 'Object') {
        throw Error("Container must be an Objects, was: " + this.container);
      }
    };
    prototype.cleanAll = function(){
      this.clean('can');
      this.clean('cannot');
      return this;
    };
    prototype.clean = function(act){
      if (act === undefined) {
        return this.cleanAll();
      }
      if (!(act === 'can' || act === 'cannot')) {
        throw Error("Repo can only clear 'can' or 'cannot' rules, was: " + act);
      }
      this.debug('clean', act);
      this.container[act] = {};
      return this;
    };
    return RepoCleaner;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
