// Generated by LiveScript 1.2.0
(function(){
  var util, Debugger, RuleCleaner, RuleRegistrator, RuleContainer;
  util = require('../../util');
  Debugger = util.Debugger;
  RuleCleaner = require('./rule_cleaner');
  RuleRegistrator = require('./rule_registrator');
  module.exports = RuleContainer = (function(){
    RuleContainer.displayName = 'RuleContainer';
    var prototype = RuleContainer.prototype, constructor = RuleContainer;
    importAll$(prototype, arguments[0]);
    function RuleContainer(debugging){
      this.debugging = debugging != null ? debugging : true;
    }
    prototype.can = {};
    prototype.cannot = {};
    prototype._type = 'RuleContainer';
    prototype.register = function(act, actions, subjects){
      this.debug('container register', act, actions, subjects);
      return this.registrator().register(act, actions, subjects);
    };
    prototype.match = function(act, accessRequest){
      return this.matcher(act, accessRequest).match();
    };
    prototype.clean = function(){
      this.cleaner().clean();
      return this;
    };
    prototype.matcher = function(act, accessRequest){
      return new RuleMatcher(this, act, accessRequest);
    };
    prototype.cleaner = function(){
      return this._cleaner || (this._cleaner = new RuleCleaner(this));
    };
    prototype.registrator = function(){
      return this._registrator || (this._registrator = new RuleRegistrator(this, this.debugging));
    };
    prototype.display = function(){
      console.log("can-rules:", this.can);
      console.log("cannot-rules:", this.cannot);
      return this;
    };
    return RuleContainer;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
