// Generated by LiveScript 1.2.0
(function(){
  var util, Debugger, clazzFor, camelize, union, normalize, RuleMixin, RuleSubjectMatcher, toString$ = {}.toString;
  util = require('../../../util');
  Debugger = util.Debugger;
  clazzFor = util.string.clazzFor;
  camelize = util.string.camelCase;
  union = util.array.union;
  normalize = util.normalize;
  RuleMixin = require('../rule_mixin');
  module.exports = RuleSubjectMatcher = (function(){
    RuleSubjectMatcher.displayName = 'RuleSubjectMatcher';
    var prototype = RuleSubjectMatcher.prototype, constructor = RuleSubjectMatcher;
    importAll$(prototype, arguments[0]);
    function RuleSubjectMatcher(subjects, debugging){
      this.subjects = subjects;
      this.debugging = debugging;
      this.subjects = this._classNormalize(this.subjects);
      this._validate();
      this;
    }
    prototype.match = function(arSubjects){
      arSubjects = this._classNormalize(arSubjects);
      this.debug('match', this.subjects, 'with', arSubjects);
      return this.intersects(this.wildCards) || this.intersects(arSubjects);
    };
    prototype.intersects = function(arSubjects){
      return intersect(this.subjects, arSubjects).length > 0;
    };
    prototype.wildCards = ['Any', '*'];
    prototype._validate = function(){
      if (toString$.call(this.subjects).slice(8, -1) !== 'Array') {
        throw new Error("subject must be an Array, was: " + this.subjects);
      }
    };
    prototype._classNormalize = function(subjects){
      return normalize(subjects).map(function(subject){
        return camelize(subject);
      });
    };
    return RuleSubjectMatcher;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
