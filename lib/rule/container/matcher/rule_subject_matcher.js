// Generated by LiveScript 1.2.0
(function(){
  var util, Debugger, clazzFor, camelize, RuleSubjectMatcher, toString$ = {}.toString;
  util = require('../../../util');
  Debugger = util.Debugger;
  clazzFor = util.string.clazzFor;
  camelize = util.string.camelCase;
  module.exports = RuleSubjectMatcher = (function(){
    RuleSubjectMatcher.displayName = 'RuleSubjectMatcher';
    var prototype = RuleSubjectMatcher.prototype, constructor = RuleSubjectMatcher;
    importAll$(prototype, arguments[0]);
    function RuleSubjectMatcher(subjects){
      this.subjects = subjects;
      if (toString$.call(this.subjects).slice(8, -1) !== 'Array') {
        throw new Error("subject must be an Array, was: " + this.subjects);
      }
    }
    prototype.match = function(subject){
      var camelized;
      this.debug('match', subject);
      if (contains(this.wildcards, subject)) {
        return true;
      }
      if (toString$.call(subject).slice(8, -1) === 'Array') {
        return contains(this.subjects, subject);
      }
      if (toString$.call(subject).slice(8, -1) !== 'String') {
        throw Error("find-matching-subject: Subject must be a String to be matched, was " + subject);
      }
      camelized = camelize(subject);
      return subjects.indexOf(camelized) !== -1;
    };
    prototype.wildcards = ['*', 'any'];
    return RuleSubjectMatcher;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
