// Generated by LiveScript 1.2.0
(function(){
  var utily, util, every, camelize, clazzFor, Debugger, RuleMixin, RuleMatcher, toString$ = {}.toString;
  utily = require('util');
  util = require('../../../util');
  every = util.array.every;
  camelize = util.string.camelCase;
  clazzFor = util.string.clazzFor;
  Debugger = util.Debugger;
  RuleMixin = './rule_mixin';
  module.exports = RuleMatcher = (function(){
    RuleMatcher.displayName = 'RuleMatcher';
    var prototype = RuleMatcher.prototype, constructor = RuleMatcher;
    importAll$(prototype, arguments[0]);
    importAll$(prototype, arguments[1]);
    function RuleMatcher(ruleContainer, act, accessRequest){
      this.ruleContainer = ruleContainer;
      this.act = act;
      this.accessRequest = accessRequest;
      this._validate();
      this.act = camelize(this.act);
      this;
    }
    prototype._validate = function(){
      if (toString$.call(this.act).slice(8, -1) !== 'String') {
        throw Error(this.act + " must be a String, was: " + utily.inspect(this.act));
      }
    };
    prototype.match = function(){
      var action, subject, subjClazz, actionSubjects;
      this.debug('match-rule', this.act, this.accessRequest);
      action = this.accessRequest.action;
      subject = this.accessRequest.subject;
      this.debug('action, subject', action, subject);
      subjClazz = clazzFor(subject);
      this.debug('rule-container', this.ruleContainer());
      if (action === 'manage') {
        this.matchManageRule(this.ruleContainer(), subjClazz);
      }
      this.debug('subj-clazz', subjClazz);
      if (!subjClazz) {
        return false;
      }
      actionSubjects = this.ruleContainer()[action];
      this.debug('action-subjects', actionSubjects);
      if (!actionSubjects) {
        return false;
      }
      return this.matchSubjectClazz(actionSubjects, subjClazz);
    };
    prototype.ruleContainer = function(){
      return this._container || (this._container = this.containerFor(this.act));
    };
    return RuleMatcher;
  }(Debugger, RuleMixin));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
