// Generated by LiveScript 1.2.0
(function(){
  var utily, util, every, camelize, clazzFor, Debugger, RuleMixin, ManagedSubjectMatcher, RuleSubjectMatcher, RuleMatcher, toString$ = {}.toString;
  utily = require('util');
  util = require('../../../util');
  every = util.array.every;
  camelize = util.string.camelCase;
  clazzFor = util.string.clazzFor;
  Debugger = util.Debugger;
  RuleMixin = require('../rule_mixin');
  ManagedSubjectMatcher = require('./managed_subject_matcher');
  RuleSubjectMatcher = require('./rule_subject_matcher');
  module.exports = RuleMatcher = (function(){
    RuleMatcher.displayName = 'RuleMatcher';
    var prototype = RuleMatcher.prototype, constructor = RuleMatcher;
    importAll$(prototype, arguments[0]);
    importAll$(prototype, arguments[1]);
    function RuleMatcher(container, act, accessRequest, debugging){
      this.container = container;
      this.act = act;
      this.accessRequest = accessRequest;
      this.debugging = debugging;
      this._validate();
      this._configure();
      this;
    }
    prototype._configure = function(){
      this.act = this.act.toLowerCase();
      this.action = this.accessRequest.action;
      this.subject = this.accessRequest.subject;
      this.clazz = clazzFor(this.subject);
      this.debug('container', this.container);
      return this.debug('action, subject, clazz', this.action, this.subject, this.clazz);
    };
    prototype._validate = function(){
      return this._validateAct() && this._validateContainer();
    };
    prototype._validateContainer = function(){
      if (toString$.call(this.actContainer()).slice(8, -1) !== 'Object') {
        throw Error("No container for " + this.act + " in container: " + utily.inspect(this.container));
      }
    };
    prototype._validateAct = function(){
      if (!(this.act === 'can' || this.act === 'cannot')) {
        throw Error("act must be a String: 'can' or 'cannot', was: " + utily.inspect(this.act));
      }
    };
    prototype.match = function(){
      this.debug('match');
      if (!this.clazz) {
        return false;
      }
      if (this.action === 'manage') {
        return this.managedSubjectMatch();
      }
      this.debug('action-subjects', this.actionSubjects());
      if (!this.actionSubjects()) {
        return false;
      }
      return this.matchSubject();
    };
    prototype.managedSubjectMatch = function(){
      return this.managedSubjectMatcher().match(this.clazz);
    };
    prototype.managedSubjectMatcher = function(){
      return new ManagedSubjectMatcher(this.actContainer(), this.debugging);
    };
    prototype.matchSubject = function(){
      if (!this.actionSubjects()) {
        return false;
      }
      return this.subjectMatcher().match(this.clazz);
    };
    prototype.subjectMatcher = function(){
      if (!this.actionSubjects()) {
        return;
      }
      return new RuleSubjectMatcher(this.actionSubjects(), this.debugging);
    };
    prototype.actionSubjects = function(){
      return this._actionSubjects || (this._actionSubjects = this.actContainer()[this.action]);
    };
    prototype.actContainer = function(){
      return this._container || (this._container = this.containerFor(this.act));
    };
    return RuleMatcher;
  }(Debugger, RuleMixin));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
