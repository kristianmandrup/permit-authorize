// Generated by LiveScript 1.2.0
(function(){
  var util, Debugger, ManagedSubjectMatcher, RuleActionMatcher;
  util = require('../../../util');
  Debugger = util.Debugger;
  ManagedSubjectMatcher = require('./managed_subject_matcher');
  module.exports = RuleActionMatcher = (function(){
    RuleActionMatcher.displayName = 'RuleActionMatcher';
    var prototype = RuleActionMatcher.prototype, constructor = RuleActionMatcher;
    importAll$(prototype, arguments[0]);
    function RuleActionMatcher(container){
      this.container = container;
    }
    prototype.match = function(subject){
      return this.isManaged(subject);
    };
    prototype.isManaged = function(subject){
      var found, i$, ref$, len$, subjects;
      found = this.matchSubject(this.manageSubjects(), subject);
      if (found) {
        return found;
      }
      for (i$ = 0, len$ = (ref$ = this.managedSubjects()).length; i$ < len$; ++i$) {
        subjects = ref$[i$];
        if (!this.matchSubject(subjects, subjClazz)) {
          return false;
        }
      }
      return true;
    };
    prototype.managedSubjects = function(){
      return this._manageSubjects || (this._manageSubjects = this.container['manage']);
    };
    prototype.matchSubject = function(subjects, subject){
      return this.subjectMatcher(subjects, subject).match(subject);
    };
    prototype.subjectMatcher = function(subjects, subject){
      return new ManagedSubjectMatcher(subjects);
    };
    prototype.manageActionSubjects = function(){
      return this.manageActions.map(function(action){
        return this.container[action];
      });
    };
    return RuleActionMatcher;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
