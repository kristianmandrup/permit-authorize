// Generated by LiveScript 1.2.0
(function(){
  var util, array, unique, normalize, camelize, Debugger, normalized, RuleExtractor;
  util = require('../../util');
  array = util.array;
  unique = array.unique;
  normalize = util.normalize;
  camelize = util.string.camelCase;
  Debugger = util.Debugger;
  normalized = function(subjects){
    return subjects.map(function(subject){
      var val;
      val = camelize(subject);
      if (val === 'Any') {
        return '*';
      } else {
        return val;
      }
    });
  };
  module.exports = RuleExtractor = (function(){
    RuleExtractor.displayName = 'RuleExtractor';
    var prototype = RuleExtractor.prototype, constructor = RuleExtractor;
    importAll$(prototype, arguments[0]);
    function RuleExtractor(container, action, subjects, debugging){
      this.container = container;
      this.action = action;
      this.subjects = subjects;
      this.debugging = debugging;
    }
    prototype.extract = function(){
      this.debug("register action subjects", this.actionSubjects(), this.uniqueSubjects());
      return unique(normalized(this.actionSubjects()).concat(this.uniqueSubjects()));
    };
    prototype.uniqueSubjects = function(){
      return unique(this.normalizedSubjects());
    };
    prototype.actionSubjects = function(){
      return this.container[this.action] || [];
    };
    prototype.normalizedSubjects = function(){
      return this._normalizedSubjects || (this._normalizedSubjects = normalized(normalize(this.subjects)));
    };
    return RuleExtractor;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
