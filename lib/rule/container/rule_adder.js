// Generated by LiveScript 1.2.0
(function(){
  var util, Debugger, RuleExtractor, RuleAdder;
  util = require('../../util');
  Debugger = util.Debugger;
  RuleExtractor = require('./rule_extractor');
  module.exports = RuleAdder = (function(){
    RuleAdder.displayName = 'RuleAdder';
    var prototype = RuleAdder.prototype, constructor = RuleAdder;
    importAll$(prototype, arguments[0]);
    function RuleAdder(container, subjects, debugging){
      this.container = container;
      this.subjects = subjects;
      this.debugging = debugging;
    }
    prototype._type = 'RuleAdder';
    prototype.add = function(action){
      this.debug('add rule', action, this.subjects);
      this.actionSubjects(action, this.subjects);
      this.container[action] = this.actionSubjects();
      this.addManage(action);
      return this;
    };
    prototype.actionSubjects = function(action){
      return this._actionSubjects || (this._actionSubjects = this.extractor(action).extract());
    };
    prototype.addManage = function(action){
      var i$, ref$, len$;
      if (action !== 'manage') {
        return;
      }
      this.debug('add-manage', action);
      for (i$ = 0, len$ = (ref$ = this.manageActions).length; i$ < len$; ++i$) {
        action = ref$[i$];
        this.container[action] = this.actionSubjects();
      }
      return this;
    };
    prototype.extractor = function(action){
      return new RuleExtractor(this.container, action, this.subjects);
    };
    prototype.manageActions = require('../../util').globals.manageActions;
    return RuleAdder;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
