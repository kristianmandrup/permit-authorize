// Generated by LiveScript 1.2.0
(function(){
  var util, array, normalize, Debugger, RuleMixin, RuleRegistrator, toString$ = {}.toString;
  util = require('../../util');
  array = util.array;
  normalize = util.normalize;
  Debugger = util.Debugger;
  RuleMixin = require('./rule_mixin');
  RuleAdder;
  module.exports = RuleRegistrator = (function(){
    RuleRegistrator.displayName = 'RuleRegistrator';
    var prototype = RuleRegistrator.prototype, constructor = RuleRegistrator;
    importAll$(prototype, arguments[0]);
    importAll$(prototype, arguments[1]);
    function RuleRegistrator(container, act, actions, subjects, debugging){
      this.container = container;
      this.act = act;
      this.actions = actions;
      this.subjects = subjects;
      this.debugging = debugging;
      this._validate();
      this.actions = normalize(this.actions);
      this;
    }
    prototype._validate = function(){
      if (toString$.call(this.container).slice(8, -1) !== 'Object') {
        throw Error("Container must be an object, was: " + this.container);
      }
    };
    prototype.register = function(){
      this.container = this.containerFor(act);
      this.debug('rule container', this.container);
      this.addActions();
      return this;
    };
    prototype.addActions = function(){
      var i$, ref$, len$, action, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.actions).length; i$ < len$; ++i$) {
        action = ref$[i$];
        results$.push(this.add(action));
      }
      return results$;
    };
    prototype.add = function(action){
      return new RuleAdder(this.container, action, this.subjects, this.debugging);
    };
    return RuleRegistrator;
  }(RuleMixin, Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
