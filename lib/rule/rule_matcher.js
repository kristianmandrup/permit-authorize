// Generated by LiveScript 1.2.0
(function(){
  var every, RuleMatcher, toString$ = {}.toString;
  every = require('../util').array.every;
  module.exports = RuleMatcher = (function(){
    RuleMatcher.displayName = 'RuleMatcher';
    var prototype = RuleMatcher.prototype, constructor = RuleMatcher;
    function RuleMatcher(act, accessRequest){
      this.act = act;
      this.accessRequest = accessRequest;
      this.act = camelCase(this.act);
    }
    prototype.match = function(){
      var action, subject, subjClazz, actionSubjects;
      this.debug('match-rule', this.act, this.accessRequest);
      action = this.accessRequest.action;
      subject = this.accessRequest.subject;
      this.debug('action, subject', action, subject);
      subjClazz = this.subjectClazz(subject);
      this.debug('rule-container', this.ruleContainer());
      if (action === 'manage') {
        this.matchManageRule(this.ruleContainer(), subjClazz);
      }
      this.debug('subj-clazz', subjClazz);
      if (!subjClazz) {
        return false;
      }
      actionSubjects = this.ruleContainer()[action];
      this.debug('action-subjects', actionSubjects);
      if (!actionSubjects) {
        return false;
      }
      return this.matchSubjectClazz(actionSubjects, subjClazz);
    };
    prototype.ruleContainer = function(){
      return this._container || (this._container = this.containerFor(this.act));
    };
    prototype.matchSubjectClazz = function(actionSubjects, subjClazz){
      this.debug('match-subject-clazz', actionSubjects, subjClazz);
      if (toString$.call(actionSubjects).slice(8, -1) !== 'Array') {
        return false;
      }
      return this.findMatchingSubject(actionSubjects, subjClazz);
    };
    prototype.matchManageRule = function(ruleContainer, subjClazz){
      var manageSubjects, found;
      manageSubjects = ruleContainer['manage'];
      found = matchSubjectClazz(manageSubjects, subjClazz);
      if (found) {
        return found;
      }
      return every(manageActionSubjects(ruleContainer), function(actionSubjects){
        return matchSubjectClazz(actionSubjects, subjClazz);
      });
    };
    prototype.manageActionSubjects = function(ruleContainer){
      return this.manageActions.map(function(action){
        return ruleContainer[action];
      });
    };
    prototype.manageActions = ['create', 'edit', 'delete'];
    return RuleMatcher;
  }());
}).call(this);
