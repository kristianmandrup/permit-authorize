// Generated by LiveScript 1.2.0
(function(){
  var lo, Debugger, recurse, valid_rules, RuleApplier, toString$ = {}.toString;
  lo = require('../util/lodash_lite');
  Debugger = require('../debugger');
  recurse = function(val, ctx){
    var k, results$ = [];
    switch (toString$.call(val).slice(8, -1)) {
    case 'Function':
      return val.call(ctx);
    case 'Object':
      for (k in val) {
        results$.push(recurse(k, ctx));
      }
      return results$;
    }
  };
  valid_rules = function(rules){
    return toString$.call(rules).slice(8, -1) === 'Object' || toString$.call(rules).slice(8, -1) === 'Function';
  };
  module.exports = RuleApplier = (function(){
    RuleApplier.displayName = 'RuleApplier';
    var prototype = RuleApplier.prototype, constructor = RuleApplier;
    importAll$(prototype, arguments[0]);
    function RuleApplier(repo, rules, accessRequest, debugging){
      this.repo = repo;
      this.rules = rules;
      this.accessRequest = accessRequest;
      this.debugging = debugging;
      if (toString$.call(this.repo).slice(8, -1) !== 'Object') {
        throw Error("RuleApplier must be passed a RuleRepo, was: " + this.repo);
      }
      if (!valid_rules(this.rules)) {
        throw Error("RuleApplier must be passed the rules to be applied, was: " + this.rules);
      }
      if (!(this.accessRequest === undefined || toString$.call(this.accessRequest).slice(8, -1) === 'Object')) {
        throw Error("AccessRequest must be an Object, was: " + this.accessRequest);
      }
      this.debugging = this.debugging;
    }
    prototype.action = function(){
      var ref$;
      return (ref$ = this.accessRequest) != null ? ref$.action : void 8;
    };
    prototype.user = function(){
      var ref$;
      return (ref$ = this.accessRequest) != null ? ref$.user : void 8;
    };
    prototype.subject = function(){
      var ref$;
      return (ref$ = this.accessRequest) != null ? ref$.subject : void 8;
    };
    prototype.ctx = function(){
      var ref$;
      return (ref$ = this.accessRequest) != null ? ref$.ctx : void 8;
    };
    prototype.canRules = function(){
      return this.repo.canRules;
    };
    prototype.cannotRules = function(){
      return this.repo.cannotRules;
    };
    prototype.applyRulesFor = function(name, context){
      var rules, namedRules;
      this.debug("apply rules for " + name + " in context: " + context);
      if (toString$.call(name).slice(8, -1) === 'Object') {
        this.applyObjRulesFor(name, context);
      }
      if (toString$.call(name).slice(8, -1) !== 'String') {
        this.debug("Name to apply rules for must be a String, was: " + typeof name + " : " + name);
        return this;
      }
      rules = this.contextRules(context);
      namedRules = rules[name];
      if (toString$.call(namedRules).slice(8, -1) === 'Function') {
        namedRules.call(this, this.accessRequest);
      } else {
        this.debug("rules key for " + name + " should be a function that resolves one or more rules");
      }
      return this;
    };
    prototype.applyObjRulesFor = function(obj, context){
      var rules, objKeys, key, val, keyRules, results$ = [];
      rules = this.contextRules(context);
      this.debug('apply-obj-rules-for', obj, context, rules);
      objKeys = Object.keys(obj);
      if (obj.clazz === 'User') {
        objKeys = ['name', 'role'];
      }
      for (key in objKeys) {
        val = obj[key];
        if (obj.clazz === 'User') {
          this.applyRulesFor(val, context);
        }
        keyRules = rules[key];
        results$.push(this.applyRulesFor(val, keyRules));
      }
      return results$;
    };
    prototype.contextRules = function(context){
      if (toString$.call(context).slice(8, -1) === 'Object') {
        return context;
      }
      if (toString$.call(context).slice(8, -1) !== 'String') {
        return this.rules;
      }
      if (toString$.call(this.rules[context]).slice(8, -1) === 'Object') {
        return this.rules[context];
      } else {
        this.debug("no such rules context: " + context, this.rules);
        return this.rules;
      }
    };
    prototype.applyActionRules = function(){
      this.applyRulesFor(this.action());
      this.applyRulesFor(this.action(), 'action');
      return this;
    };
    prototype.applyUserRules = function(){
      this.applyRulesFor(this.user());
      this.applyRulesFor(this.user(), 'user');
      return this;
    };
    prototype.applySubjectRules = function(){
      this.applyRulesFor(this.subject());
      this.applyRulesFor(this.subject(), 'subject');
      return this;
    };
    prototype.applyCtxRules = function(){
      this.applyRulesFor(this.ctx());
      this.applyRulesFor(this.ctx(), 'ctx');
      this.applyRulesFor(this.ctx(), 'context');
      return this;
    };
    prototype.applyContextRules = function(){
      return this.applyCtxRules();
    };
    prototype.validRequest = function(){
      return !lo.isEmpty(this.accessRequest);
    };
    prototype.applyDefaultRules = function(){
      this.debug('apply-default-rules', this.accessRequest, this.validRequest());
      if (toString$.call(this.accessRequest).slice(8, -1) === 'Object' && this.validRequest()) {
        this.applyAccessRules();
      } else {
        this.applyRulesFor('default');
      }
      return this;
    };
    prototype.applyRules = function(){
      if (!valid_rules(this.rules)) {
        this.debug('invalid permit rules could not be applied');
        return;
      }
      this.debug('applying rules', this.rules, 'for', this.accessRequest);
      switch (typeof this.rules) {
      case 'function':
        this.rules();
        break;
      case 'object':
        this.applyDefaultRules();
        break;
      default:
        throw Error("rules must be a Function or an Object, was: " + this.rules);
      }
      return this;
    };
    prototype.applyAccessRules = function(){
      this.debug('apply access rules on', this.accessRequest);
      this.applyActionRules();
      this.applyUserRules();
      this.applyCtxRules();
      return this;
    };
    prototype.applyAllRules = function(){
      var rules, ctx, self, key;
      switch (typeof this.rules) {
      case 'object':
        rules = this.rules;
        ctx = this;
        self = this;
        for (key in rules) {
          self.recurse(rules[key], ctx);
        }
        break;
      default:
        throw Error("rules must be an Object was: " + typeof this.rules);
      }
      return this;
    };
    prototype.ucan = function(actions, subjects, ctx){
      return this.repo.registerRule('can', actions, subjects, ctx);
    };
    prototype.ucannot = function(actions, subjects, ctx){
      return this.repo.registerRule('cannot', actions, subjects, ctx);
    };
    return RuleApplier;
  }(Debugger));
  lo.extend(RuleApplier, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
