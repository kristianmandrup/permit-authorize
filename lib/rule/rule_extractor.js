// Generated by LiveScript 1.2.0
(function(){
  var RuleExtractor, toString$ = {}.toString;
  module.exports = RuleExtractor = (function(){
    RuleExtractor.displayName = 'RuleExtractor';
    var prototype = RuleExtractor.prototype, constructor = RuleExtractor;
    function RuleExtractor(ruleContainer, action, subjects){
      this.ruleContainer = ruleContainer;
      this.action = action;
      this.subjects = subjects;
    }
    prototype.extract = function(){
      return this.registerActionSubjects(this.actionSubjects(), this.uniqueSubjects());
    };
    prototype.registerActionSubjects = function(actionContainer, subjects){
      this.debug("register action subjects", actionContainer, subjects);
      return unique(actionContainer.concat(subjects));
    };
    prototype.uniqueSubjects = function(){
      return unique(this.ruleSubjects);
    };
    prototype.actionSubjects = function(){
      var as;
      as = this.ruleContainer[action];
      if (toString$.call(as).slice(8, -1) === 'Array') {
        return as;
      } else {
        return [];
      }
    };
    prototype.ruleSubjects = function(){
      return this._ruleSubjects || (this._ruleSubjects = this.__ruleSubjects());
    };
    prototype.__ruleSubjects = function(){
      var ruleSubjects, subjects;
      ruleSubjects = this.ruleContainer[this.action] || [];
      subjects = normalize(this.subjects);
      ruleSubjects = ruleSubjects.concat(subjects);
      return ruleSubjects.map(function(subject){
        var val;
        val = camelCase(subject);
        if (val === 'Any') {
          return '*';
        } else {
          return val;
        }
      });
    };
    return RuleExtractor;
  }());
}).call(this);
