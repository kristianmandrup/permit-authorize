// Generated by LiveScript 1.2.0
(function(){
  var RulesApplier, util, StaticApplier, toString$ = {}.toString;
  RulesApplier = require('./rules_applier');
  util = require('../util');
  module.exports = StaticApplier = (function(superclass){
    var prototype = extend$((import$(StaticApplier, superclass).displayName = 'StaticApplier', StaticApplier), superclass).prototype, constructor = StaticApplier;
    function StaticApplier(repo, rules, debugging){
      this.repo = repo;
      this.rules = rules;
      this.debugging = debugging;
      StaticApplier.superclass.apply(this, arguments);
    }
    prototype.applyRules = function(){
      if (!util.validRules(this.rules)) {
        this.debug('invalid permit rules could not be applied');
        return;
      }
      this.debug('applying rules', this.rules);
      switch (typeof this.rules) {
      case 'function':
        this.rules();
        break;
      case 'object':
        this.applyDefaultRules();
        break;
      default:
        throw Error("rules must be a Function or an Object, was: " + this.rules);
      }
      return this;
    };
    prototype.applyAccessRules = function(){
      this.debug('apply access rules on', this);
      this.applyActionRules();
      this.applyUserRules();
      this.applyCtxRules();
      return this;
    };
    prototype.applyAllRules = function(){
      var rules, ctx, key;
      switch (typeof this.rules) {
      case 'object':
        rules = this.rules;
        ctx = this;
        for (key in rules) {
          util.recurse(rules[key], ctx);
        }
        break;
      default:
        throw Error("rules must be an Object was: " + typeof this.rules);
      }
      return this;
    };
    prototype.applyDefaultRules = function(){
      this.debug('apply-default-rules');
      this.applyRulesFor('default', this.rules);
      return this;
    };
    prototype.applyRulesFor = function(name, context){
      var rules, namedRules;
      this.debug("apply rules for " + name + " in context: " + context);
      if (toString$.call(name).slice(8, -1) === 'Object') {
        this.applyObjRulesFor(name);
      }
      if (toString$.call(name).slice(8, -1) !== 'String') {
        this.debug("Name to apply rules for must be a String, was: " + typeof name + " : " + name);
        return this;
      }
      rules = this.contextRules(context);
      namedRules = rules[name];
      this.debug("rules function: " + name, namedRules);
      if (toString$.call(namedRules).slice(8, -1) === 'Function') {
        namedRules.call(this.executionContext);
      } else {
        this.debug("rules key for " + name + " should be a function that resolves one or more rules");
      }
      return this;
    };
    return StaticApplier;
  }(RulesApplier));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
