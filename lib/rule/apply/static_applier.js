// Generated by LiveScript 1.2.0
(function(){
  var RulesApplier, util, StaticApplier, toString$ = {}.toString;
  RulesApplier = require('./rules_applier');
  util = require('../util');
  module.exports = StaticApplier = (function(){
    StaticApplier.displayName = 'StaticApplier';
    var prototype = StaticApplier.prototype, constructor = StaticApplier;
    function StaticApplier(executionContext, rules, debugging){
      this.executionContext = executionContext;
      this.rules = rules;
      this.debugging = debugging;
      this.debug('ctx:', this.executionContext, 'rules:', rules);
      this;
    }
    prototype._type = 'StaticApplier';
    prototype.apply = function(){
      if (!util.validRules(this.rules)) {
        this.debug('invalid permit rules could not be applied');
        return;
      }
      this.debug('applying rules', this.rules, toString$.call(this.rules).slice(8, -1));
      this.functionRules() || this.objectRules();
      return this;
    };
    prototype.functionRules = function(){
      if (toString$.call(this.rules).slice(8, -1) === 'Function') {
        return this.rules();
      }
    };
    prototype.objectRules = function(){
      if (toString$.call(this.rules).slice(8, -1) === 'Object') {
        return this.applyRules();
      }
    };
    prototype.noRules = function(){
      throw Error("rules must be a Function or an Object, was: " + this.rules);
    };
    prototype.applyRules = function(name){
      name == null && (name = 'static');
      this.debug('apply-rules', name);
      this.applyRulesFor(name);
      return this;
    };
    prototype.applyRulesFor = function(name){
      return this.rulesApplier().apply(name);
    };
    prototype.rulesApplier = function(){
      return this._rulesApplier || (this._rulesApplier = new RulesApplier(executionContext, rules, debugging));
    };
    return StaticApplier;
  }());
}).call(this);
