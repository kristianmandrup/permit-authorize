// Generated by LiveScript 1.2.0
(function(){
  var RulesApplier, util, StaticApplier, toString$ = {}.toString;
  RulesApplier = require('./rules_applier');
  util = require('../util');
  module.exports = StaticApplier = (function(superclass){
    var prototype = extend$((import$(StaticApplier, superclass).displayName = 'StaticApplier', StaticApplier), superclass).prototype, constructor = StaticApplier;
    function StaticApplier(executionContext, rules, debugging){
      this.executionContext = executionContext;
      this.rules = rules;
      this.debugging = debugging;
      StaticApplier.superclass.apply(this, arguments);
      this.debug('ctx:', this.executionContext, 'rules:', rules);
      this;
    }
    prototype.applyRules = function(){
      if (!util.validRules(this.rules)) {
        this.debug('invalid permit rules could not be applied');
        return;
      }
      this.debug('applying rules', this.rules, toString$.call(this.rules).slice(8, -1));
      this.functionRules() || this.objectRules();
      return this;
    };
    prototype.functionRules = function(){
      if (toString$.call(this.rules).slice(8, -1) === 'Function') {
        return this.rules();
      }
    };
    prototype.objectRules = function(){
      if (toString$.call(this.rules).slice(8, -1) === 'Object') {
        return this.applyDefaultRules();
      }
    };
    prototype.noRules = function(){
      throw Error("rules must be a Function or an Object, was: " + this.rules);
    };
    prototype.applyDefaultRules = function(){
      this.debug('apply-default-rules');
      this.applyRulesFor('default');
      return this;
    };
    return StaticApplier;
  }(RulesApplier));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
