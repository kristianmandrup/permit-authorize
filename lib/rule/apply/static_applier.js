// Generated by LiveScript 1.2.0
(function(){
  var RulesApplier, util, StaticApplier;
  RulesApplier = require('./rules_applier');
  util = require('../util');
  module.exports = StaticApplier = (function(superclass){
    var prototype = extend$((import$(StaticApplier, superclass).displayName = 'StaticApplier', StaticApplier), superclass).prototype, constructor = StaticApplier;
    function StaticApplier(executionContext, rules, debugging){
      this.executionContext = executionContext;
      this.rules = rules;
      this.debugging = debugging;
      StaticApplier.superclass.apply(this, arguments);
      this.debug('StaticApplier ctx:', this.executionContext);
      this;
    }
    prototype.applyRules = function(){
      if (!util.validRules(this.rules)) {
        this.debug('invalid permit rules could not be applied');
        return;
      }
      this.debug('applying rules', this.rules);
      switch (typeof this.rules) {
      case 'function':
        this.rules();
        break;
      case 'object':
        this.applyDefaultRules();
        break;
      default:
        throw Error("rules must be a Function or an Object, was: " + this.rules);
      }
      return this;
    };
    prototype.applyDefaultRules = function(){
      this.debug('apply-default-rules');
      this.applyRulesFor('default');
      return this;
    };
    return StaticApplier;
  }(RulesApplier));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
