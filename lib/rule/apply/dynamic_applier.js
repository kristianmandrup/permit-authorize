// Generated by LiveScript 1.2.0
(function(){
  var RulesApplier, util, DynamicApplier, toString$ = {}.toString;
  RulesApplier = require('./rules_applier');
  util = require('../util');
  module.exports = DynamicApplier = (function(superclass){
    var prototype = extend$((import$(DynamicApplier, superclass).displayName = 'DynamicApplier', DynamicApplier), superclass).prototype, constructor = DynamicApplier;
    function DynamicApplier(executionContext, rules, accessRequest, debugging){
      this.executionContext = executionContext;
      this.rules = rules;
      this.accessRequest = accessRequest;
      this.debugging = debugging;
      this.validateRules();
      DynamicApplier.superclass.apply(this, arguments);
      this.debug('apply dynamic rules', this.rules);
      this;
    }
    prototype._type = 'DynamicApplier';
    prototype.validRequest = function(){
      if (toString$.call(this.accessRequest).slice(8, -1) !== 'Object') {
        return false;
      }
      return Object.keys(this.accessRequest).length > 0;
    };
    prototype.validateRules = function(){
      if (!util.validRules(this.rules)) {
        throw Error("No rules defined for permit: " + this.name);
      }
    };
    prototype.apply = function(){
      this.debug('apply');
      if (!this.validRequest()) {
        return false;
      }
      return this.executeRules() || this.applyRules();
    };
    prototype.executeRules = function(){
      if (toString$.call(this.rules).slice(8, -1) === 'Function') {
        return this.rules(this.accessRequest);
      }
    };
    prototype.applyRules = function(){
      var i$, ref$, len$, name;
      if (!this.validRequest()) {
        return this;
      }
      this.debug('apply access rules on', this.accessRequest);
      for (i$ = 0, len$ = (ref$ = ['action', 'user', 'ctx']).length; i$ < len$; ++i$) {
        name = ref$[i$];
        this.applyDynamic(this.arValue(name));
      }
      return this;
    };
    prototype.arValue = function(property){
      return this.accessRequest[property];
    };
    prototype.applyDynamic = function(rule){
      this.debug('apply-dynamic', rule);
      if (rule) {
        this.ruleApplier(rule, ctx).apply();
      }
      return this;
    };
    prototype.ruleApplier = function(rule, ctx){
      return new RuleApplier(rule, ctx);
    };
    return DynamicApplier;
  }(RulesApplier));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
