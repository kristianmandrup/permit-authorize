// Generated by LiveScript 1.2.0
(function(){
  var RulesApplier, DynamicApplier, toString$ = {}.toString;
  RulesApplier = require('./rules_applier');
  module.exports = DynamicApplier = (function(superclass){
    var prototype = extend$((import$(DynamicApplier, superclass).displayName = 'DynamicApplier', DynamicApplier), superclass).prototype, constructor = DynamicApplier;
    function DynamicApplier(repo, rules, debugging){
      this.repo = repo;
      this.rules = rules;
      this.debugging = debugging;
      DynamicApplier.superclass.apply(this, arguments);
    }
    prototype.applyRulesFor = function(name, context){
      var rules, namedRules;
      this.debug("apply rules for " + name + " in context: " + context);
      if (toString$.call(name).slice(8, -1) === 'Object') {
        this.applyObjRulesFor(name, context);
      }
      if (toString$.call(name).slice(8, -1) !== 'String') {
        this.debug("Name to apply rules for must be a String, was: " + typeof name + " : " + name);
        return this;
      }
      rules = this.contextRules(context);
      namedRules = rules[name];
      if (toString$.call(namedRules).slice(8, -1) === 'Function') {
        namedRules.call(this.executionContext, this.accessRequest);
      } else {
        this.debug("rules key for " + name + " should be a function that resolves one or more rules");
      }
      return this;
    };
    prototype.applyObjRulesFor = function(obj, context){
      var rules, objKeys, key, val, keyRules, results$ = [];
      rules = this.rulesAccessor.contextRules(context);
      this.debug('apply-obj-rules-for', obj, context, rules);
      objKeys = Object.keys(obj);
      if (obj.clazz === 'User') {
        objKeys = ['name', 'role'];
      }
      for (key in objKeys) {
        val = obj[key];
        if (obj.clazz === 'User') {
          this.applyRulesFor(val, context);
        }
        keyRules = rules[key];
        results$.push(this.applyRulesFor(val, keyRules));
      }
      return results$;
    };
    prototype.applyActionRules = function(){
      this.applyRulesFor(this.action());
      this.applyRulesFor(this.action(), 'action');
      return this;
    };
    prototype.applyUserRules = function(){
      this.applyRulesFor(this.user());
      this.applyRulesFor(this.user(), 'user');
      return this;
    };
    prototype.applySubjectRules = function(){
      this.applyRulesFor(this.subject());
      this.applyRulesFor(this.subject(), 'subject');
      return this;
    };
    prototype.applyCtxRules = function(){
      this.applyRulesFor(this.ctx());
      this.applyRulesFor(this.ctx(), 'ctx');
      this.applyRulesFor(this.ctx(), 'context');
      return this;
    };
    prototype.applyContextRules = function(){
      return this.applyCtxRules();
    };
    prototype.applyAccessRules = function(){
      this.debug('apply access rules on', this.accessRequest);
      this.applyActionRules();
      this.applyUserRules();
      this.applyCtxRules();
      return this;
    };
    prototype.applyDefaultRules = function(){
      this.debug('apply-default-rules', this.accessRequest, this.validRequest());
      if (toString$.call(this.accessRequest).slice(8, -1) === 'Object' && this.validRequest()) {
        this.applyAccessRules();
      } else {
        this.applyRulesFor('default');
      }
      return this;
    };
    return DynamicApplier;
  }(RulesApplier));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
