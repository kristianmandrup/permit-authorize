// Generated by LiveScript 1.2.0
(function(){
  var util, Debugger, KeyRuleApplier, ObjectRuleApplier, RuleApplier;
  util = require('../../../util');
  Debugger = util.Debugger;
  KeyRuleApplier = require('./key_rule_applier');
  ObjectRuleApplier = require('./object_rule_applier');
  module.exports = RuleApplier = (function(){
    RuleApplier.displayName = 'RuleApplier';
    var prototype = RuleApplier.prototype, constructor = RuleApplier;
    importAll$(prototype, arguments[0]);
    function RuleApplier(thing, ctx, debugging){
      this.thing = thing;
      this.ctx = ctx;
      this.debugging = debugging;
    }
    prototype._type = 'RuleApplier';
    prototype.apply = function(){
      return this.applier().apply;
    };
    prototype.applier = function(){
      return this.keyRuleApplier() || this.objectRuleApplier();
    };
    prototype.keyRuleApplier = function(){
      if (typeof this.thing === 'String') {
        return new KeyRuleApplier(this.thing, this.ctx);
      }
    };
    prototype.objectRuleApplier = function(){
      if (typeof this.thing === 'Object') {
        return new ObjectRuleApplier(this.thing, this.ctx);
      }
    };
    return RuleApplier;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
