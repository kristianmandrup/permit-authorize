// Generated by LiveScript 1.2.0
(function(){
  var util, Debugger, ApplyMixin, ObjectRuleApplier, toString$ = {}.toString;
  util = require('../../../util');
  Debugger = util.Debugger;
  ApplyMixin = require('./apply_mixin');
  module.exports = ObjectRuleApplier = (function(){
    ObjectRuleApplier.displayName = 'ObjectRuleApplier';
    var prototype = ObjectRuleApplier.prototype, constructor = ObjectRuleApplier;
    importAll$(prototype, arguments[0]);
    importAll$(prototype, arguments[1]);
    function ObjectRuleApplier(object, context, debugging){
      this.object = object;
      this.context = context;
      this.debugging = debugging;
      this._validate();
      this.configure();
      this.debug('object:', this.object, 'context:', this.context, 'rules:', this.rules);
      this;
    }
    prototype._type = 'ObjectRuleApplier';
    prototype._validate = function(){
      if (toString$.call(this.object).slice(8, -1) !== 'Object') {
        throw Error("object must be an Object, was: " + this.object);
      }
    };
    prototype.configure = function(){
      this.rules = this.contextRules(context);
      return this.objectKeys = Object.keys(object);
    };
    prototype.apply = function(){
      return this.iterate(this.keys());
    };
    prototype.keys = function(){
      return this.userKeys() || this.objectKeys;
    };
    prototype.iterate = function(objKeys){
      var i$, len$, key, results$ = [];
      for (i$ = 0, len$ = objKeys.length; i$ < len$; ++i$) {
        key = objKeys[i$];
        results$.push(this.applyKey(key));
      }
      return results$;
    };
    prototype.applyKey = function(key){
      var value;
      value = this.object[key];
      this.debug('object value', value, 'for', key);
      return this.applyRulesFor(value, this.contextFor(key));
    };
    prototype.contextFor = function(key){
      if (this.isUser()) {
        return this.context;
      } else {
        return this.rules[key];
      }
    };
    prototype.userKeys = function(){
      if (this.isUser()) {
        return ['name', 'role'];
      }
    };
    prototype.isUser = function(){
      return this._isUser || (this._isUser = subject(this.object).clazz === 'User');
    };
    return ObjectRuleApplier;
  }(ApplyMixin, Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
