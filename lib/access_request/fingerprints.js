// Generated by LiveScript 1.2.0
(function(){
  var Fingerprint, ObjectFingerprint, ArrayFingerprint, toString$ = {}.toString;
  Fingerprint = (function(){
    Fingerprint.displayName = 'Fingerprint';
    var prototype = Fingerprint.prototype, constructor = Fingerprint;
    function Fingerprint(value){
      this;
      this.value = value;
    }
    prototype.fingerprint = function(){
      return this.none() || this.string();
    };
    prototype.string = function(){
      if (toString$.call(this.value).slice(8, -1) === 'String') {
        return this.value;
      }
    };
    prototype.none = function(){
      if (this.value === void 8) {
        return 'x';
      }
    };
    return Fingerprint;
  }());
  ObjectFingerprint = (function(superclass){
    var prototype = extend$((import$(ObjectFingerprint, superclass).displayName = 'ObjectFingerprint', ObjectFingerprint), superclass).prototype, constructor = ObjectFingerprint;
    prototype.fingerprint = function(){
      return superclass.prototype.fingerprint.call(this) || this.hash() || this.json();
    };
    prototype.hash = function(){
      if (toString$.call(this.value.hash).slice(8, -1) === 'Function') {
        return this.value.hash();
      }
    };
    prototype.json = function(){
      return JSON.stringify(this.value);
    };
    function ObjectFingerprint(){
      ObjectFingerprint.superclass.apply(this, arguments);
    }
    return ObjectFingerprint;
  }(Fingerprint));
  ArrayFingerprint = (function(superclass){
    var prototype = extend$((import$(ArrayFingerprint, superclass).displayName = 'ArrayFingerprint', ArrayFingerprint), superclass).prototype, constructor = ArrayFingerprint;
    prototype.fingerprint = function(){
      return this.none() || this.string() || this.joined();
    };
    prototype.joined = function(){
      if (toString$.call(this.value).slice(8, -1) === 'Array') {
        return this.value.join('.');
      }
    };
    function ArrayFingerprint(){
      ArrayFingerprint.superclass.apply(this, arguments);
    }
    return ArrayFingerprint;
  }(Fingerprint));
  module.exports = {
    accessHash: function(){
      return this._accessHash || (this._accessHash = [this.actionHash(), this.subjectHash(), this.ctxHash()].join(':'));
    },
    subjectHash: function(){
      return this.subjectFingerprint || (this.subjectFingerprint = new ObjectFingerprint(this.subject).fingerprint());
    },
    actionHash: function(){
      return this.actionFingerprint || (this.actionFingerprint = new ArrayFingerprint(this.action).fingerprint());
    },
    userHash: function(){
      return this.userFingerprint || (this.userFingerprint = new ObjectFingerprint(this.user).fingerprint());
    },
    ctxHash: function(){
      return this.ctxFingerprint || (this.ctxFingerprint = new ObjectFingerprint(this.ctx).fingerprint());
    }
  };
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
