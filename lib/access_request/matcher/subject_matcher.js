// Generated by LiveScript 1.2.0
(function(){
  var Debugger, BaseMatcher, util, camelize, subjectFor, SubjectMatcher, toString$ = {}.toString;
  Debugger = require('../../util').Debugger;
  BaseMatcher = require('./base_matcher');
  util = require('../../util');
  camelize = util.string.camelCase;
  subjectFor = util.subject;
  module.exports = SubjectMatcher = (function(superclass){
    var prototype = extend$((import$(SubjectMatcher, superclass).displayName = 'SubjectMatcher', SubjectMatcher), superclass).prototype, constructor = SubjectMatcher;
    function SubjectMatcher(accessRequest){
      this.accessRequest = accessRequest;
      SubjectMatcher.superclass.apply(this, arguments);
      this.setSubject();
      this.setSubjectClass();
      this;
    }
    prototype.setSubjectClass = function(){
      return this.subjectClass = this.subjectFor(this.subject).clazz();
    };
    prototype.setSubject = function(){
      return this.subject || (this.subject = this.subjectInstance());
    };
    prototype.subjectInstance = function(){
      return subjectFor(this.accessRequest.subject).instance();
    };
    prototype.match = function(subject){
      this.debug('match subjects', this.subject, subject);
      if (toString$.call(subject).slice(8, -1) === 'Function') {
        return subject.call(this.subject);
      }
      if (this.deathMatch('subject', subject)) {
        return true;
      }
      return this.intersect.on(subject, this.subject);
    };
    prototype.matchClazz = function(subject){
      this.debug('match-clazz', subject, this.subjectClass);
      return subjectFor(subject).clazz() === this.subjectClass;
    };
    return SubjectMatcher;
  }(BaseMatcher));
  import$(SubjectMatcher, Debugger);
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
