// Generated by LiveScript 1.2.0
(function(){
  var Debugger, BaseMatcher, ContextMatcher, toString$ = {}.toString;
  Debugger = require('../../util').Debugger;
  BaseMatcher = require('./base_matcher');
  module.exports = ContextMatcher = (function(superclass){
    var prototype = extend$((import$(ContextMatcher, superclass).displayName = 'ContextMatcher', ContextMatcher), superclass).prototype, constructor = ContextMatcher;
    function ContextMatcher(accessRequest){
      this.accessRequest = accessRequest;
      ContextMatcher.superclass.apply(this, arguments);
      this.setCtx();
    }
    prototype.setCtx = function(){
      return this.ctx || (this.ctx = this.accessRequest != null
        ? this.accessRequest.ctx
        : {});
    };
    prototype.match = function(ctx){
      if (toString$.call(ctx).slice(8, -1) === 'Function') {
        return ctx.call(this.ctx);
      }
      if (this.deathMatch('ctx', ctx)) {
        return true;
      }
      return this.intersect.on(ctx, this.ctx);
    };
    return ContextMatcher;
  }(BaseMatcher));
  import$(ContextMatcher, Debugger);
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
