// Generated by LiveScript 1.2.0
(function(){
  var Debugger, UserMatcher, ActionMatcher, SubjectMatcher, ContextMatcher, AccessMatcher, toString$ = {}.toString;
  Debugger = require('../../util').Debugger;
  UserMatcher = require('./user_matcher');
  ActionMatcher = require('./action_matcher');
  SubjectMatcher = require('./subject_matcher');
  ContextMatcher = require('./context_matcher');
  module.exports = AccessMatcher = (function(){
    AccessMatcher.displayName = 'AccessMatcher';
    var prototype = AccessMatcher.prototype, constructor = AccessMatcher;
    importAll$(prototype, arguments[0]);
    function AccessMatcher(accessRequest){
      this.accessRequest = accessRequest;
      this.matchResult = true;
    }
    prototype.userMatcher = function(){
      return this.um || (this.um = new UserMatcher(this.accessRequest));
    };
    prototype.subjectMatcher = function(){
      return this.sm || (this.sm = new SubjectMatcher(this.accessRequest));
    };
    prototype.actionMatcher = function(){
      return this.am || (this.am = new ActionMatcher(this.accessRequest));
    };
    prototype.contextMatcher = function(){
      return this.cm || (this.cm = new ContextMatcher(this.accessRequest));
    };
    prototype.matchOn = function(hash){
      var all, key, matchFun, matchValue;
      all = hash;
      for (key in hash) {
        matchFun = this[key];
        matchValue = hash[key];
        if (toString$.call(matchFun).slice(8, -1) === 'Function') {
          delete all[key];
          matchFun.call(this, matchValue).matchOn(all);
        }
      }
      return this.result();
    };
    prototype.result = function(){
      return this.matchResult;
    };
    prototype.update = function(result){
      return this.matchResult = this.matchResult && result;
    };
    prototype.user = function(user){
      this.update(this.userMatcher().match(user));
      return this;
    };
    prototype.role = function(role){
      this.user({
        role: role
      });
      return this;
    };
    prototype.roles = function(roles){
      var i$, len$, role;
      for (i$ = 0, len$ = roles.length; i$ < len$; ++i$) {
        role = roles[i$];
        if (!this.matchResult) {
          this.role(role);
        }
      }
      return this;
    };
    prototype.subject = function(subject){
      this.update(this.subjectMatcher().match(subject));
      return this;
    };
    prototype.subjectClazz = function(clazz){
      this.update(this.subjectMatcher().matchClazz(clazz));
      return this;
    };
    prototype.action = function(action){
      this.update(this.actionMatcher().match(action));
      return this;
    };
    prototype.actions = function(actions){
      var i$, len$, action;
      for (i$ = 0, len$ = actions.length; i$ < len$; ++i$) {
        action = actions[i$];
        if (!this.matchResult) {
          this.action(action);
        }
      }
      return this;
    };
    prototype.context = function(ctx){
      this.update(this.contextMatcher().match(ctx));
      return this;
    };
    prototype.ctx = function(ctx){
      return this.context(ctx);
    };
    return AccessMatcher;
  }(Debugger));
  import$(AccessMatcher, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
