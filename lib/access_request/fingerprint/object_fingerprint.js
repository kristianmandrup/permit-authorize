// Generated by LiveScript 1.2.0
(function(){
  var Fingerprint, ObjectFingerprint, toString$ = {}.toString;
  Fingerprint = require('./fingerprint');
  module.exports = ObjectFingerprint = (function(superclass){
    var prototype = extend$((import$(ObjectFingerprint, superclass).displayName = 'ObjectFingerprint', ObjectFingerprint), superclass).prototype, constructor = ObjectFingerprint;
    prototype.fingerprint = function(){
      return superclass.prototype.fingerprint.call(this) || this.hash() || this.ownFingerprint() || this.json();
    };
    prototype.hash = function(){
      if (toString$.call(this.value.hash).slice(8, -1) === 'Function') {
        return this.value.hash();
      }
    };
    prototype.ownFingerprint = function(){
      if (toString$.call(this.value.fingerprint).slice(8, -1) === 'Function') {
        return this.value.fingerprint();
      }
    };
    prototype.json = function(){
      return JSON.stringify(this.value);
    };
    function ObjectFingerprint(){
      ObjectFingerprint.superclass.apply(this, arguments);
    }
    return ObjectFingerprint;
  }(Fingerprint));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
