// Generated by LiveScript 1.2.0
(function(){
  var requires, Ability, CachedAbility;
  requires = require('../requires');
  Ability = requires.lib('ability');
  module.exports = CachedAbility = (function(superclass){
    var prototype = extend$((import$(CachedAbility, superclass).displayName = 'CachedAbility', CachedAbility), superclass).prototype, constructor = CachedAbility;
    function CachedAbility(user){
      this.user = user;
      CachedAbility.superclass.apply(this, arguments);
      this.userKey();
    }
    CachedAbility.clearCache = function(){
      constructor.canCache = {};
      return constructor.cannotCache = {};
    };
    CachedAbility.canCache = function(){
      return this._canCache || (this._canCache = {});
    };
    CachedAbility.cannotCache = function(){
      return this._cannotCache || (this._cannotCache = {});
    };
    prototype.userHash = requires.accessRequest('fingerprints').userHash;
    prototype.userKey = function(){
      return this.userKey = this.userHash();
    };
    prototype.can = function(accessRequest){
      var cachedRes, result;
      this.debug('can', accessRequest);
      cachedRes = this.cachedResult('can', accessRequest);
      if (cachedRes !== void 8) {
        return cachedRes;
      }
      result = this.allowedFor(accessRequest);
      this.cacheResult('can', accessRequest, result);
      this.debug('can-res', result);
      return result;
    };
    prototype.cannot = function(accessRequest){
      var cachedRes, result;
      this.debug('cannot', accessRequest);
      cachedRes = this.cachedResult('cannot', accessRequest);
      if (cachedRes !== void 8) {
        return cachedRes;
      }
      result = this.notAllowedFor(accessRequest);
      this.cacheResult('cannot', accessRequest, result);
      this.debug('cannot-res', result);
      return result;
    };
    prototype.cachedResult = function(act, accessRequest){
      var cacheRepo, accReqKey;
      cacheRepo = this[act + "Cache"]();
      accReqKey = accessRequest.accessHash();
      return cacheRepo[accReqKey];
    };
    prototype.cacheResult = function(act, accessRequest, result){
      var cacheRepo, accReqKey;
      cacheRepo = this[act + "Cache"]();
      accReqKey = accessRequest.accessHash();
      cacheRepo[accReqKey] = result;
      return result;
    };
    prototype.canCache = function(){
      return Ability.canCache()[this.userKey];
    };
    prototype.cannotCache = function(){
      return Ability.cannotCache()[this.userKey];
    };
    return CachedAbility;
  }(Ability));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
