// Generated by LiveScript 1.2.0
(function(){
  var Ability, Debugger, RulesCache, CachedAbility, slice$ = [].slice;
  Ability = require('./ability');
  Debugger = require('../util').Debugger;
  RulesCache = require('../rule').cache.RulesCache;
  module.exports = CachedAbility = (function(superclass){
    var prototype = extend$((import$(CachedAbility, superclass).displayName = 'CachedAbility', CachedAbility), superclass).prototype, constructor = CachedAbility;
    function CachedAbility(user){
      this.user = user;
      CachedAbility.superclass.apply(this, arguments);
      this.cache = new RulesCache(this.user);
      this;
    }
    prototype.authorize = function(act){
      var args;
      this.act = act;
      args = slice$.call(arguments, 1);
      this.clear();
      if (this.hasCachedResult()) {
        return this.cachedResult();
      }
      return this.cacheResult();
    };
    prototype.fingerprint = function(){
      return this.accessRequest().fingerprint();
    };
    prototype.hasCachedResult = function(){
      return this.cachedResult() !== void 8;
    };
    prototype.clear = function(){
      superclass.prototype.clear.call(this);
      return this._lastResult = void 8;
    };
    prototype.cachedResult = function(){
      return this._lastResult || (this._lastResult = this.cache()[this.fingerprint()]);
    };
    prototype.cacheResult = function(){
      return this.cache()[this.fingerprint()] = this.authResult();
    };
    prototype.cache = function(){
      return this.cache[this.act];
    };
    return CachedAbility;
  }(Ability));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
