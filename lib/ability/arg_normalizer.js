// Generated by LiveScript 1.2.0
(function(){
  var requires, lo, ArgNormalizer, toString$ = {}.toString;
  requires = require('../../requires');
  lo = require('lodash');
  module.exports = ArgNormalizer = (function(){
    ArgNormalizer.displayName = 'ArgNormalizer';
    var prototype = ArgNormalizer.prototype, constructor = ArgNormalizer;
    function ArgNormalizer(args){
      this.args = args;
      if (toString$.call(this.args).slice(8, -1) === 'Object') {
        this.args = [this.args];
      }
    }
    prototype.setUser = function(user){
      this.user = user;
      return this;
    };
    prototype.userObj = function(){
      if (this.user != null) {
        return {
          user: this.user
        };
      } else {
        return {};
      }
    };
    prototype.normalized = function(){
      return lo.extend(this.userObj(), this.normalizedObj());
    };
    prototype.normalizedObj = function(){
      return this.object() || this.createObject();
    };
    prototype.createObject = function(){
      return this.ctxObj() || this.baseObj();
    };
    prototype.ctxObj = function(){
      if (this.args[2]) {
        return lo.extend(this.baseObj(), {
          ctx: this.args[2]
        });
      }
    };
    prototype.baseObj = function(){
      return {
        action: this.args[0],
        subject: this.args[1]
      };
    };
    prototype.object = function(){
      if (toString$.call(this.args[0]).slice(8, -1) === 'Object') {
        return this.args[0];
      }
    };
    return ArgNormalizer;
  }());
}).call(this);
