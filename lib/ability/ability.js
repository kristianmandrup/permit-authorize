// Generated by LiveScript 1.2.0
(function(){
  var PermitFilter, Allower, AccessRequest, Debugger, Normalizer, Ability, toString$ = {}.toString, slice$ = [].slice;
  PermitFilter = require('../allower').PermitFilter;
  Allower = require('../allower').Allower;
  AccessRequest = require('../access_request').AccessRequest;
  Debugger = require('../util').Debugger;
  Normalizer = require('../access_request').util.Normalizer;
  /*
  # Ability of a user to perform an action on a subject
  */
  module.exports = Ability = (function(){
    /*
    # @constructor
    # @param {string} user   - The user who requests access to perform
    # @param {string} author - The author of the book.
    */
    Ability.displayName = 'Ability';
    var prototype = Ability.prototype, constructor = Ability;
    importAll$(prototype, arguments[0]);
    function Ability(user, debug){
      this.user = user;
      if (debug) {
        this.debugOn();
      }
      this._validateUser();
    }
    /*
    # validates the user
    */
    prototype._validateUser = function(){
      if (toString$.call(this.user).slice(8, -1) !== 'Object') {
        throw new Error("User must be an Object, was " + this.user);
      }
    };
    prototype.permits = function(){
      return this.filter();
    };
    prototype.filter = function(){
      return this.permitFilter.filter();
    };
    prototype.permitFilter = function(){
      return new PermitFilter(this.accessRequest);
    };
    prototype.allower = function(){
      return new Allower(this.accessRequest());
    };
    prototype.allowed = function(){
      return this.allower().allows();
    };
    prototype.notAllowed = function(){
      return this.allower().disallows();
    };
    prototype.can = function(){
      this.args = slice$.call(arguments);
      return this.authorize('can');
    };
    prototype.cannot = function(){
      this.args = slice$.call(arguments);
      return this.authorize('cannot');
    };
    prototype.authResult = function(){
      return this._result || (this._result = this.act === 'can'
        ? this.allowed()
        : this.notAllowed());
    };
    prototype.authorize = function(act){
      this.act = act;
      this.clear();
      this.debug('can result:', this.authResult());
      return this.authResult();
    };
    prototype.clear = function(){
      this._result = void 8;
      return this._accessRequest = void 8;
    };
    prototype.accessRequest = function(){
      return this._accessRequest || (this._accessRequest = AccessRequest.from(this.normalized(), this.debugging));
    };
    prototype.normalized = function(){
      this.args = this.args.reduce(function(a, b){
        return a.concat(b);
      });
      this.debug('normalize args', this.args);
      return new Normalizer(this.args).setUser(this.user).normalized();
    };
    return Ability;
  }(Debugger));
  import$(Ability, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
