// Generated by LiveScript 1.2.0
(function(){
  var Debugger, Permit, PermitFilter, Allower;
  Debugger = require('../util').Debugger;
  Permit = require('../permit').Permit;
  PermitFilter = require('./permit_filter');
  module.exports = Allower = (function(){
    Allower.displayName = 'Allower';
    var prototype = Allower.prototype, constructor = Allower;
    importAll$(prototype, arguments[0]);
    function Allower(accessRequest, debugging){
      this.accessRequest = accessRequest;
      this.debugging = debugging;
      this.permits = this.permitFilter().filter();
    }
    prototype.permitFilter = function(){
      return new PermitFilter(this.accessRequest);
    };
    prototype.allows = function(){
      this.debug('allows', this.accessRequest);
      return this.testPermits('allows');
    };
    prototype.disallows = function(){
      this.debug('disallows', this.accessRequest);
      return this.testPermits('disallows');
    };
    prototype.testPermits = function(allowType){
      var i$, ref$, len$, permit;
      this.debug('test permit', allowType, 'permits:', this.permits);
      for (i$ = 0, len$ = (ref$ = this.permits).length; i$ < len$; ++i$) {
        permit = ref$[i$];
        this.debug('test permit', allowType, permit);
        this.debug('with rules', permit.rules);
        if (this.debugging) {
          permit.debugOn();
        }
        permit.applyRules(this.accessRequest);
        this.debug('permit rules');
        if (permit[allowType](this.accessRequest)) {
          return true;
        }
      }
      return false;
    };
    return Allower;
  }(Debugger));
  import$(Allower, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
