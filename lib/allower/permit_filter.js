// Generated by LiveScript 1.2.0
(function(){
  var values, Debugger, Permit, PermitFilter, toString$ = {}.toString;
  values = require('../util').object.values;
  Debugger = require('../util/debugger');
  Permit = require('../permit').Permit;
  module.exports = PermitFilter = (function(){
    PermitFilter.displayName = 'PermitFilter';
    var prototype = PermitFilter.prototype, constructor = PermitFilter;
    importAll$(prototype, arguments[0]);
    function PermitFilter(accessRequest){
      this.accessRequest = accessRequest;
    }
    prototype.filter = function(){
      var permits, res;
      permits = this.permits();
      if (toString$.call(permits).slice(8, -1) !== 'Array') {
        throw Error("permits which contain all registered permits, must be an Array, was: " + typeof permits);
      }
      this.debug('filter permits', permits, this.accessRequest);
      res = permits.filter(this.createMatcher);
      this.debug('filtered', res);
      return res;
    };
    prototype.createMatcher = function(){
      var self;
      self = this;
      return function(permit){
        self.debug('matching', permit, this.accessRequest);
        if (!permit.matches) {
          throw Error("Permit must have a .matches(access-request) method: " + permit);
        }
        return permit.matches(this.accessRequest);
      };
    };
    prototype.permits = function(){
      return values(this.permitSource);
    };
    prototype.permitSource = function(){
      if (PermitContainer.hasAny) {
        return this.activePermits();
      } else {
        return this.allPermits();
      }
    };
    prototype.activePermits = function(){
      return PermitContainer.activeContainersPermits;
    };
    prototype.allPermits = function(){
      return Permit.registry.permits;
    };
    return PermitFilter;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
