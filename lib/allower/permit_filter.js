// Generated by LiveScript 1.2.0
(function(){
  var values, Debugger, Permit, PermitFilter, toString$ = {}.toString;
  values = require('../util/obj_util').values;
  Debugger = require('../util/debugger');
  Permit = require('../permit').Permit;
  module.exports = PermitFilter = (function(){
    PermitFilter.displayName = 'PermitFilter';
    var prototype = PermitFilter.prototype, constructor = PermitFilter;
    importAll$(prototype, arguments[0]);
    PermitFilter.filter = function(accessRequest){
      var self, matchingFun, permits, res;
      self = this;
      matchingFun = function(permit){
        self.debug('matching', permit, accessRequest);
        if (!permit.matches) {
          throw Error("Permit must have a .matches(access-request) method: " + permit);
        }
        return permit.matches(accessRequest);
      };
      permits = this.permits();
      if (toString$.call(permits).slice(8, -1) !== 'Array') {
        throw Error("permits which contain all registered permits, must be an Array, was: " + typeof permits);
      }
      this.debug('filter permits', permits, accessRequest);
      res = permits.filter(matchingFun);
      this.debug('filtered', res);
      return res;
    };
    PermitFilter.permits = function(){
      return values(this.permitSource);
    };
    PermitFilter.permitSource = function(){
      if (PermitContainer.hasAny) {
        return this.activePermits();
      } else {
        return this.allPermits();
      }
    };
    PermitFilter.activePermits = function(){
      return PermitContainer.activeContainersPermits;
    };
    PermitFilter.allPermits = function(){
      return Permit.registry.permits;
    };
    function PermitFilter(){}
    return PermitFilter;
  }(Debugger));
  import$(PermitFilter, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
