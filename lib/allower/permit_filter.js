// Generated by LiveScript 1.2.0
(function(){
  var values, Debugger, Permit, PermitFilter, toString$ = {}.toString;
  values = require('../util').object.values;
  Debugger = require('../util/debugger');
  Permit = require('../permit').Permit;
  module.exports = PermitFilter = (function(){
    PermitFilter.displayName = 'PermitFilter';
    var prototype = PermitFilter.prototype, constructor = PermitFilter;
    importAll$(prototype, arguments[0]);
    function PermitFilter(accessRequest){
      this.accessRequest = accessRequest;
    }
    prototype.filter = function(){
      this._validatePermits();
      this.debug('filter', this.permits(), this.accessRequest);
      return this.filterPermits();
    };
    prototype._validatePermits = function(){
      if (toString$.call(this.permits()).slice(8, -1) !== 'Array') {
        throw Error("permits which contain all registered permits, must be an Array, was: " + typeof this.permits());
      }
    };
    prototype.filterPermits = function(){
      return this.permits().filter(this.matchFun);
    };
    prototype.matchFun = function(){
      return function(permit){
        if (!permit.active) {
          return false;
        }
        if (permit.matches) {
          return permit.matches(this.accessRequest);
        }
        return permit;
      };
    };
    prototype.permits = function(){
      return this._permits || (this._permits = values(this.permitSource));
    };
    prototype.permitSource = function(){
      if (PermitContainer.hasAny) {
        return this.activePermits();
      } else {
        return this.allPermits();
      }
    };
    prototype.activePermits = function(){
      return PermitContainer.activeContainerPermits;
    };
    prototype.allPermits = function(){
      return Permit.registry.permits;
    };
    return PermitFilter;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
