// Generated by LiveScript 1.2.0
(function(){
  var Debugger, PermitAllower, toString$ = {}.toString;
  Debugger = require('../util').Debugger;
  module.exports = PermitAllower = (function(){
    PermitAllower.displayName = 'PermitAllower';
    var prototype = PermitAllower.prototype, constructor = PermitAllower;
    importAll$(prototype, arguments[0]);
    function PermitAllower(ruleRepo, debugging){
      this.ruleRepo = ruleRepo;
      this.debugging = debugging;
      if (toString$.call(this.ruleRepo).slice(8, -1) !== 'Object') {
        throw Error("PermitAllower must take a RuleRepo in constructor, was: " + this.ruleRepo);
      }
    }
    prototype.testAccess = function(act, accessRequest){
      var subj;
      this.debug('test-access', act, accessRequest);
      if (this.debugging) {
        this.ruleRepo.debugOn();
      }
      subj = this.ruleRepo.matchRule(act, accessRequest);
      this.debug('subj', subj);
      return subj === true;
    };
    prototype.allows = function(accessRequest, ignoreInverse){
      this.debug('allows', accessRequest, ignoreInverse);
      if (!ignoreInverse) {
        if (this.disallows(accessRequest, true)) {
          return false;
        }
      }
      if (this.testAccess('can', accessRequest) === false) {
        return false;
      }
      return true;
    };
    prototype.disallows = function(accessRequest, ignoreInverse){
      this.debug('disallows', accessRequest, ignoreInverse);
      if (this.testAccess('cannot', accessRequest) === true) {
        return true;
      }
      return false;
    };
    return PermitAllower;
  }(Debugger));
  import$(PermitAllower, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
