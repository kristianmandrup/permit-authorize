// Generated by LiveScript 1.2.0
(function(){
  var requires, Intersect, lo, Debugger, BaseMatcher, ActionMatcher, UserMatcher, SubjectMatcher, ContextMatcher, AccessMatcher, toString$ = {}.toString;
  requires = require('../requires');
  Intersect = requires.util('intersect');
  lo = require('lodash');
  Debugger = requires.lib('debugger');
  BaseMatcher = (function(){
    BaseMatcher.displayName = 'BaseMatcher';
    var prototype = BaseMatcher.prototype, constructor = BaseMatcher;
    importAll$(prototype, arguments[0]);
    function BaseMatcher(accessRequest){
      this.setAccessRequest(accessRequest);
      this.setIntersect();
    }
    prototype.match = function(value){
      return false;
    };
    prototype.deathMatch = function(name, value){
      if (this[name] && value === void 8) {
        return true;
      }
      return false;
    };
    prototype.setAccessRequest = function(accessRequest){
      return this.accessRequest = accessRequest
        ? accessRequest
        : {};
    };
    prototype.setIntersect = function(){
      return this.intersect || (this.intersect = Intersect());
    };
    return BaseMatcher;
  }(Debugger));
  lo.extend(BaseMatcher, Debugger);
  ActionMatcher = (function(superclass){
    var prototype = extend$((import$(ActionMatcher, superclass).displayName = 'ActionMatcher', ActionMatcher), superclass).prototype, constructor = ActionMatcher;
    function ActionMatcher(accessRequest){
      this.accessRequest = accessRequest;
      ActionMatcher.superclass.apply(this, arguments);
      this.setAction();
    }
    prototype.setAction = function(){
      return this.action || (this.action = this.accessRequest != null ? this.accessRequest.action : '');
    };
    prototype.match = function(action){
      if (_.isType('Function', action)) {
        return action.call(this.action);
      }
      if (this.deathMatch('action', action)) {
        return true;
      }
      return this.action === action;
    };
    return ActionMatcher;
  }(BaseMatcher));
  lo.extend(ActionMatcher, Debugger);
  UserMatcher = (function(superclass){
    var prototype = extend$((import$(UserMatcher, superclass).displayName = 'UserMatcher', UserMatcher), superclass).prototype, constructor = UserMatcher;
    function UserMatcher(accessRequest){
      this.accessRequest = accessRequest;
      UserMatcher.superclass.apply(this, arguments);
      this.setUser();
    }
    prototype.setUser = function(){
      return this.user || (this.user = this.accessRequest != null
        ? this.accessRequest.user
        : {});
    };
    prototype.match = function(user){
      if (_.isType('Function', user)) {
        return user.call(this.user);
      }
      if (this.deathMatch('user', user)) {
        return true;
      }
      return this.intersect.on(user, this.user);
    };
    return UserMatcher;
  }(BaseMatcher));
  lo.extend(UserMatcher, Debugger);
  SubjectMatcher = (function(superclass){
    var prototype = extend$((import$(SubjectMatcher, superclass).displayName = 'SubjectMatcher', SubjectMatcher), superclass).prototype, constructor = SubjectMatcher;
    function SubjectMatcher(accessRequest){
      this.accessRequest = accessRequest;
      SubjectMatcher.superclass.apply(this, arguments);
      this.setSubject();
    }
    prototype.setSubject = function(){
      return this.subject || (this.subject = this.accessRequest != null
        ? this.accessRequest.subject
        : {});
    };
    prototype.match = function(subject){
      if (toString$.call(subject).slice(8, -1) === 'Function') {
        return subject.call(this.subject);
      }
      if (this.deathMatch('subject', subject)) {
        return true;
      }
      return this.intersect.on(subject, this.subject);
    };
    prototype.matchClazz = function(subject){
      var clazz;
      clazz = subject.camelize();
      if (!(this.subject && this.subject.constructor)) {
        return false;
      }
      return this.subject.constructor.displayName === clazz;
    };
    return SubjectMatcher;
  }(BaseMatcher));
  lo.extend(SubjectMatcher, Debugger);
  ContextMatcher = (function(superclass){
    var prototype = extend$((import$(ContextMatcher, superclass).displayName = 'ContextMatcher', ContextMatcher), superclass).prototype, constructor = ContextMatcher;
    function ContextMatcher(accessRequest){
      this.accessRequest = accessRequest;
      ContextMatcher.superclass.apply(this, arguments);
      this.setCtx();
    }
    prototype.setCtx = function(){
      return this.ctx || (this.ctx = this.accessRequest != null
        ? this.accessRequest.ctx
        : {});
    };
    prototype.match = function(ctx){
      if (toString$.call(ctx).slice(8, -1) === 'Function') {
        return ctx.call(this.ctx);
      }
      if (this.deathMatch('ctx', ctx)) {
        return true;
      }
      return this.intersect.on(ctx, this.ctx);
    };
    return ContextMatcher;
  }(BaseMatcher));
  lo.extend(ContextMatcher, Debugger);
  AccessMatcher = (function(){
    AccessMatcher.displayName = 'AccessMatcher';
    var prototype = AccessMatcher.prototype, constructor = AccessMatcher;
    function AccessMatcher(accessRequest){
      this.accessRequest = accessRequest;
      this.matchResult = true;
    }
    prototype.userMatcher = function(){
      return this.um || (this.um = new UserMatcher(this.accessRequest));
    };
    prototype.subjectMatcher = function(){
      return this.sm || (this.sm = new SubjectMatcher(this.accessRequest));
    };
    prototype.actionMatcher = function(){
      return this.am || (this.am = new ActionMatcher(this.accessRequest));
    };
    prototype.contextMatcher = function(){
      return this.cm || (this.cm = new ContextMatcher(this.accessRequest));
    };
    prototype.matchOn = function(hash){
      var all, i$, ref$, len$, key, matchFun, matchValue;
      all = hash;
      for (i$ = 0, len$ = (ref$ = lo.keys(hash)).length; i$ < len$; ++i$) {
        key = ref$[i$];
        matchFun = this[key];
        matchValue = hash[key];
        if (toString$.call(matchFun).slice(8, -1) === 'Function') {
          delete all[key];
          matchFun.call(this, matchValue).matchOn(all);
        }
      }
      return this.result();
    };
    prototype.result = function(){
      return this.matchResult;
    };
    prototype.update = function(result){
      return this.matchResult = this.matchResult && result;
    };
    prototype.user = function(user){
      this.update(this.userMatcher().match(user));
      return this;
    };
    prototype.role = function(role){
      this.user({
        role: role
      });
      return this;
    };
    prototype.subject = function(subject){
      this.update(this.subjectMatcher().match(subject));
      return this;
    };
    prototype.subjectClazz = function(clazz){
      this.update(this.subjectMatcher().matchClazz(clazz));
      return this;
    };
    prototype.action = function(action){
      this.update(this.actionMatcher().match(action));
      return this;
    };
    prototype.context = function(ctx){
      this.update(this.contextMatcher().match(ctx));
      return this;
    };
    prototype.ctx = function(ctx){
      return this.context(ctx);
    };
    return AccessMatcher;
  }());
  lo.extend(AccessMatcher, Debugger);
  module.exports = {
    BaseMatcher: BaseMatcher,
    UserMatcher: UserMatcher,
    ActionMatcher: ActionMatcher,
    SubjectMatcher: SubjectMatcher,
    ContextMatcher: ContextMatcher,
    AccessMatcher: AccessMatcher
  };
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
