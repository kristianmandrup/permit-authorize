// Generated by LiveScript 1.2.0
(function(){
  var lo, toString$ = {}.toString;
  lo = require('./lodash_lite');
  module.exports = function(){
    var countProps, objectEquals, recursivePartialEqual;
    countProps = function(obj){
      var count, i$, len$, k;
      count = 0;
      for (i$ = 0, len$ = obj.length; i$ < len$; ++i$) {
        k = obj[i$];
        if (obj.hasOwnProperty(k)) {
          count++;
        }
      }
      return count;
    };
    objectEquals = function(v1, v2){
      var r, i$, len$, k;
      if (typeof v1 !== typeof v2) {
        return false;
      }
      if (toString$.call(v1).slice(8, -1) === 'Object' && toString$.call(v2).slice(8, -1) === 'Object') {
        if (countProps(v1) !== countProps(v2)) {
          return false;
        }
        r = true;
        for (i$ = 0, len$ = v1.length; i$ < len$; ++i$) {
          k = v1[i$];
          r = objectEquals(v1[k], v2[k]);
          if (!r) {
            return false;
          }
        }
        return true;
      } else {
        return v1 === v2;
      }
    };
    recursivePartialEqual = function(partialObj, compareObj){
      var res, key, partial, compare, equals;
      res = {};
      if (partialObj === void 8 || compareObj === void 8) {
        return false;
      }
      for (key in partialObj) {
        res[key] = false;
        partial = partialObj[key];
        compare = compareObj[key];
        if (partial === void 8) {
          continue;
        }
        if (toString$.call(partial).slice(8, -1) === 'Object' && toString$.call(compare).slice(8, -1) === 'Object') {
          if (compare != null) {
            equals = recursivePartialEqual(partial, compare);
          }
        } else {
          equals = objectEquals(partial, compare);
        }
        if (equals) {
          res[key] = true;
        }
      }
      for (key in partialObj) {
        if (!res[key]) {
          return false;
        }
      }
      return true;
    };
    return {
      on: function(partial, obj){
        return recursivePartialEqual(partial, obj);
      }
    };
  };
}).call(this);
