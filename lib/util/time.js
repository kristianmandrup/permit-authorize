// Generated by LiveScript 1.2.0
(function(){
  var wrapIt, clonedTimer, methodsOf, timerOn, toString$ = {}.toString;
  wrapIt = function(object, key){
    var fun;
    fun = object[key];
    return function(){
      var startTime;
      console.time(key);
      startTime = new Date;
      fun.apply(object, arguments);
      return console.timeEnd(key);
    };
  };
  clonedTimer = function(object, methods){
    var clone, i$, len$, key;
    methods || (methods = Object.keys(object));
    clone = import$({}, object);
    for (i$ = 0, len$ = methods.length; i$ < len$; ++i$) {
      key = methods[i$];
      if (toString$.call(object[key]).slice(8, -1) === 'Function') {
        clone[key] = wrapIt(object, key);
      }
    }
    return clone;
  };
  methodsOf = require('./introspect');
  timerOn = function(object, config){
    var methods, protoMethods, exceptMethods, filteredMethods, i$, len$, key;
    config == null && (config = {});
    methods = config.only;
    if (object.prototype) {
      protoMethods = Object.keys(object.prototype);
    }
    protoMethods || (protoMethods = []);
    methods || (methods = methodsOf(object));
    exceptMethods = config.except;
    if (toString$.call(exceptMethods).slice(8, -1) === 'String') {
      exceptMethods = [except];
    }
    exceptMethods || (exceptMethods = []);
    filteredMethods = methods.filter(function(meth){
      var i$, ref$, len$, exp;
      for (i$ = 0, len$ = (ref$ = exceptMethods).length; i$ < len$; ++i$) {
        exp = ref$[i$];
        if (meth === exp || meth.match(exp)) {
          return false;
        }
      }
      return toString$.call(object[meth]).slice(8, -1) === 'Function';
    });
    for (i$ = 0, len$ = filteredMethods.length; i$ < len$; ++i$) {
      key = filteredMethods[i$];
      if (toString$.call(object[key]).slice(8, -1) === 'Function') {
        object[key] = wrapIt(object, key);
      }
    }
    return object;
  };
  module.exports = {
    timer: timerOn,
    clonedTimer: clonedTimer
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
