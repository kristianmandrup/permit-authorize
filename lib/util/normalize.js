// Generated by LiveScript 1.2.0
(function(){
  var flatten, normalize, toString$ = {}.toString;
  flatten = function(items, res){
    var i$, len$, item;
    if (!res) {
      res = [];
    }
    if (toString$.call(items).slice(8, -1) === 'String') {
      return items;
    }
    for (i$ = 0, len$ = items.length; i$ < len$; ++i$) {
      item = items[i$];
      if (toString$.call(item).slice(8, -1) === 'Array') {
        flatten(item, res);
      } else {
        res.push(item);
      }
    }
    return res;
  };
  normalize = function(items, recursed){
    var normalized;
    normalized = (function(){
      switch (toString$.call(items).slice(8, -1)) {
      case 'Function':
        return normalize(items(), true);
      case 'String':
        if (recursed) {
          return items;
        } else {
          return [items];
        }
        break;
      case 'Array':
        return items.map(function(item){
          return normalize(item, true);
        });
      default:
        throw Error(items + " " + toString$.call(items).slice(8, -1) + " can't be normalized, must be a Function, String or Array");
      }
    }());
    return flatten(normalized);
  };
  module.exports = normalize;
}).call(this);
